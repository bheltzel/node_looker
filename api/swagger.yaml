---
swagger: "2.0"
info:
  description: "### Authorization\n\nThe Looker API uses Looker **API3** credentials\
    \ for authorization and access control. Looker admins can\ncreate API3 credentials\
    \ on Looker's **Admin/Users** page. Pass API3 credentials to the **/login** endpoint\
    \ to\nobtain a temporary access_token. Include that access_token in the Authorization\
    \ header of Looker API requests.\nFor details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)\n\
    \n### Client SDKs\n\nThe Looker API is a RESTful system that should be usable\
    \ by any programming language capable of making\nHTTPS requests. Client SDKs for\
    \ a variety of programming languages can be generated from the Looker API's Swagger\n\
    JSON metadata to streamline use of the Looker API in your applications. A client\
    \ SDK for Ruby is available\nas an example. For more information, see [Looker\
    \ API Client SDKs](https://looker.com/docs/r/api/client_sdks)\n\n### Try It Out!\n\
    \nThe 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons\
    \ for each API method. After logging\nin with API3 credentials, you can use the\
    \ \"Try It Out!\" buttons to call the API directly from the documentation\npage\
    \ to interactively explore API features and responses.\n\n### Versioning\n\nFuture\
    \ releases of Looker will expand this API release-by-release to securely expose\
    \ more and more of the core\npower of Looker to API client applications. API endpoints\
    \ marked as \"beta\" may receive breaking changes without\nwarning. Stable (non-beta)\
    \ API endpoints should not receive breaking changes in future releases.\nFor more\
    \ information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)\n"
  version: "3.0.0"
  title: "Looker API 3.0 Reference"
  contact:
    name: "Looker Team"
    url: "https://looker.com"
    email: "support@looker.com"
  license:
    name: "EULA"
    url: "https://spireon.looker.com/eula"
  x-looker-release-version: "6.10.9"
host: "spireon.looker.com:19999"
basePath: "/api/3.0"
tags:
- name: "ApiAuth"
  description: "API Authentication"
- name: "Auth"
  description: "Manage User Authentication Configuration"
- name: "Config"
  description: "Manage General Configuration"
- name: "Connection"
  description: "Manage Database Connections"
- name: "Content"
  description: "Manage Content"
- name: "Dashboard"
  description: "Manage Dashboards"
- name: "DataAction"
  description: "Run Data Actions"
- name: "Datagroup"
  description: "Manage Datagroups"
- name: "Group"
  description: "Manage Groups"
- name: "Homepage"
  description: "Manage Homepage"
- name: "Integration"
  description: "Manage Integrations"
- name: "Look"
  description: "Run and Manage Looks"
- name: "LookmlModel"
  description: "Manage LookML Models"
- name: "Project"
  description: "Manage Projects"
- name: "Query"
  description: "Run and Manage Queries"
- name: "RenderTask"
  description: "Manage Render Tasks"
- name: "Role"
  description: "Manage Roles"
- name: "RunningQueries"
  description: "Manage Running Queries"
- name: "ScheduledPlan"
  description: "Manage Scheduled Plans"
- name: "Session"
  description: "Session Information"
- name: "Space"
  description: "Manage Spaces"
- name: "SqlQuery"
  description: "Run and Manage SQL Runner Queries"
- name: "User"
  description: "Manage Users"
- name: "UserAttribute"
  description: "Manage User Attributes"
- name: "Workspace"
  description: "Manage Workspaces"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /backup_configuration:
    get:
      tags:
      - "Config"
      summary: "Get Backup Configuration"
      description: "### Get the current Looker internal database backup configuration.\n"
      operationId: "backup_configuration"
      parameters: []
      responses:
        200:
          description: "Current Backup Configuration"
          schema:
            $ref: "#/definitions/BackupConfiguration"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Config"
      x-looker-status: "stable"
    patch:
      tags:
      - "Config"
      summary: "Update Backup Configuration"
      description: "### Update the Looker internal database backup configuration.\n"
      operationId: "update_backup_configuration"
      parameters:
      - in: "body"
        name: "body"
        description: "Options for Backup Configuration"
        required: true
        schema:
          $ref: "#/definitions/BackupConfiguration"
      responses:
        200:
          description: "New state for specified model set."
          schema:
            $ref: "#/definitions/BackupConfiguration"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Config"
      x-looker-status: "stable"
  /connections:
    get:
      tags:
      - "Connection"
      summary: "Get All Connections"
      description: "### Get information about all connections.\n"
      operationId: "all_connections"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Connection"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DBConnection"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Connection"
      x-looker-status: "stable"
    post:
      tags:
      - "Connection"
      summary: "Create Connection"
      description: "### Create a connection using the specified configuration.\n"
      operationId: "create_connection"
      parameters:
      - in: "body"
        name: "body"
        description: "Connection"
        required: false
        schema:
          $ref: "#/definitions/DBConnection"
      responses:
        200:
          description: "Connection"
          schema:
            $ref: "#/definitions/DBConnection"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Connection"
      x-looker-status: "stable"
  /connections/test:
    put:
      tags:
      - "Connection"
      summary: "Test Connection Configuration"
      description: "### Test a connection configuration.\n\nNote that a connection's\
        \ 'dialect' property has a 'connection_tests' property that lists the\nspecific\
        \ types of tests that the connection supports.\n\nThis API is rate limited.\n\
        \nUnsupported tests in the request will be ignored.\n"
      operationId: "test_connection_config"
      parameters:
      - in: "body"
        name: "body"
        description: "Connection"
        required: false
        schema:
          $ref: "#/definitions/DBConnection"
      - name: "tests"
        in: "query"
        description: "Array of names of tests to run"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "Test results"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DBConnectionTestResult"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too Many Requests"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Connection"
      x-looker-status: "stable"
  /connections/{connection_name}:
    get:
      tags:
      - "Connection"
      summary: "Get Connection"
      description: "### Get information about a connection.\n"
      operationId: "connection"
      parameters:
      - name: "connection_name"
        in: "path"
        description: "Name of connection"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Connection"
          schema:
            $ref: "#/definitions/DBConnection"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Connection"
      x-looker-status: "stable"
    delete:
      tags:
      - "Connection"
      summary: "Delete Connection"
      description: "### Delete a connection.\n"
      operationId: "delete_connection"
      parameters:
      - name: "connection_name"
        in: "path"
        description: "Name of connection"
        required: true
        type: "string"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Connection"
      x-looker-status: "stable"
    patch:
      tags:
      - "Connection"
      summary: "Update Connection"
      description: "### Update a connection using the specified configuration.\n"
      operationId: "update_connection"
      parameters:
      - name: "connection_name"
        in: "path"
        description: "Name of connection"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Connection"
        required: true
        schema:
          $ref: "#/definitions/DBConnection"
      responses:
        200:
          description: "Connection"
          schema:
            $ref: "#/definitions/DBConnection"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Connection"
      x-looker-status: "stable"
  /connections/{connection_name}/connection_override/{override_context}:
    delete:
      tags:
      - "Connection"
      summary: "Delete Connection Override"
      description: "### Delete a connection override.\n"
      operationId: "delete_connection_override"
      parameters:
      - name: "connection_name"
        in: "path"
        description: "Name of connection"
        required: true
        type: "string"
      - name: "override_context"
        in: "path"
        description: "Context of connection override"
        required: true
        type: "string"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Connection"
      x-looker-status: "stable"
  /connections/{connection_name}/test:
    put:
      tags:
      - "Connection"
      summary: "Test Connection"
      description: "### Test an existing connection.\n\nNote that a connection's 'dialect'\
        \ property has a 'connection_tests' property that lists the\nspecific types\
        \ of tests that the connection supports.\n\nThis API is rate limited.\n\n\
        Unsupported tests in the request will be ignored.\n"
      operationId: "test_connection"
      parameters:
      - name: "connection_name"
        in: "path"
        description: "Name of connection"
        required: true
        type: "string"
      - name: "tests"
        in: "query"
        description: "Array of names of tests to run"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "Test results"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DBConnectionTestResult"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too Many Requests"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Connection"
      x-looker-status: "stable"
  /content_favorite:
    post:
      tags:
      - "Content"
      summary: "Create Favorite Content"
      description: "### Create favorite content"
      operationId: "create_content_favorite"
      parameters:
      - in: "body"
        name: "body"
        description: "Favorite Content"
        required: false
        schema:
          $ref: "#/definitions/ContentFavorite"
      responses:
        200:
          description: "Favorite Content"
          schema:
            $ref: "#/definitions/ContentFavorite"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Content"
      x-looker-status: "beta"
  /content_favorite/search:
    get:
      tags:
      - "Content"
      summary: "Search Favorite Contents"
      description: "### Search Favorite Content\n"
      operationId: "search_content_favorites"
      parameters:
      - name: "user_id"
        in: "query"
        description: "Match User Id"
        required: false
        type: "integer"
        format: "int64"
      - name: "limit"
        in: "query"
        description: "Number of results to return. (used with offset)"
        required: false
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Number of results to skip before returning any. (used with limit)"
        required: false
        type: "integer"
        format: "int64"
      - name: "sorts"
        in: "query"
        description: "Fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Favorite Content"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ContentFavorite"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Content"
      x-looker-status: "beta"
  /content_favorite/{content_favorite_id}:
    get:
      tags:
      - "Content"
      summary: "Get Favorite Content"
      description: "### Get favorite content by its id"
      operationId: "content_favorite"
      parameters:
      - name: "content_favorite_id"
        in: "path"
        description: "Id of favorite content"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Favorite Content"
          schema:
            $ref: "#/definitions/ContentFavorite"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Content"
      x-looker-status: "beta"
    delete:
      tags:
      - "Content"
      summary: "Delete Favorite Content"
      description: "### Delete favorite content"
      operationId: "delete_content_favorite"
      parameters:
      - name: "content_favorite_id"
        in: "path"
        description: "Id of favorite content"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Content"
      x-looker-status: "beta"
  /content_metadata:
    get:
      tags:
      - "Content"
      summary: "Get All Content Metadatas"
      description: "### Get information about all content metadata in a space.\n"
      operationId: "all_content_metadatas"
      parameters:
      - name: "parent_id"
        in: "query"
        description: "Parent space of content."
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Content Metadata"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ContentMeta"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Content"
      x-looker-status: "beta"
  /content_metadata/{content_metadata_id}:
    get:
      tags:
      - "Content"
      summary: "Get Content Metadata"
      description: "### Get information about an individual content metadata record.\n"
      operationId: "content_metadata"
      parameters:
      - name: "content_metadata_id"
        in: "path"
        description: "Id of content metadata"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Content Metadata"
          schema:
            $ref: "#/definitions/ContentMeta"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Content"
      x-looker-status: "beta"
    patch:
      tags:
      - "Content"
      summary: "Update Content Metadata"
      description: "### Move a piece of content.\n"
      operationId: "update_content_metadata"
      parameters:
      - name: "content_metadata_id"
        in: "path"
        description: "Id of content metadata"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Content Metadata"
        required: true
        schema:
          $ref: "#/definitions/ContentMeta"
      responses:
        200:
          description: "Content Metadata"
          schema:
            $ref: "#/definitions/ContentMeta"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Content"
      x-looker-status: "beta"
  /content_metadata_access:
    get:
      tags:
      - "Content"
      summary: "Get All Content Metadata Accesss"
      description: "### All content metadata access records for a content metadata\
        \ item.\n"
      operationId: "all_content_metadata_accesss"
      parameters:
      - name: "content_metadata_id"
        in: "query"
        description: "Id of content metadata"
        required: false
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Content Metadata Access"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ContentMetaGroupUser"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Content"
      x-looker-status: "beta"
    post:
      tags:
      - "Content"
      summary: "Create Content Metadata Access"
      description: "### Create content metadata access.\n"
      operationId: "create_content_metadata_access"
      parameters:
      - in: "body"
        name: "body"
        description: "Content Metadata Access"
        required: false
        schema:
          $ref: "#/definitions/ContentMetaGroupUser"
      responses:
        200:
          description: "Content Metadata Access"
          schema:
            $ref: "#/definitions/ContentMetaGroupUser"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Content"
      x-looker-status: "beta"
  /content_metadata_access/{content_metadata_access_id}:
    put:
      tags:
      - "Content"
      summary: "Update Content Metadata Access"
      description: "### Update type of access for content metadata.\n"
      operationId: "update_content_metadata_access"
      parameters:
      - name: "content_metadata_access_id"
        in: "path"
        description: "Id of content metadata access"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Content Metadata Access"
        required: true
        schema:
          $ref: "#/definitions/ContentMetaGroupUser"
      responses:
        200:
          description: "Content Metadata Access"
          schema:
            $ref: "#/definitions/ContentMetaGroupUser"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Content"
      x-looker-status: "beta"
    delete:
      tags:
      - "Content"
      summary: "Delete Content Metadata Access"
      description: "### Remove content metadata access.\n"
      operationId: "delete_content_metadata_access"
      parameters:
      - name: "content_metadata_access_id"
        in: "path"
        description: "Id of content metadata access"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Content"
      x-looker-status: "beta"
  /content_view/search:
    get:
      tags:
      - "Content"
      summary: "Search Content Views"
      description: "### Search Content View\n"
      operationId: "search_content_views"
      parameters:
      - name: "view_count"
        in: "query"
        description: "Match view count"
        required: false
        type: "integer"
        format: "int64"
      - name: "group_id"
        in: "query"
        description: "Match Group Id"
        required: false
        type: "integer"
        format: "int64"
      - name: "look_id"
        in: "query"
        description: "Match look_id"
        required: false
        type: "string"
      - name: "dashboard_id"
        in: "query"
        description: "Match dashboard_id"
        required: false
        type: "string"
      - name: "content_metadata_id"
        in: "query"
        description: "Match content metadata id"
        required: false
        type: "integer"
        format: "int64"
      - name: "start_of_week_date"
        in: "query"
        description: "Match start of week date"
        required: false
        type: "string"
      - name: "all_time"
        in: "query"
        description: "True if only all time view records should be returned"
        required: false
        type: "boolean"
      - name: "user_id"
        in: "query"
        description: "Match user id"
        required: false
        type: "integer"
        format: "int64"
      - name: "limit"
        in: "query"
        description: "Number of results to return. Use with `offset` to manage pagination\
          \ of results"
        required: false
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Number of results to skip before returning data"
        required: false
        type: "integer"
        format: "int64"
      - name: "sorts"
        in: "query"
        description: "Fields to sort by"
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Content View"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ContentView"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Content"
      x-looker-status: "beta"
  /dashboards:
    get:
      tags:
      - "Dashboard"
      summary: "Get All Dashboards"
      description: "### Get information about all active dashboards.\n\nReturns an\
        \ array of **abbreviated dashboard objects**. Dashboards marked as deleted\
        \ are excluded from this list.\n\nGet the **full details** of a specific dashboard\
        \ by id with [Dashboard](#!/Dashboard/dashboard)\n\nFind **deleted dashboards**\
        \ with [Search Dashboards](#!/Dashboard/search_dashboards)\n"
      operationId: "all_dashboards"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "dashboards"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DashboardBase"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Dashboard"
      x-looker-status: "beta"
    post:
      tags:
      - "Dashboard"
      summary: "Create Dashboard"
      description: "### Create a dashboard with the specified information\n\nCreates\
        \ a new dashboard object, returning the dashboard details, including the created\
        \ id.\n\n**Update** an existing dashboard with [Update Dashboard](#!/Dashboard/update_dashboard)\n\
        \n**Permanently delete** an existing dashboard with [Delete Dashboard](#!/Dashboard/delete_dashboard)\n"
      operationId: "create_dashboard"
      parameters:
      - in: "body"
        name: "body"
        description: "Dashboard"
        required: false
        schema:
          $ref: "#/definitions/Dashboard"
      responses:
        200:
          description: "Dashboard"
          schema:
            $ref: "#/definitions/Dashboard"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Dashboard"
      x-looker-status: "beta"
  /dashboards/search:
    get:
      tags:
      - "Dashboard"
      summary: "Search Dashboards"
      description: "### Search all dashboards for matching criteria.\n\nReturns an\
        \ **array of dashboard objects** that match the specified search criteria.\n\
        \nThe parameters `limit`, and `offset` are recommended for \"paging\" the\
        \ returned results.\n\nGet a **single dashboard** by id with [Dashboard](#!/Dashboard/dashboard)\n"
      operationId: "search_dashboards"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "id"
        in: "query"
        description: "Match dashboard id."
        required: false
        type: "integer"
        format: "int64"
      - name: "slug"
        in: "query"
        description: "Match dashboard slug."
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Requested page."
        required: false
        type: "integer"
        format: "int64"
      - name: "per_page"
        in: "query"
        description: "Results per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "limit"
        in: "query"
        description: "Number of results to return. (used with offset and takes priority\
          \ over page and per_page)"
        required: false
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Number of results to skip before returning any. (used with limit\
          \ and takes priority over page and per_page)"
        required: false
        type: "integer"
        format: "int64"
      - name: "sorts"
        in: "query"
        description: "Fields to sort by."
        required: false
        type: "string"
      - name: "title"
        in: "query"
        description: "Match Dashboard title."
        required: false
        type: "string"
      - name: "description"
        in: "query"
        description: "Match Dashboard description."
        required: false
        type: "string"
      - name: "content_favorite_id"
        in: "query"
        description: "Filter on a content favorite id."
        required: false
        type: "integer"
        format: "int64"
      - name: "space_id"
        in: "query"
        description: "Filter on a particular space."
        required: false
        type: "string"
      - name: "deleted"
        in: "query"
        description: "Filter on dashboards deleted status."
        required: false
        type: "string"
      - name: "user_id"
        in: "query"
        description: "Filter on dashboards created by a particular user."
        required: false
        type: "string"
      - name: "view_count"
        in: "query"
        description: "Filter on a particular value of view_count"
        required: false
        type: "string"
      responses:
        200:
          description: "dashboards"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Dashboard"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Dashboard"
      x-looker-status: "beta"
  /dashboards/{dashboard_id}:
    get:
      tags:
      - "Dashboard"
      summary: "Get Dashboard"
      description: "### Get information about the dashboard with the specified id\n\
        \nReturns the full details of the identified dashboard object\n\nGet a **summary\
        \ list** of all active dashboards with [All Dashboards](#!/Dashboard/all_dashboards)\n\
        \n**Search** for dashboards with [Search Dashboards](#!/Dashboard/search_dashboards)\n"
      operationId: "dashboard"
      parameters:
      - name: "dashboard_id"
        in: "path"
        description: "Id of dashboard"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Dashboard"
          schema:
            $ref: "#/definitions/Dashboard"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Dashboard"
      x-looker-status: "beta"
    delete:
      tags:
      - "Dashboard"
      summary: "Delete Dashboard"
      description: "### Delete the dashboard with the specified id\n\nPermanently\
        \ **deletes** a dashboard. (The dashboard cannot be recovered after this operation.)\n\
        \n\"Soft\" delete or hide a dashboard by setting its `deleted` status to `True`\
        \ with [Update Dashboard](#!/Dashboard/update_dashboard).\n\nNote: When a\
        \ dashboard is deleted in the UI, it is soft deleted. Use this API call to\
        \ permanently remove it, if desired.\n"
      operationId: "delete_dashboard"
      parameters:
      - name: "dashboard_id"
        in: "path"
        description: "Id of dashboard"
        required: true
        type: "string"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Resource Can't Be Modified"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Dashboard"
      x-looker-status: "beta"
    patch:
      tags:
      - "Dashboard"
      summary: "Update Dashboard"
      description: "### Update the dashboard with the specified id\n\nChanges simple\
        \ (scalar) properties of the dashboard.\n"
      operationId: "update_dashboard"
      parameters:
      - name: "dashboard_id"
        in: "path"
        description: "Id of dashboard"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Dashboard"
        required: true
        schema:
          $ref: "#/definitions/Dashboard"
      responses:
        200:
          description: "Dashboard"
          schema:
            $ref: "#/definitions/Dashboard"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Resource Can't Be Modified"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Dashboard"
      x-looker-status: "beta"
  /dashboards/{dashboard_id}/prefetch:
    get:
      tags:
      - "Dashboard"
      summary: "Get Dashboard Prefetch"
      description: "### Get a prefetch for a dashboard with the specified information.\n\
        \n**Deprecated**\nUse [DataGroups](#!/3.1/Datagroup) to manage cache invalidation\
        \ of groups of queries.\n"
      operationId: "dashboard_prefetch"
      parameters:
      - name: "dashboard_id"
        in: "path"
        description: "Id of dashboard"
        required: true
        type: "string"
      - name: "dashboard_filters"
        in: "query"
        description: "JSON encoded string of Dashboard filters that were applied to\
          \ prefetch"
        required: false
        type: "array"
        items:
          $ref: "#/definitions/PrefetchDashboardFilterValue"
        collectionFormat: "csv"
      responses:
        200:
          description: "Prefetch"
          schema:
            $ref: "#/definitions/Prefetch"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      deprecated: true
      x-swagger-router-controller: "Dashboard"
      x-looker-status: "deprecated"
    post:
      tags:
      - "Dashboard"
      summary: "Create Dashboard Prefetch"
      description: "### Create a prefetch for a dashboard with the specified information.\n\
        \n**Deprecated**\nUse [DataGroups](#!/3.1/Datagroup) to manage cache invalidation\
        \ of groups of queries.\n"
      operationId: "create_dashboard_prefetch"
      parameters:
      - name: "dashboard_id"
        in: "path"
        description: "Id of dashboard"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Parameters for prefetch request"
        required: false
        schema:
          $ref: "#/definitions/PrefetchDashboardRequest"
      responses:
        200:
          description: "Newly created Prefetch"
          schema:
            $ref: "#/definitions/PrefetchDashboardRequest"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      deprecated: true
      x-swagger-router-controller: "Dashboard"
      x-looker-status: "deprecated"
  /dashboards/{lookml_dashboard_id}/import/{space_id}:
    post:
      tags:
      - "Dashboard"
      summary: "Import LookML Dashboard"
      description: "### Import a LookML dashboard to a space as a UDD\nCreates a UDD\
        \ (a dashboard which exists in the Looker database rather than as a LookML\
        \ file) from the LookML dashboard\nand puts it in the space specified. The\
        \ created UDD will have a lookml_link_id which links to the original LookML\
        \ dashboard.\n\nTo give the imported dashboard specify a (e.g. title: \"my\
        \ title\") in the body of your request, otherwise the imported\ndashboard\
        \ will have the same title as the original LookML dashboard.\n\nFor this operation\
        \ to succeed the user must have permission to see the LookML dashboard in\
        \ question, and have permission to\ncreate content in the space the dashboard\
        \ is being imported to.\n\n**Sync** a linked UDD with [Sync LookML Dashboard]\
        \ (#!/Dashboard/sync_lookml_dashboard)\n**Unlink** a linked UDD by setting\
        \ lookml_link_id to null with [Update Dashboard](#!/Dashboard/update_dashboard)\n"
      operationId: "import_lookml_dashboard"
      parameters:
      - name: "lookml_dashboard_id"
        in: "path"
        description: "Id of LookML dashboard"
        required: true
        type: "string"
      - name: "space_id"
        in: "path"
        description: "Id of space to import the dashboard to"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Dashboard"
        required: false
        schema:
          $ref: "#/definitions/Dashboard"
      - name: "raw_locale"
        in: "query"
        description: "If true, and this dashboard is localized, export it with the\
          \ raw keys, not localized."
        required: false
        type: "boolean"
      responses:
        200:
          description: "Dashboard"
          schema:
            $ref: "#/definitions/Dashboard"
        201:
          description: "dashboard"
          schema:
            $ref: "#/definitions/Dashboard"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Dashboard"
      x-looker-status: "beta"
  /dashboards/{lookml_dashboard_id}/sync:
    patch:
      tags:
      - "Dashboard"
      summary: "Sync LookML Dashboard"
      description: "### Update all linked dashboards to match the specified LookML\
        \ dashboard.\n\nAny UDD (a dashboard which exists in the Looker database rather\
        \ than as a LookML file) which has a lookml_link_id\nwhich specifies the LookML\
        \ dashboard's id will be updated so that it matches the current state of the\
        \ LookML dashboard.\n\nFor this operation to succeed the user must have permission\
        \ to view the LookML dashboard, and only linked dashboards\nthat the user\
        \ has permission to update will be synced.\n\nTo **link** or **unlink** a\
        \ UDD set the lookml_link_id with [Update Dashboard](#!/Dashboard/update_dashboard)\n"
      operationId: "sync_lookml_dashboard"
      parameters:
      - name: "lookml_dashboard_id"
        in: "path"
        description: "Id of LookML dashboard"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Dashboard"
        required: true
        schema:
          $ref: "#/definitions/Dashboard"
      - name: "raw_locale"
        in: "query"
        description: "If true, and this dashboard is localized, export it with the\
          \ raw keys, not localized."
        required: false
        type: "boolean"
      responses:
        200:
          description: "updated dashboard ids"
          schema:
            type: "array"
            items:
              type: "integer"
              format: "int64"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Dashboard"
      x-looker-status: "beta"
  /data_actions:
    post:
      tags:
      - "DataAction"
      summary: "Send a Data Action"
      description: "Perform a data action. The data action object can be obtained\
        \ from query results, and used to perform an arbitrary action."
      operationId: "perform_data_action"
      parameters:
      - in: "body"
        name: "body"
        description: "Data Action Request"
        required: true
        schema:
          $ref: "#/definitions/DataActionRequest"
      responses:
        200:
          description: "Data Action Response"
          schema:
            $ref: "#/definitions/DataActionResponse"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "DataAction"
      x-looker-status: "beta"
  /data_actions/form:
    post:
      tags:
      - "DataAction"
      summary: "Fetch Remote Data Action Form"
      description: "For some data actions, the remote server may supply a form requesting\
        \ further user input. This endpoint takes a data action, asks the remote server\
        \ to generate a form for it, and returns that form to you for presentation\
        \ to the user."
      operationId: "fetch_remote_data_action_form"
      parameters:
      - in: "body"
        name: "body"
        description: "Data Action Request"
        required: true
        schema:
          type: "object"
          additionalProperties:
            type: "string"
      responses:
        200:
          description: "Data Action Form"
          schema:
            $ref: "#/definitions/DataActionForm"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "DataAction"
      x-looker-status: "beta"
  /datagroups:
    get:
      tags:
      - "Datagroup"
      summary: "Get All Datagroups"
      description: "### Get information about all datagroups.\n"
      operationId: "all_datagroups"
      parameters: []
      responses:
        200:
          description: "Datagroup"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Datagroup"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Datagroup"
      x-looker-status: "beta"
  /datagroups/{datagroup_id}:
    get:
      tags:
      - "Datagroup"
      summary: "Get Datagroup"
      description: "### Get information about a datagroup.\n"
      operationId: "datagroup"
      parameters:
      - name: "datagroup_id"
        in: "path"
        description: "ID of datagroup."
        required: true
        type: "string"
      responses:
        200:
          description: "Datagroup"
          schema:
            $ref: "#/definitions/Datagroup"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Datagroup"
      x-looker-status: "beta"
    patch:
      tags:
      - "Datagroup"
      summary: "Update Datagroup"
      description: "### Update a datagroup using the specified params.\n"
      operationId: "update_datagroup"
      parameters:
      - name: "datagroup_id"
        in: "path"
        description: "ID of datagroup."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Datagroup"
        required: true
        schema:
          $ref: "#/definitions/Datagroup"
      responses:
        200:
          description: "Datagroup"
          schema:
            $ref: "#/definitions/Datagroup"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Datagroup"
      x-looker-status: "beta"
  /dialect_info:
    get:
      tags:
      - "Connection"
      summary: "Get All Dialect Infos"
      description: "### Get information about all dialects.\n"
      operationId: "all_dialect_infos"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Dialect Info"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DialectInfo"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Connection"
      x-looker-status: "stable"
  /fetch_and_parse_saml_idp_metadata:
    post:
      tags:
      - "Auth"
      summary: "Parse SAML IdP Url"
      description: "### Fetch the given url and parse it as a SAML IdP metadata document\
        \ and return the result.\nNote that this requires that the url be public or\
        \ at least at a location where the Looker instance\ncan fetch it without requiring\
        \ any special authentication.\n"
      operationId: "fetch_and_parse_saml_idp_metadata"
      consumes:
      - "text/plain"
      parameters:
      - in: "body"
        name: "body"
        description: "SAML IdP metadata public url"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Parse result"
          schema:
            $ref: "#/definitions/SamlMetadataParseResult"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Auth"
      x-looker-status: "stable"
  /groups:
    get:
      tags:
      - "Group"
      summary: "Get All Groups"
      description: "### Get information about all groups.\n"
      operationId: "all_groups"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Requested page."
        required: false
        type: "integer"
        format: "int64"
      - name: "per_page"
        in: "query"
        description: "Results per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "sorts"
        in: "query"
        description: "Fields to sort by."
        required: false
        type: "string"
      - name: "ids"
        in: "query"
        description: "Optional of ids to get specific groups."
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "csv"
      - name: "content_metadata_id"
        in: "query"
        description: "Id of content metadata to which groups must have access."
        required: false
        type: "integer"
        format: "int64"
      - name: "can_add_to_content_metadata"
        in: "query"
        description: "Select only groups that either can/cannot be given access to\
          \ content."
        required: false
        type: "boolean"
      responses:
        200:
          description: "Group"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Group"
      x-looker-status: "stable"
    post:
      tags:
      - "Group"
      summary: "Create Group"
      description: "### Creates a new group (admin only).\n"
      operationId: "create_group"
      parameters:
      - in: "body"
        name: "body"
        description: "Group"
        required: false
        schema:
          $ref: "#/definitions/Group"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Group"
          schema:
            $ref: "#/definitions/Group"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Group"
      x-looker-status: "stable"
  /groups/{group_id}:
    get:
      tags:
      - "Group"
      summary: "Get Group"
      description: "### Get information about a group.\n"
      operationId: "group"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Id of group"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Group"
          schema:
            $ref: "#/definitions/Group"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Group"
      x-looker-status: "stable"
    delete:
      tags:
      - "Group"
      summary: "Delete Group"
      description: "### Deletes a group (admin only).\n"
      operationId: "delete_group"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Id of group"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Permission Denied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Group"
      x-looker-status: "stable"
    patch:
      tags:
      - "Group"
      summary: "Update Group"
      description: "### Updates the a group (admin only)."
      operationId: "update_group"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Id of group"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Group"
        required: true
        schema:
          $ref: "#/definitions/Group"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Group"
          schema:
            $ref: "#/definitions/Group"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Group"
      x-looker-status: "stable"
  /groups/{group_id}/attribute_values/{user_attribute_id}:
    delete:
      tags:
      - "Group"
      summary: "Delete User Attribute Group Value"
      description: "### Remove a user attribute value from a group.\n"
      operationId: "delete_user_attribute_group_value"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Id of group"
        required: true
        type: "integer"
        format: "int64"
      - name: "user_attribute_id"
        in: "path"
        description: "Id of user attribute"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Value successfully unset"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Group"
      x-looker-status: "stable"
    patch:
      tags:
      - "Group"
      summary: "Set User Attribute Group Value"
      description: "### Set the value of a user attribute for a group.\n\nFor information\
        \ about how user attribute values are calculated, see [Set User Attribute\
        \ Group Values](#!/UserAttribute/set_user_attribute_group_values).\n"
      operationId: "update_user_attribute_group_value"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Id of group"
        required: true
        type: "integer"
        format: "int64"
      - name: "user_attribute_id"
        in: "path"
        description: "Id of user attribute"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "New value for group."
        required: true
        schema:
          $ref: "#/definitions/UserAttributeGroupValue"
      responses:
        200:
          description: "Group value object."
          schema:
            $ref: "#/definitions/UserAttributeGroupValue"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Group"
      x-looker-status: "stable"
  /groups/{group_id}/groups:
    get:
      tags:
      - "Group"
      summary: "Get All Groups in Group"
      description: "### Get information about all the groups in a group\n"
      operationId: "all_group_groups"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Id of group"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "All groups in group."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Group"
      x-looker-status: "stable"
    post:
      tags:
      - "Group"
      summary: "Add a Group to Group"
      description: "### Adds a new group to a group.\n"
      operationId: "add_group_group"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Id of group"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Group id to add"
        required: false
        schema:
          $ref: "#/definitions/GroupIdForGroupInclusion"
      responses:
        200:
          description: "Added group."
          schema:
            $ref: "#/definitions/Group"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Permission Denied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Group"
      x-looker-status: "stable"
  /groups/{group_id}/groups/{deleting_group_id}:
    delete:
      tags:
      - "Group"
      summary: "Deletes a Group from Group"
      description: "### Removes a group from a group.\n"
      operationId: "delete_group_from_group"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Id of group"
        required: true
        type: "integer"
        format: "int64"
      - name: "deleting_group_id"
        in: "path"
        description: "Id of group to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Group successfully deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Permission Denied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Group"
      x-looker-status: "stable"
  /groups/{group_id}/users:
    get:
      tags:
      - "Group"
      summary: "Get All Users in Group"
      description: "### Get information about all the users directly included in a\
        \ group.\n"
      operationId: "all_group_users"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Id of group"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Requested page."
        required: false
        type: "integer"
        format: "int64"
      - name: "per_page"
        in: "query"
        description: "Results per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "sorts"
        in: "query"
        description: "Fields to sort by."
        required: false
        type: "string"
      responses:
        200:
          description: "All users in group."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Group"
      x-looker-status: "stable"
    post:
      tags:
      - "Group"
      summary: "Add a User to Group"
      description: "### Adds a new user to a group.\n"
      operationId: "add_group_user"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Id of group"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "User id to add"
        required: false
        schema:
          $ref: "#/definitions/GroupIdForGroupUserInclusion"
      responses:
        200:
          description: "Added user."
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Permission Denied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Group"
      x-looker-status: "stable"
  /groups/{group_id}/users/{user_id}:
    delete:
      tags:
      - "Group"
      summary: "Remove a User from Group"
      description: "### Removes a user from a group.\n"
      operationId: "delete_group_user"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Id of group"
        required: true
        type: "integer"
        format: "int64"
      - name: "user_id"
        in: "path"
        description: "Id of user to remove from group"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "User successfully removed from group"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Permission Denied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Group"
      x-looker-status: "stable"
  /homepage_items:
    get:
      tags:
      - "Homepage"
      summary: "Get All Homepage Items"
      description: "### Get information about all homepage items.\n"
      operationId: "all_homepage_items"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "sorts"
        in: "query"
        description: "Fields to sort by."
        required: false
        type: "string"
      - name: "homepage_section_id"
        in: "query"
        description: "Filter to a specific homepage section"
        required: false
        type: "string"
      responses:
        200:
          description: "Homepage Item"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/HomepageItem"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Homepage"
      x-looker-status: "beta"
    post:
      tags:
      - "Homepage"
      summary: "Create Homepage Item"
      description: "### Create a new homepage item.\n"
      operationId: "create_homepage_item"
      parameters:
      - in: "body"
        name: "body"
        description: "Homepage Item"
        required: false
        schema:
          $ref: "#/definitions/HomepageItem"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Homepage Item"
          schema:
            $ref: "#/definitions/HomepageItem"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Homepage"
      x-looker-status: "beta"
  /homepage_items/{homepage_item_id}:
    get:
      tags:
      - "Homepage"
      summary: "Get Homepage Item"
      description: "### Get information about a homepage item.\n"
      operationId: "homepage_item"
      parameters:
      - name: "homepage_item_id"
        in: "path"
        description: "Id of homepage item"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Homepage Item"
          schema:
            $ref: "#/definitions/HomepageItem"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Homepage"
      x-looker-status: "beta"
    delete:
      tags:
      - "Homepage"
      summary: "Delete Homepage Item"
      description: "### Delete a homepage item.\n"
      operationId: "delete_homepage_item"
      parameters:
      - name: "homepage_item_id"
        in: "path"
        description: "Id of homepage_item"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Homepage"
      x-looker-status: "beta"
    patch:
      tags:
      - "Homepage"
      summary: "Update Homepage Item"
      description: "### Update a homepage item definition.\n"
      operationId: "update_homepage_item"
      parameters:
      - name: "homepage_item_id"
        in: "path"
        description: "Id of homepage item"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Homepage Item"
        required: true
        schema:
          $ref: "#/definitions/HomepageItem"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Homepage Item"
          schema:
            $ref: "#/definitions/HomepageItem"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Homepage"
      x-looker-status: "beta"
  /homepage_sections:
    get:
      tags:
      - "Homepage"
      summary: "Get All Homepage sections"
      description: "### Get information about all homepage sections.\n"
      operationId: "all_homepage_sections"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "sorts"
        in: "query"
        description: "Fields to sort by."
        required: false
        type: "string"
      responses:
        200:
          description: "Homepage section"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/HomepageSection"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Homepage"
      x-looker-status: "beta"
    post:
      tags:
      - "Homepage"
      summary: "Create Homepage section"
      description: "### Create a new homepage section.\n"
      operationId: "create_homepage_section"
      parameters:
      - in: "body"
        name: "body"
        description: "Homepage section"
        required: false
        schema:
          $ref: "#/definitions/HomepageSection"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Homepage section"
          schema:
            $ref: "#/definitions/HomepageSection"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Homepage"
      x-looker-status: "beta"
  /homepage_sections/{homepage_section_id}:
    get:
      tags:
      - "Homepage"
      summary: "Get Homepage section"
      description: "### Get information about a homepage section.\n"
      operationId: "homepage_section"
      parameters:
      - name: "homepage_section_id"
        in: "path"
        description: "Id of homepage section"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Homepage section"
          schema:
            $ref: "#/definitions/HomepageSection"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Homepage"
      x-looker-status: "beta"
    delete:
      tags:
      - "Homepage"
      summary: "Delete Homepage section"
      description: "### Delete a homepage section.\n"
      operationId: "delete_homepage_section"
      parameters:
      - name: "homepage_section_id"
        in: "path"
        description: "Id of homepage_section"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Homepage"
      x-looker-status: "beta"
    patch:
      tags:
      - "Homepage"
      summary: "Update Homepage section"
      description: "### Update a homepage section definition.\n"
      operationId: "update_homepage_section"
      parameters:
      - name: "homepage_section_id"
        in: "path"
        description: "Id of homepage section"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Homepage section"
        required: true
        schema:
          $ref: "#/definitions/HomepageSection"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Homepage section"
          schema:
            $ref: "#/definitions/HomepageSection"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Homepage"
      x-looker-status: "beta"
  /integration_hubs:
    get:
      tags:
      - "Integration"
      summary: "Get All Integration Hubs"
      description: "### Get information about all Integration Hubs.\n"
      operationId: "all_integration_hubs"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Integration Hub"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IntegrationHub"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Integration"
      x-looker-status: "beta"
    post:
      tags:
      - "Integration"
      summary: "Create Integration Hub"
      description: "### Create a new Integration Hub.\n"
      operationId: "create_integration_hub"
      parameters:
      - in: "body"
        name: "body"
        description: "Integration Hub"
        required: false
        schema:
          $ref: "#/definitions/IntegrationHub"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Integration Hub"
          schema:
            $ref: "#/definitions/IntegrationHub"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Integration"
      x-looker-status: "beta"
  /integration_hubs/{integration_hub_id}:
    get:
      tags:
      - "Integration"
      summary: "Get Integration Hub"
      description: "### Get information about a Integration Hub.\n"
      operationId: "integration_hub"
      parameters:
      - name: "integration_hub_id"
        in: "path"
        description: "Id of Integration Hub"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Integration Hub"
          schema:
            $ref: "#/definitions/IntegrationHub"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Integration"
      x-looker-status: "beta"
    delete:
      tags:
      - "Integration"
      summary: "Delete Integration Hub"
      description: "### Delete a Integration Hub.\n"
      operationId: "delete_integration_hub"
      parameters:
      - name: "integration_hub_id"
        in: "path"
        description: "Id of integration_hub"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Integration"
      x-looker-status: "beta"
    patch:
      tags:
      - "Integration"
      summary: "Update Integration Hub"
      description: "### Update a Integration Hub definition.\n"
      operationId: "update_integration_hub"
      parameters:
      - name: "integration_hub_id"
        in: "path"
        description: "Id of Integration Hub"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Integration Hub"
        required: true
        schema:
          $ref: "#/definitions/IntegrationHub"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Integration Hub"
          schema:
            $ref: "#/definitions/IntegrationHub"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Integration"
      x-looker-status: "beta"
  /integration_hubs/{integration_hub_id}/accept_legal_agreement:
    post:
      tags:
      - "Integration"
      summary: "Accept Integration Hub Legal Agreement"
      description: "Accepts the legal agreement for a given integration hub. This\
        \ only works for integration hubs that have legal_agreement_required set to\
        \ true and legal_agreement_signed set to false."
      operationId: "accept_integration_hub_legal_agreement"
      parameters:
      - name: "integration_hub_id"
        in: "path"
        description: "Id of integration_hub"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Integration hub"
          schema:
            $ref: "#/definitions/IntegrationHub"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Integration"
      x-looker-status: "beta"
  /integrations:
    get:
      tags:
      - "Integration"
      summary: "Get All Integrations"
      description: "### Get information about all Integrations.\n"
      operationId: "all_integrations"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "integration_hub_id"
        in: "query"
        description: "Filter to a specific provider"
        required: false
        type: "string"
      responses:
        200:
          description: "Integration"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Integration"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Integration"
      x-looker-status: "beta"
  /integrations/{integration_id}:
    get:
      tags:
      - "Integration"
      summary: "Get Integration"
      description: "### Get information about a Integration.\n"
      operationId: "integration"
      parameters:
      - name: "integration_id"
        in: "path"
        description: "Id of Integration"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Integration"
          schema:
            $ref: "#/definitions/Integration"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Integration"
      x-looker-status: "beta"
    patch:
      tags:
      - "Integration"
      summary: "Update Integration"
      description: "### Update parameters on a Integration.\n"
      operationId: "update_integration"
      parameters:
      - name: "integration_id"
        in: "path"
        description: "Id of Integration"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Integration"
        required: true
        schema:
          $ref: "#/definitions/Integration"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Integration"
          schema:
            $ref: "#/definitions/Integration"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Integration"
      x-looker-status: "beta"
  /integrations/{integration_id}/form:
    post:
      tags:
      - "Integration"
      summary: "Fetch Remote Integration Form"
      description: "Returns the Integration form for presentation to the user."
      operationId: "fetch_integration_form"
      parameters:
      - name: "integration_id"
        in: "path"
        description: "Id of Integration"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Data Action Form"
          schema:
            $ref: "#/definitions/DataActionForm"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Integration"
      x-looker-status: "beta"
  /integrations/{integration_id}/test:
    post:
      tags:
      - "Integration"
      summary: "Test integration"
      description: "Tests the integration to make sure all the settings are working."
      operationId: "test_integration"
      parameters:
      - name: "integration_id"
        in: "path"
        description: "Id of Integration"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Test Result"
          schema:
            $ref: "#/definitions/IntegrationTestResult"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Integration"
      x-looker-status: "beta"
  /ldap_config:
    get:
      tags:
      - "Auth"
      summary: "Get LDAP Configuration"
      description: "### Get the LDAP configuration.\n\nLooker can be optionally configured\
        \ to authenticate users against an Active Directory or other LDAP directory\
        \ server.\nLDAP setup requires coordination with an administrator of that\
        \ directory server.\n\nOnly Looker administrators can read and update the\
        \ LDAP configuration.\n\nConfiguring LDAP impacts authentication for all users.\
        \ This configuration should be done carefully.\n\nLooker maintains a single\
        \ LDAP configuration. It can be read and updated.       Updates only succeed\
        \ if the new state will be valid (in the sense that all required fields are\
        \ populated);       it is up to you to ensure that the configuration is appropriate\
        \ and correct).\n\nLDAP is enabled or disabled for Looker using the **enabled**\
        \ field.\n\nLooker will never return an **auth_password** field. That value\
        \ can be set, but never retrieved.\n\nSee the [Looker LDAP docs](https://www.looker.com/docs/r/api/ldap_setup)\
        \ for additional information.\n"
      operationId: "ldap_config"
      parameters: []
      responses:
        200:
          description: "LDAP Configuration."
          schema:
            $ref: "#/definitions/LDAPConfig"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Auth"
      x-looker-status: "stable"
    patch:
      tags:
      - "Auth"
      summary: "Update LDAP Configuration"
      description: "### Update the LDAP configuration.\n\nConfiguring LDAP impacts\
        \ authentication for all users. This configuration should be done carefully.\n\
        \nOnly Looker administrators can read and update the LDAP configuration.\n\
        \nLDAP is enabled or disabled for Looker using the **enabled** field.\n\n\
        It is **highly** recommended that any LDAP setting changes be tested using\
        \ the APIs below before being set globally.\n\nSee the [Looker LDAP docs](https://www.looker.com/docs/r/api/ldap_setup)\
        \ for additional information.\n"
      operationId: "update_ldap_config"
      parameters:
      - in: "body"
        name: "body"
        description: "LDAP Config"
        required: true
        schema:
          $ref: "#/definitions/LDAPConfig"
      responses:
        200:
          description: "New state for LDAP Configuration."
          schema:
            $ref: "#/definitions/LDAPConfig"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Auth"
      x-looker-status: "stable"
  /ldap_config/test_auth:
    put:
      tags:
      - "Auth"
      summary: "Test LDAP Auth"
      description: "### Test the connection authentication settings for an LDAP configuration.\n\
        \nThis tests that the connection is possible and that a 'server' account to\
        \ be used by Looker can       authenticate to the LDAP server given connection\
        \ and authentication information.\n\n**connection_host**, **connection_port**,\
        \ and **auth_username**, are required.       **connection_tls** and **auth_password**\
        \ are optional.\n\nExample:\n```json\n{\n  \"connection_host\": \"ldap.example.com\"\
        ,\n  \"connection_port\": \"636\",\n  \"connection_tls\": true,\n  \"auth_username\"\
        : \"cn=looker,dc=example,dc=com\",\n  \"auth_password\": \"secret\"\n}\n```\n\
        \nLooker will never return an **auth_password**. If this request omits the\
        \ **auth_password** field, then       the **auth_password** value from the\
        \ active config (if present) will be used for the test.\n\nThe active LDAP\
        \ settings are not modified.\n\n"
      operationId: "test_ldap_config_auth"
      parameters:
      - in: "body"
        name: "body"
        description: "LDAP Config"
        required: true
        schema:
          $ref: "#/definitions/LDAPConfig"
      responses:
        200:
          description: "Result info."
          schema:
            $ref: "#/definitions/LDAPConfigTestResult"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Auth"
      x-looker-status: "stable"
  /ldap_config/test_connection:
    put:
      tags:
      - "Auth"
      summary: "Test LDAP Connection"
      description: "### Test the connection settings for an LDAP configuration.\n\n\
        This tests that the connection is possible given a connection_host and connection_port.\n\
        \n**connection_host** and **connection_port** are required. **connection_tls**\
        \ is optional.\n\nExample:\n```json\n{\n  \"connection_host\": \"ldap.example.com\"\
        ,\n  \"connection_port\": \"636\",\n  \"connection_tls\": true\n}\n```\n\n\
        No authentication to the LDAP server is attempted.\n\nThe active LDAP settings\
        \ are not modified.\n"
      operationId: "test_ldap_config_connection"
      parameters:
      - in: "body"
        name: "body"
        description: "LDAP Config"
        required: true
        schema:
          $ref: "#/definitions/LDAPConfig"
      responses:
        200:
          description: "Result info."
          schema:
            $ref: "#/definitions/LDAPConfigTestResult"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Auth"
      x-looker-status: "stable"
  /ldap_config/test_user_auth:
    put:
      tags:
      - "Auth"
      summary: "Test LDAP User Auth"
      description: "### Test the user authentication settings for an LDAP configuration.\n\
        \nThis test accepts a full LDAP configuration along with a username/password\
        \ pair and attempts to       authenticate the user with the LDAP server. The\
        \ configuration is validated before attempting the       authentication.\n\
        \nLooker will never return an **auth_password**. If this request omits the\
        \ **auth_password** field, then       the **auth_password** value from the\
        \ active config (if present) will be used for the test.\n\n**test_ldap_user**\
        \ and **test_ldap_password** are required.\n\nThe active LDAP settings are\
        \ not modified.\n\n"
      operationId: "test_ldap_config_user_auth"
      parameters:
      - in: "body"
        name: "body"
        description: "LDAP Config"
        required: true
        schema:
          $ref: "#/definitions/LDAPConfig"
      responses:
        200:
          description: "Result info."
          schema:
            $ref: "#/definitions/LDAPConfigTestResult"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Auth"
      x-looker-status: "stable"
  /ldap_config/test_user_info:
    put:
      tags:
      - "Auth"
      summary: "Test LDAP User Info"
      description: "### Test the user authentication settings for an LDAP configuration\
        \ without authenticating the user.\n\nThis test will let you easily test the\
        \ mapping for user properties and roles for any user without      needing\
        \ to authenticate as that user.\n\nThis test accepts a full LDAP configuration\
        \ along with a username and attempts to find the full info      for the user\
        \ from the LDAP server without actually authenticating the user. So, user\
        \ password is not      required.The configuration is validated before attempting\
        \ to contact the server.\n\n**test_ldap_user** is required.\n\nThe active\
        \ LDAP settings are not modified.\n\n"
      operationId: "test_ldap_config_user_info"
      parameters:
      - in: "body"
        name: "body"
        description: "LDAP Config"
        required: true
        schema:
          $ref: "#/definitions/LDAPConfig"
      responses:
        200:
          description: "Result info."
          schema:
            $ref: "#/definitions/LDAPConfigTestResult"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Auth"
      x-looker-status: "stable"
  /legacy_features:
    get:
      tags:
      - "Config"
      summary: "Get All Legacy Features"
      description: "### Get all legacy features.\n"
      operationId: "all_legacy_features"
      parameters: []
      responses:
        200:
          description: "Legacy Feature"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LegacyFeature"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Config"
      x-looker-status: "stable"
  /legacy_features/{legacy_feature_id}:
    get:
      tags:
      - "Config"
      summary: "Get Legacy Feature"
      description: "### Get information about the legacy feature with a specific id.\n"
      operationId: "legacy_feature"
      parameters:
      - name: "legacy_feature_id"
        in: "path"
        description: "id of legacy feature"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Legacy Feature"
          schema:
            $ref: "#/definitions/LegacyFeature"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Config"
      x-looker-status: "stable"
    patch:
      tags:
      - "Config"
      summary: "Update Legacy Feature"
      description: "### Update information about the legacy feature with a specific\
        \ id.\n"
      operationId: "update_legacy_feature"
      parameters:
      - name: "legacy_feature_id"
        in: "path"
        description: "id of legacy feature"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Legacy Feature"
        required: true
        schema:
          $ref: "#/definitions/LegacyFeature"
      responses:
        200:
          description: "Legacy Feature"
          schema:
            $ref: "#/definitions/LegacyFeature"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Config"
      x-looker-status: "stable"
  /login:
    post:
      tags:
      - "ApiAuth"
      summary: "Login"
      description: "### Present client credentials to obtain an authorization token\n\
        \nLooker API implements the OAuth2 [Resource Owner Password Credentials Grant](https://looker.com/docs/r/api/outh2_resource_owner_pc)\
        \ pattern.\nThe client credentials required for this login must be obtained\
        \ by creating an API3 key on a user account\nin the Looker Admin console.\
        \ The API3 key consists of a public `client_id` and a private `client_secret`.\n\
        \nThe access token returned by `login` must be used in the HTTP Authorization\
        \ header of subsequent\nAPI requests, like this:\n```\nAuthorization: token\
        \ 4QDkCyCtZzYgj4C2p2cj3csJH7zqS5RzKs2kTnG4\n```\nReplace \"4QDkCy...\" with\
        \ the `access_token` value returned by `login`.\nThe word 'token' is a string\
        \ literal and must be included exactly as shown.\n\nFor more information and\
        \ detailed examples of Looker API authorization, see [How to Authenticate\
        \ to Looker API3](https://github.com/looker/looker-sdk-ruby/blob/master/authentication.md).\n"
      operationId: "login"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "client_id"
        in: "query"
        description: "client_id part of API3 Key."
        required: false
        type: "string"
      - name: "client_secret"
        in: "query"
        description: "client_secret part of API3 Key."
        required: false
        type: "string"
      responses:
        200:
          description: "Access token with metadata."
          schema:
            $ref: "#/definitions/AccessToken"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ApiAuth"
      x-looker-status: "stable"
  /login/{user_id}:
    post:
      tags:
      - "ApiAuth"
      summary: "Login user"
      description: "### Create an access token for a given user.\n\nThis can only\
        \ be called by an authenticated admin user. It allows that admin to generate\
        \ a new\nauthentication token for the user with the given user id. That token\
        \ can then be used for subsequent\nAPI calls - which are then performed *as*\
        \ that target user.\n\nThe target user does *not* need to have a pre-existing\
        \ API client_id/client_secret pair. And, no such\ncredentials are created\
        \ by this call.\n\nThis allows for building systems where api user authentication\
        \ for an arbitrary number of users is done\noutside of Looker and funneled\
        \ through a single 'service account' with admin permissions. Note that a\n\
        new access token is generated on each call. If target users are going to be\
        \ making numerous API\ncalls in a short period then it is wise to cache this\
        \ authentication token rather than call this before\neach of those API calls.\n\
        \nSee 'login' for more detail on the access token and how to use it.\n"
      operationId: "login_user"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Id of user."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Access token with metadata."
          schema:
            $ref: "#/definitions/AccessToken"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ApiAuth"
      x-looker-status: "stable"
  /logout:
    delete:
      tags:
      - "ApiAuth"
      summary: "Logout"
      description: "### Logout of the API and invalidate the current access token.\n"
      operationId: "logout"
      parameters: []
      responses:
        204:
          description: "Logged out successfully."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ApiAuth"
      x-looker-status: "stable"
  /lookml_models:
    get:
      tags:
      - "LookmlModel"
      summary: "Get All LookML Models"
      description: "### Get information about all lookml models.\n"
      operationId: "all_lookml_models"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "LookML Model"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LookmlModel"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "LookmlModel"
      x-looker-status: "stable"
    post:
      tags:
      - "LookmlModel"
      summary: "Create LookML Model"
      description: "### Create a lookml model using the specified configuration.\n"
      operationId: "create_lookml_model"
      parameters:
      - in: "body"
        name: "body"
        description: "LookML Model"
        required: false
        schema:
          $ref: "#/definitions/LookmlModel"
      responses:
        200:
          description: "LookML Model"
          schema:
            $ref: "#/definitions/LookmlModel"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "LookmlModel"
      x-looker-status: "stable"
  /lookml_models/{lookml_model_name}:
    get:
      tags:
      - "LookmlModel"
      summary: "Get LookML Model"
      description: "### Get information about a lookml model.\n"
      operationId: "lookml_model"
      parameters:
      - name: "lookml_model_name"
        in: "path"
        description: "Name of lookml model."
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "LookML Model"
          schema:
            $ref: "#/definitions/LookmlModel"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "LookmlModel"
      x-looker-status: "stable"
    delete:
      tags:
      - "LookmlModel"
      summary: "Delete LookML Model"
      description: "### Delete a lookml model.\n"
      operationId: "delete_lookml_model"
      parameters:
      - name: "lookml_model_name"
        in: "path"
        description: "Name of lookml model."
        required: true
        type: "string"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "LookmlModel"
      x-looker-status: "stable"
    patch:
      tags:
      - "LookmlModel"
      summary: "Update LookML Model"
      description: "### Update a lookml model using the specified configuration.\n"
      operationId: "update_lookml_model"
      parameters:
      - name: "lookml_model_name"
        in: "path"
        description: "Name of lookml model."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "LookML Model"
        required: true
        schema:
          $ref: "#/definitions/LookmlModel"
      responses:
        200:
          description: "LookML Model"
          schema:
            $ref: "#/definitions/LookmlModel"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "LookmlModel"
      x-looker-status: "stable"
  /lookml_models/{lookml_model_name}/explores/{explore_name}:
    get:
      tags:
      - "LookmlModel"
      summary: "Get LookML Model Explore"
      description: "### Get information about a lookml model explore.\n"
      operationId: "lookml_model_explore"
      parameters:
      - name: "lookml_model_name"
        in: "path"
        description: "Name of lookml model."
        required: true
        type: "string"
      - name: "explore_name"
        in: "path"
        description: "Name of explore."
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "LookML Model Explore"
          schema:
            $ref: "#/definitions/LookmlModelExplore"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "LookmlModel"
      x-looker-status: "stable"
  /looks:
    get:
      tags:
      - "Look"
      summary: "Get All Looks"
      description: "### Get all the looks."
      operationId: "all_looks"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Look"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Look"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Look"
      x-looker-status: "beta"
    post:
      tags:
      - "Look"
      summary: "Create Look"
      description: "### Create a Look with specified information."
      operationId: "create_look"
      parameters:
      - in: "body"
        name: "body"
        description: "Look"
        required: false
        schema:
          $ref: "#/definitions/LookWithQuery"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Look"
          schema:
            $ref: "#/definitions/LookWithQuery"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Look"
      x-looker-status: "beta"
  /looks/search:
    get:
      tags:
      - "Look"
      summary: "Search Looks"
      description: "Search looks."
      operationId: "search_looks"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Requested page."
        required: false
        type: "integer"
        format: "int64"
      - name: "per_page"
        in: "query"
        description: "Results per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "limit"
        in: "query"
        description: "Number of results to return. (used with offset and takes priority\
          \ over page and per_page)"
        required: false
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Number of results to skip before returning any. (used with limit\
          \ and takes priority over page and per_page)"
        required: false
        type: "integer"
        format: "int64"
      - name: "sorts"
        in: "query"
        description: "Fields to sort by."
        required: false
        type: "string"
      - name: "title"
        in: "query"
        description: "Match Look title."
        required: false
        type: "string"
      - name: "description"
        in: "query"
        description: "Match Look description."
        required: false
        type: "string"
      - name: "content_favorite_id"
        in: "query"
        description: "Match content favorite id"
        required: false
        type: "integer"
        format: "int64"
      - name: "space_id"
        in: "query"
        description: "Filter on a particular space."
        required: false
        type: "string"
      - name: "user_id"
        in: "query"
        description: "Filter on dashboards created by a particular user."
        required: false
        type: "string"
      - name: "view_count"
        in: "query"
        description: "Filter on a particular value of view_count"
        required: false
        type: "string"
      responses:
        200:
          description: "looks"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Look"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Look"
      x-looker-status: "beta"
  /looks/{look_id}:
    get:
      tags:
      - "Look"
      summary: "Get Look"
      description: "### Get a Look.\n\nReturns detailed information about a Look and\
        \ its associated Query.\n\n"
      operationId: "look"
      parameters:
      - name: "look_id"
        in: "path"
        description: "Id of look"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Look"
          schema:
            $ref: "#/definitions/LookWithQuery"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Look"
      x-looker-status: "beta"
    delete:
      tags:
      - "Look"
      summary: "Delete Look"
      description: "### Delete the look with a specific id."
      operationId: "delete_look"
      parameters:
      - name: "look_id"
        in: "path"
        description: "Id of look"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Look"
      x-looker-status: "beta"
    patch:
      tags:
      - "Look"
      summary: "Update Look"
      description: "### Update the Look with a specific id."
      operationId: "update_look"
      parameters:
      - name: "look_id"
        in: "path"
        description: "Id of look"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Look"
        required: true
        schema:
          $ref: "#/definitions/LookWithQuery"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Look"
          schema:
            $ref: "#/definitions/LookWithQuery"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Look"
      x-looker-status: "beta"
  /looks/{look_id}/run/{result_format}:
    get:
      tags:
      - "Look"
      summary: "Run Look"
      description: "### Run a Look.\n\nRuns a given look's query and returns the results\
        \ in the requested format.\n\nSupported formats:\n\n| result_format | Description\n\
        | :-----------: | :--- |\n| json | Plain json\n| json_detail | Row data plus\
        \ metadata describing the fields, pivots, table calcs, and other aspects of\
        \ the query\n| csv | Comma separated values with a header\n| txt | Tab separated\
        \ values with a header\n| html | Simple html\n| md | Simple markdown\n| xlsx\
        \ | MS Excel spreadsheet\n| sql | Returns the generated SQL rather than running\
        \ the query\n| png | A PNG image of the visualization of the query\n| jpg\
        \ | A JPG image of the visualization of the query\n\n\n"
      operationId: "run_look"
      produces:
      - "text"
      - "application/json"
      - "image/png"
      - "image/jpg"
      parameters:
      - name: "look_id"
        in: "path"
        description: "Id of look"
        required: true
        type: "integer"
        format: "int64"
      - name: "result_format"
        in: "path"
        description: "Format of result"
        required: true
        type: "string"
      - name: "limit"
        in: "query"
        description: "Row limit (may override the limit in the saved query)."
        required: false
        type: "integer"
        format: "int64"
      - name: "apply_formatting"
        in: "query"
        description: "Apply model-specified formatting to each result."
        required: false
        type: "boolean"
      - name: "apply_vis"
        in: "query"
        description: "Apply visualization options to results."
        required: false
        type: "boolean"
      - name: "cache"
        in: "query"
        description: "Get results from cache if available."
        required: false
        type: "boolean"
      - name: "image_width"
        in: "query"
        description: "Render width for image formats."
        required: false
        type: "integer"
        format: "int64"
      - name: "image_height"
        in: "query"
        description: "Render height for image formats."
        required: false
        type: "integer"
        format: "int64"
      - name: "generate_drill_links"
        in: "query"
        description: "Generate drill links (only applicable to 'json_detail' format."
        required: false
        type: "boolean"
      - name: "force_production"
        in: "query"
        description: "Force use of production models even if the user is in development\
          \ mode."
        required: false
        type: "boolean"
      - name: "cache_only"
        in: "query"
        description: "Retrieve any results from cache even if the results have expired."
        required: false
        type: "boolean"
      - name: "path_prefix"
        in: "query"
        description: "Prefix to use for drill links (url encoded)."
        required: false
        type: "string"
      - name: "rebuild_pdts"
        in: "query"
        description: "Rebuild PDTS used in query."
        required: false
        type: "boolean"
      - name: "server_table_calcs"
        in: "query"
        description: "Perform table calculations on query results"
        required: false
        type: "boolean"
      responses:
        200:
          description: "Look"
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Look"
      x-looker-status: "stable"
  /model_sets:
    get:
      tags:
      - "Role"
      summary: "Get All Model Sets"
      description: "### Get information about all model sets.\n"
      operationId: "all_model_sets"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "All model sets."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ModelSet"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
    post:
      tags:
      - "Role"
      summary: "Create Model Set"
      description: "### Create a model set with the specified information. Model sets\
        \ are used by Roles.\n"
      operationId: "create_model_set"
      parameters:
      - in: "body"
        name: "body"
        description: "ModelSet"
        required: false
        schema:
          $ref: "#/definitions/ModelSet"
      responses:
        200:
          description: "Newly created ModelSet"
          schema:
            $ref: "#/definitions/ModelSet"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
  /model_sets/{model_set_id}:
    get:
      tags:
      - "Role"
      summary: "Get Model Set"
      description: "### Get information about the model set with a specific id.\n"
      operationId: "model_set"
      parameters:
      - name: "model_set_id"
        in: "path"
        description: "Id of model set"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Specified model set."
          schema:
            $ref: "#/definitions/ModelSet"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
    delete:
      tags:
      - "Role"
      summary: "Delete Model Set"
      description: "### Delete the model set with a specific id.\n"
      operationId: "delete_model_set"
      parameters:
      - name: "model_set_id"
        in: "path"
        description: "id of model set"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Model set succssfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Resource Can't Be Modified"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
    patch:
      tags:
      - "Role"
      summary: "Update Model Set"
      description: "### Update information about the model set with a specific id.\n"
      operationId: "update_model_set"
      parameters:
      - name: "model_set_id"
        in: "path"
        description: "id of model set"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "ModelSet"
        required: true
        schema:
          $ref: "#/definitions/ModelSet"
      responses:
        200:
          description: "New state for specified model set."
          schema:
            $ref: "#/definitions/ModelSet"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Resource Can't Be Modified"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
  /oidc_config:
    get:
      tags:
      - "Auth"
      summary: "Get OIDC Configuration"
      description: "### Get the OIDC configuration.\n\nLooker can be optionally configured\
        \ to authenticate users against an OpenID Connect (OIDC)\nauthentication server.\
        \ OIDC setup requires coordination with an administrator of that server.\n\
        \nOnly Looker administrators can read and update the OIDC configuration.\n\
        \nConfiguring OIDC impacts authentication for all users. This configuration\
        \ should be done carefully.\n\nLooker maintains a single OIDC configuation.\
        \ It can be read and updated.       Updates only succeed if the new state\
        \ will be valid (in the sense that all required fields are populated);   \
        \    it is up to you to ensure that the configuration is appropriate and correct).\n\
        \nOIDC is enabled or disabled for Looker using the **enabled** field.\n"
      operationId: "oidc_config"
      parameters: []
      responses:
        200:
          description: "OIDC Configuration."
          schema:
            $ref: "#/definitions/OIDCConfig"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Auth"
      x-looker-status: "beta"
    patch:
      tags:
      - "Auth"
      summary: "Update OIDC Configuration"
      description: "### Update the OIDC configuration.\n\nConfiguring OIDC impacts\
        \ authentication for all users. This configuration should be done carefully.\n\
        \nOnly Looker administrators can read and update the OIDC configuration.\n\
        \nOIDC is enabled or disabled for Looker using the **enabled** field.\n\n\
        It is **highly** recommended that any OIDC setting changes be tested using\
        \ the APIs below before being set globally.\n"
      operationId: "update_oidc_config"
      parameters:
      - in: "body"
        name: "body"
        description: "OIDC Config"
        required: true
        schema:
          $ref: "#/definitions/OIDCConfig"
      responses:
        200:
          description: "New state for OIDC Configuration."
          schema:
            $ref: "#/definitions/OIDCConfig"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Auth"
      x-looker-status: "beta"
  /oidc_test_configs:
    post:
      tags:
      - "Auth"
      summary: "Create OIDC Test Configuration"
      description: "### Create a OIDC test configuration.\n"
      operationId: "create_oidc_test_config"
      parameters:
      - in: "body"
        name: "body"
        description: "OIDC test config"
        required: true
        schema:
          $ref: "#/definitions/OIDCConfig"
      responses:
        200:
          description: "OIDC test config"
          schema:
            $ref: "#/definitions/OIDCConfig"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Auth"
      x-looker-status: "beta"
  /oidc_test_configs/{test_slug}:
    get:
      tags:
      - "Auth"
      summary: "Get OIDC Test Configuration"
      description: "### Get a OIDC test configuration by test_slug.\n"
      operationId: "oidc_test_config"
      parameters:
      - name: "test_slug"
        in: "path"
        description: "Slug of test config"
        required: true
        type: "string"
      responses:
        200:
          description: "OIDC test config."
          schema:
            $ref: "#/definitions/OIDCConfig"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Auth"
      x-looker-status: "beta"
    delete:
      tags:
      - "Auth"
      summary: "Delete OIDC Test Configuration"
      description: "### Delete a OIDC test configuration.\n"
      operationId: "delete_oidc_test_config"
      parameters:
      - name: "test_slug"
        in: "path"
        description: "Slug of test config"
        required: true
        type: "string"
      responses:
        204:
          description: "Test config succssfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Auth"
      x-looker-status: "beta"
  /parse_saml_idp_metadata:
    post:
      tags:
      - "Auth"
      summary: "Parse SAML IdP XML"
      description: "### Parse the given xml as a SAML IdP metadata document and return\
        \ the result.\n"
      operationId: "parse_saml_idp_metadata"
      consumes:
      - "text/plain"
      parameters:
      - in: "body"
        name: "body"
        description: "SAML IdP metadata xml"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Parse result"
          schema:
            $ref: "#/definitions/SamlMetadataParseResult"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Auth"
      x-looker-status: "stable"
  /permission_sets:
    get:
      tags:
      - "Role"
      summary: "Get All Permission Sets"
      description: "### Get information about all permission sets.\n"
      operationId: "all_permission_sets"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Permission Set"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PermissionSet"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
    post:
      tags:
      - "Role"
      summary: "Create Permission Set"
      description: "### Create a permission set with the specified information. Permission\
        \ sets are used by Roles.\n"
      operationId: "create_permission_set"
      parameters:
      - in: "body"
        name: "body"
        description: "Permission Set"
        required: false
        schema:
          $ref: "#/definitions/PermissionSet"
      responses:
        200:
          description: "Permission Set"
          schema:
            $ref: "#/definitions/PermissionSet"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
  /permission_sets/{permission_set_id}:
    get:
      tags:
      - "Role"
      summary: "Get Permission Set"
      description: "### Get information about the permission set with a specific id.\n"
      operationId: "permission_set"
      parameters:
      - name: "permission_set_id"
        in: "path"
        description: "Id of permission set"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Permission Set"
          schema:
            $ref: "#/definitions/PermissionSet"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
    delete:
      tags:
      - "Role"
      summary: "Delete Permission Set"
      description: "### Delete the permission set with a specific id.\n"
      operationId: "delete_permission_set"
      parameters:
      - name: "permission_set_id"
        in: "path"
        description: "Id of permission set"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Resource Can't Be Modified"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
    patch:
      tags:
      - "Role"
      summary: "Update Permission Set"
      description: "### Update information about the permission set with a specific\
        \ id.\n"
      operationId: "update_permission_set"
      parameters:
      - name: "permission_set_id"
        in: "path"
        description: "id of permission set"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Permission Set"
        required: true
        schema:
          $ref: "#/definitions/PermissionSet"
      responses:
        200:
          description: "Permission Set"
          schema:
            $ref: "#/definitions/PermissionSet"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Resource Can't Be Modified"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
  /permissions:
    get:
      tags:
      - "Role"
      summary: "Get All Permissions"
      description: "### Get all supported permissions.\n"
      operationId: "all_permissions"
      parameters: []
      responses:
        200:
          description: "Permission"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Permission"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
  /projects:
    get:
      tags:
      - "Project"
      summary: "Get All Projects"
      description: "### Get All Projects\n\nReturns all projects visible to the current\
        \ user\n"
      operationId: "all_projects"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields"
        required: false
        type: "string"
      responses:
        200:
          description: "Project"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
    post:
      tags:
      - "Project"
      summary: "Create Project"
      description: "### Create A Project\n\ndev mode required.\n- Call `update_session`\
        \ to select the 'dev' workspace.\n\n`name` is required.\n`git_remote_url`\
        \ is not allowed. To configure Git for the newly created project, follow the\
        \ instructions in `update_project`.\n\n"
      operationId: "create_project"
      parameters:
      - in: "body"
        name: "body"
        description: "Project"
        required: false
        schema:
          $ref: "#/definitions/Project"
      responses:
        200:
          description: "Project"
          schema:
            $ref: "#/definitions/Project"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /projects/{project_id}:
    get:
      tags:
      - "Project"
      summary: "Get Project"
      description: "### Get A Project\n\nReturns the project with the given project\
        \ id\n"
      operationId: "project"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields"
        required: false
        type: "string"
      responses:
        200:
          description: "Project"
          schema:
            $ref: "#/definitions/Project"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
    patch:
      tags:
      - "Project"
      summary: "Update Project"
      description: "### Update Project Configuration\n\nApply changes to a project's\
        \ configuration.\n\n\n#### Configuring Git for a Project\n\nTo set up a Looker\
        \ project with a remote git repository, follow these steps:\n\n1. Call `update_session`\
        \ to select the 'dev' workspace.\n1. Call `create_git_deploy_key` to create\
        \ a new deploy key for the project\n1. Copy the deploy key text into the remote\
        \ git repository's ssh key configuration\n1. Call `update_project` to set\
        \ project's `git_remote_url` ()and `git_service_name`, if necessary).\n\n\
        When you modify a project's `git_remote_url`, Looker connects to the remote\
        \ repository to fetch\nmetadata. The remote git repository MUST be configured\
        \ with the Looker-generated deploy\nkey for this project prior to setting\
        \ the project's `git_remote_url`.\n\nTo set up a Looker project with a git\
        \ repository residing on the Looker server (a 'bare' git repo):\n1. Call `update_session`\
        \ to select the 'dev' workspace.\n1. Call `update_project` setting `git_remote_url`\
        \ to nil and `git_service_name` to \"bare\".\n\n"
      operationId: "update_project"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Project"
        required: true
        schema:
          $ref: "#/definitions/Project"
      - name: "fields"
        in: "query"
        description: "Requested fields"
        required: false
        type: "string"
      responses:
        200:
          description: "Project"
          schema:
            $ref: "#/definitions/Project"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /projects/{project_id}/current_workspace:
    get:
      tags:
      - "Project"
      summary: "Get Project Workspace"
      description: "### Get Project Workspace\n\nReturns information about the state\
        \ of the project files in the currently selected workspace\n"
      operationId: "project_workspace"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields"
        required: false
        type: "string"
      responses:
        200:
          description: "Project Workspace"
          schema:
            $ref: "#/definitions/ProjectWorkspace"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /projects/{project_id}/deploy_to_production:
    post:
      tags:
      - "Project"
      summary: "Deploy To Production"
      description: "### Deploy LookML from this Development Mode Project to Production\n\
        \nGit must have been configured, must be in dev mode and deploy permission\
        \ required\n\nDeploy is a two / three step process\n1. Push commits in current\
        \ branch of dev mode project to the production branch (origin/master).\n \
        \  Note a. This step is skipped in read-only projects.\n   Note b. If this\
        \ step is unsuccessful for any reason (e.g. rejected non-fastforward because\
        \ production branch has\n             commits not in current branch), subsequent\
        \ steps will be skipped.\n2. If this is the first deploy of this project,\
        \ create the production project with git repository.\n3. Pull the production\
        \ branch into the production project.\n\n"
      operationId: "deploy_to_production"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Id of project"
        required: true
        type: "string"
      responses:
        200:
          description: "Project"
          schema:
            type: "string"
        204:
          description: "Returns 204 if project was successfully deployed to production,\
            \ otherwise 400 with an error message"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /projects/{project_id}/files:
    get:
      tags:
      - "Project"
      summary: "Get All Project Files"
      description: "### Get All Project Files\n\nReturns a list of the files in the\
        \ project\n"
      operationId: "all_project_files"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields"
        required: false
        type: "string"
      responses:
        200:
          description: "Project File"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ProjectFile"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /projects/{project_id}/files/file:
    get:
      tags:
      - "Project"
      summary: "Get Project File"
      description: "### Get Project File Info\n\nReturns information about a file\
        \ in the project\n"
      operationId: "project_file"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      - name: "file_id"
        in: "query"
        description: "File Id"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields"
        required: false
        type: "string"
      responses:
        200:
          description: "Project File"
          schema:
            $ref: "#/definitions/ProjectFile"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /projects/{project_id}/git/deploy_key:
    get:
      tags:
      - "Project"
      summary: "Git Deploy Key"
      description: "### Git Deploy Key\n\nReturns the ssh public key previously created\
        \ for a project's git repository.\n"
      operationId: "git_deploy_key"
      produces:
      - "text/plain"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      responses:
        200:
          description: "The text of the public key portion of the deploy_key"
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
    post:
      tags:
      - "Project"
      summary: "Create Deploy Key"
      description: "### Create Git Deploy Key\n\nCreate a public/private key pair\
        \ for authenticating ssh git requests from Looker to a remote git repository\n\
        for a particular Looker project.\n\nReturns the public key of the generated\
        \ ssh key pair.\n\nCopy this public key to your remote git repository's ssh\
        \ keys configuration so that the remote git service can\nvalidate and accept\
        \ git requests from the Looker server.\n"
      operationId: "create_git_deploy_key"
      produces:
      - "text/plain"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      responses:
        200:
          description: "Project"
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /projects/{project_id}/git_branch:
    get:
      tags:
      - "Project"
      summary: "Get Active Git Branch"
      description: "### Get the Current Git Branch\n\nReturns the git branch currently\
        \ checked out in the given project repository\n"
      operationId: "git_branch"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      responses:
        200:
          description: "Git Branch"
          schema:
            $ref: "#/definitions/GitBranch"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
    post:
      tags:
      - "Project"
      summary: "Checkout New Git Branch"
      description: "### Create and Checkout a Git Branch\n\nCreates and checks out\
        \ a new branch in the given project repository\nOnly allowed in development\
        \ mode\n  - Call `update_session` to select the 'dev' workspace.\n\nOptionally\
        \ specify a branch name, tag name or commit SHA as the start point in the\
        \ ref field.\n  If no ref is specified, HEAD of the current branch will be\
        \ used as the start point for the new branch.\n\n"
      operationId: "create_git_branch"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Git Branch"
        required: false
        schema:
          $ref: "#/definitions/GitBranch"
      responses:
        200:
          description: "Git Branch"
          schema:
            $ref: "#/definitions/GitBranch"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
    put:
      tags:
      - "Project"
      summary: "Update Project Git Branch"
      description: "### Checkout and/or reset --hard an existing Git Branch\n\nOnly\
        \ allowed in development mode\n  - Call `update_session` to select the 'dev'\
        \ workspace.\n\nCheckout an existing branch if name field is different from\
        \ the name of the currently checked out branch.\n\nOptionally specify a branch\
        \ name, tag name or commit SHA to which the branch should be reset.\n  **DANGER**\
        \ hard reset will be force pushed to the remote. Unsaved changes and commits\
        \ may be permanently lost.\n\n"
      operationId: "update_git_branch"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Git Branch"
        required: true
        schema:
          $ref: "#/definitions/GitBranch"
      responses:
        200:
          description: "Git Branch"
          schema:
            $ref: "#/definitions/GitBranch"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /projects/{project_id}/git_branch/{branch_name}:
    get:
      tags:
      - "Project"
      summary: "Find a Git Branch"
      description: "### Get the specified Git Branch\n\nReturns the git branch specified\
        \ in branch_name path param if it exists in the given project repository\n"
      operationId: "find_git_branch"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      - name: "branch_name"
        in: "path"
        description: "Branch Name"
        required: true
        type: "string"
      responses:
        200:
          description: "Git Branch"
          schema:
            $ref: "#/definitions/GitBranch"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
    delete:
      tags:
      - "Project"
      summary: "Delete a Git Branch"
      description: "### Delete the specified Git Branch\n\nDelete git branch specified\
        \ in branch_name path param from local and remote of specified project repository\n"
      operationId: "delete_git_branch"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      - name: "branch_name"
        in: "path"
        description: "Branch Name"
        required: true
        type: "string"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /projects/{project_id}/git_branches:
    get:
      tags:
      - "Project"
      summary: "Get All Git Branches"
      description: "### Get All Git Branches\n\nReturns a list of git branches in\
        \ the project repository\n"
      operationId: "all_git_branches"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      responses:
        200:
          description: "Git Branch"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitBranch"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /projects/{project_id}/git_connection_tests:
    get:
      tags:
      - "Project"
      summary: "Get All Git Connection Tests"
      description: "### Get All Git Connection Tests\n\nReturns a list of tests which\
        \ can be run against a project's (or the dependency project for the provided\
        \ remote_url) git connection. Call [Run Git Connection Test](#!/Project/run_git_connection_test)\
        \ to execute each test in sequence.\n\nTests are ordered by increasing specificity.\
        \ Tests should be run in the order returned because later tests require functionality\
        \ tested by tests earlier in the test list.\n\nFor example, a late-stage test\
        \ for write access is meaningless if connecting to the git server (an early\
        \ test) is failing.\n"
      operationId: "all_git_connection_tests"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      - name: "remote_url"
        in: "query"
        description: "(Optional: leave blank for root project) The remote url for\
          \ remote dependency to test."
        required: false
        type: "string"
      responses:
        200:
          description: "Git Connection Test"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitConnectionTest"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /projects/{project_id}/git_connection_tests/{test_id}:
    get:
      tags:
      - "Project"
      summary: "Run Git Connection Test"
      description: "### Run a git connection test\n\nRun the named test on the git\
        \ service used by this project (or the dependency project for the provided\
        \ remote_url) and return the result. This\nis intended to help debug git connections\
        \ when things do not work properly, to give\nmore helpful information about\
        \ why a git url is not working with Looker.\n\nTests should be run in the\
        \ order they are returned by [Get All Git Connection Tests](#!/Project/all_git_connection_tests).\n"
      operationId: "run_git_connection_test"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      - name: "test_id"
        in: "path"
        description: "Test Id"
        required: true
        type: "string"
      - name: "remote_url"
        in: "query"
        description: "(Optional: leave blank for root project) The remote url for\
          \ remote dependency to test."
        required: false
        type: "string"
      responses:
        200:
          description: "Git Connection Test Result"
          schema:
            $ref: "#/definitions/GitConnectionTestResult"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /projects/{project_id}/manifest:
    get:
      tags:
      - "Project"
      summary: "Get Manifest"
      description: "### Get A Projects Manifest object\n\nReturns the project with\
        \ the given project id\n"
      operationId: "manifest"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      responses:
        200:
          description: "Manifest"
          schema:
            $ref: "#/definitions/Manifest"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /projects/{project_id}/reset_to_production:
    post:
      tags:
      - "Project"
      summary: "Reset To Production"
      description: "### Reset a project to the revision of the project that is in\
        \ production.\n\n**DANGER** this will delete any changes that have not been\
        \ pushed to a remote repository.\n"
      operationId: "reset_project_to_production"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Id of project"
        required: true
        type: "string"
      responses:
        200:
          description: "Project"
          schema:
            type: "string"
        204:
          description: "Returns 204 if project was successfully reset, otherwise 400\
            \ with an error message"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /projects/{project_id}/reset_to_remote:
    post:
      tags:
      - "Project"
      summary: "Reset To Remote"
      description: "### Reset a project development branch to the revision of the\
        \ project that is on the remote.\n\n**DANGER** this will delete any changes\
        \ that have not been pushed to a remote repository.\n"
      operationId: "reset_project_to_remote"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Id of project"
        required: true
        type: "string"
      responses:
        200:
          description: "Project"
          schema:
            type: "string"
        204:
          description: "Returns 204 if project was successfully reset, otherwise 400\
            \ with an error message"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /projects/{project_id}/validate:
    get:
      tags:
      - "Project"
      summary: "Cached Project Validation Results"
      description: "### Get Cached Project Validation Results\n\nReturns the cached\
        \ results of a previous project validation calculation, if any.\nReturns http\
        \ status 204 No Content if no validation results exist.\n\nValidating the\
        \ content of all the files in a project can be computationally intensive\n\
        for large projects. Use this API to simply fetch the results of the most recent\n\
        project validation rather than revalidating the entire project from scratch.\n\
        \nA value of `\"stale\": true` in the response indicates that the project\
        \ has changed since\nthe cached validation results were computed. The cached\
        \ validation results may no longer\nreflect the current state of the project.\n"
      operationId: "project_validation_results"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields"
        required: false
        type: "string"
      responses:
        200:
          description: "Project validation results"
          schema:
            $ref: "#/definitions/ProjectValidationCache"
        204:
          description: "Deleted"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
    post:
      tags:
      - "Project"
      summary: "Validate Project"
      description: "### Validate Project\n\nPerforms lint validation of all lookml\
        \ files in the project.\nReturns a list of errors found, if any.\n\nValidating\
        \ the content of all the files in a project can be computationally intensive\n\
        for large projects. For best performance, call `validate_project(project_id)`\
        \ only\nwhen you really want to recompute project validation. To quickly display\
        \ the results of\nthe most recent project validation (without recomputing),\
        \ use `project_validation_results(project_id)`\n"
      operationId: "validate_project"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project Id"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields"
        required: false
        type: "string"
      responses:
        200:
          description: "Project validation results"
          schema:
            $ref: "#/definitions/ProjectValidation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Project"
      x-looker-status: "beta"
  /queries:
    post:
      tags:
      - "Query"
      summary: "Create Query"
      description: "### Create a query.\n\nThis allows you to create a new query that\
        \ you can later run. Looker queries are immutable once created\nand are not\
        \ deleted. If you create a query that is exactly like an existing query then\
        \ the existing query\nwill be returned and no new query will be created. Whether\
        \ a new query is created or not, you can use\nthe 'id' in the returned query\
        \ with the 'run' method.\n\nThe query parameters are passed as json in the\
        \ body of the request.\n\n"
      operationId: "create_query"
      parameters:
      - in: "body"
        name: "body"
        description: "Query"
        required: false
        schema:
          $ref: "#/definitions/Query"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Query"
          schema:
            $ref: "#/definitions/Query"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Query"
      x-looker-status: "stable"
  /queries/models/{model_name}/views/{view_name}/run/{result_format}:
    get:
      tags:
      - "Query"
      summary: "Run Url Encoded Query"
      description: "### Run an URL encoded query.\n\nThis requires the caller to encode\
        \ the specifiers for the query into the URL query part using\nLooker-specific\
        \ syntax as explained below.\n\nGenerally, you would want to use one of the\
        \ methods that takes the parameters as json in the POST body\nfor creating\
        \ and/or running queries. This method exists for cases where one really needs\
        \ to encode the\nparameters into the URL of a single 'GET' request. This matches\
        \ the way that the Looker UI formats\n'explore' URLs etc.\n\nThe parameters\
        \ here are very similar to the json body formatting except that the filter\
        \ syntax is\ntricky. Unfortunately, this format makes this method not currently\
        \ callible via the 'Try it out!' button\nin this documentation page. But,\
        \ this is callable  when creating URLs manually or when using the Looker SDK.\n\
        \nHere is an example inline query URL:\n\n```\nhttps://looker.mycompany.com:19999/api/3.0/queries/models/thelook/views/inventory_items/run/json?fields=category.name,inventory_items.days_in_inventory_tier,products.count&f[category.name]=socks&sorts=products.count+desc+0&limit=500&query_timezone=America/Los_Angeles\n\
        ```\n\nWhen invoking this endpoint with the Ruby SDK, pass the query parameter\
        \ parts as a hash. The hash to match the above would look like:\n\n```ruby\n\
        query_params =\n{\n  :fields => \"category.name,inventory_items.days_in_inventory_tier,products.count\"\
        ,\n  :\"f[category.name]\" => \"socks\",\n  :sorts => \"products.count desc\
        \ 0\",\n  :limit => \"500\",\n  :query_timezone => \"America/Los_Angeles\"\
        \n}\nresponse = ruby_sdk.run_url_encoded_query('thelook','inventory_items','json',\
        \ query_params)\n\n```\n\nAgain, it is generally easier to use the variant\
        \ of this method that passes the full query in the POST body.\nThis method\
        \ is available for cases where other alternatives won't fit the need.\n\n\
        Supported formats:\n\n| result_format | Description\n| :-----------: | :---\
        \ |\n| json | Plain json\n| json_detail | Row data plus metadata describing\
        \ the fields, pivots, table calcs, and other aspects of the query\n| csv |\
        \ Comma separated values with a header\n| txt | Tab separated values with\
        \ a header\n| html | Simple html\n| md | Simple markdown\n| xlsx | MS Excel\
        \ spreadsheet\n| sql | Returns the generated SQL rather than running the query\n\
        | png | A PNG image of the visualization of the query\n| jpg | A JPG image\
        \ of the visualization of the query\n\n\n"
      operationId: "run_url_encoded_query"
      produces:
      - "text"
      - "application/json"
      - "image/png"
      - "image/jpg"
      parameters:
      - name: "model_name"
        in: "path"
        description: "Model name"
        required: true
        type: "string"
      - name: "view_name"
        in: "path"
        description: "View name"
        required: true
        type: "string"
      - name: "result_format"
        in: "path"
        description: "Format of result"
        required: true
        type: "string"
      responses:
        200:
          description: "Query"
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Query"
      x-looker-status: "stable"
  /queries/run/{result_format}:
    post:
      tags:
      - "Query"
      summary: "Run Inline Query"
      description: "### Run the query that is specified inline in the posted body.\n\
        \nThis allows running a query as defined in json in the posted body. This\
        \ combines\nthe two actions of posting & running a query into one step.\n\n\
        Here is an example body in json:\n```\n{\n  \"model\":\"thelook\",\n  \"view\"\
        :\"inventory_items\",\n  \"fields\":[\"category.name\",\"inventory_items.days_in_inventory_tier\"\
        ,\"products.count\"],\n  \"filters\":{\"category.name\":\"socks\"},\n  \"\
        sorts\":[\"products.count desc 0\"],\n  \"limit\":\"500\",\n  \"query_timezone\"\
        :\"America/Los_Angeles\"\n}\n```\n\nWhen using the Ruby SDK this would be\
        \ passed as a Ruby hash like:\n```\n{\n :model=>\"thelook\",\n :view=>\"inventory_items\"\
        ,\n :fields=>\n  [\"category.name\",\n   \"inventory_items.days_in_inventory_tier\"\
        ,\n   \"products.count\"],\n :filters=>{:\"category.name\"=>\"socks\"},\n\
        \ :sorts=>[\"products.count desc 0\"],\n :limit=>\"500\",\n :query_timezone=>\"\
        America/Los_Angeles\",\n}\n```\n\nThis will return the result of running the\
        \ query in the format specified by the 'result_format' parameter.\n\nSupported\
        \ formats:\n\n| result_format | Description\n| :-----------: | :--- |\n| json\
        \ | Plain json\n| json_detail | Row data plus metadata describing the fields,\
        \ pivots, table calcs, and other aspects of the query\n| csv | Comma separated\
        \ values with a header\n| txt | Tab separated values with a header\n| html\
        \ | Simple html\n| md | Simple markdown\n| xlsx | MS Excel spreadsheet\n|\
        \ sql | Returns the generated SQL rather than running the query\n| png | A\
        \ PNG image of the visualization of the query\n| jpg | A JPG image of the\
        \ visualization of the query\n\n\n"
      operationId: "run_inline_query"
      produces:
      - "text"
      - "application/json"
      - "image/png"
      - "image/jpg"
      parameters:
      - name: "result_format"
        in: "path"
        description: "Format of result"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "inline query"
        required: true
        schema:
          $ref: "#/definitions/Query"
      - name: "limit"
        in: "query"
        description: "Row limit (may override the limit in the saved query)."
        required: false
        type: "integer"
        format: "int64"
      - name: "apply_formatting"
        in: "query"
        description: "Apply model-specified formatting to each result."
        required: false
        type: "boolean"
      - name: "apply_vis"
        in: "query"
        description: "Apply visualization options to results."
        required: false
        type: "boolean"
      - name: "cache"
        in: "query"
        description: "Get results from cache if available."
        required: false
        type: "boolean"
      - name: "image_width"
        in: "query"
        description: "Render width for image formats."
        required: false
        type: "integer"
        format: "int64"
      - name: "image_height"
        in: "query"
        description: "Render height for image formats."
        required: false
        type: "integer"
        format: "int64"
      - name: "generate_drill_links"
        in: "query"
        description: "Generate drill links (only applicable to 'json_detail' format."
        required: false
        type: "boolean"
      - name: "force_production"
        in: "query"
        description: "Force use of production models even if the user is in development\
          \ mode."
        required: false
        type: "boolean"
      - name: "cache_only"
        in: "query"
        description: "Retrieve any results from cache even if the results have expired."
        required: false
        type: "boolean"
      - name: "path_prefix"
        in: "query"
        description: "Prefix to use for drill links (url encoded)."
        required: false
        type: "string"
      - name: "rebuild_pdts"
        in: "query"
        description: "Rebuild PDTS used in query."
        required: false
        type: "boolean"
      - name: "server_table_calcs"
        in: "query"
        description: "Perform table calculations on query results"
        required: false
        type: "boolean"
      responses:
        200:
          description: "Query Result"
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Query"
      x-looker-status: "stable"
  /queries/slug/{slug}:
    get:
      tags:
      - "Query"
      summary: "Get Query for Slug"
      description: "### Get the query for a given query slug.\n\nThis returns the\
        \ query for the 'slug' in a query share URL.\n\nThe 'slug' is a randomly chosen\
        \ short string that is used as an alternative to the query's id value\nfor\
        \ use in URLs etc. This method exists as a convenience to help you use the\
        \ API to 'find' queries that\nhave been created using the Looker UI.\n\nYou\
        \ can use the Looker explore page to build a query and then choose the 'Share'\
        \ option to\nshow the share url for the query. Share urls generally look something\
        \ like 'https://looker.yourcompany/x/vwGSbfc'.\nThe trailing 'vwGSbfc' is\
        \ the share slug. You can pass that string to this api method to get details\
        \ about the query.\nThose details include the 'id' that you can use to run\
        \ the query. Or, you can copy the query body\n(perhaps with your own modification)\
        \ and use that as the basis to make/run new queries.\n\nThis will also work\
        \ with slugs from Looker explore urls like\n'https://looker.yourcompany/explore/ecommerce/orders?qid=aogBgL6o3cKK1jN3RoZl5s'.\
        \ In this case\n'aogBgL6o3cKK1jN3RoZl5s' is the slug.\n"
      operationId: "query_for_slug"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of query"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Query"
          schema:
            $ref: "#/definitions/Query"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Query"
      x-looker-status: "stable"
  /queries/{query_id}:
    get:
      tags:
      - "Query"
      summary: "Get Query"
      description: "### Get a previously created query by id.\n\nA Looker query object\
        \ includes the various parameters that define a database query that has been\
        \ run or\ncould be run in the future. These parameters include: model, view,\
        \ fields, filters, pivots, etc.\nQuery *results* are not part of the query\
        \ object.\n\nQuery objects are unique and immutable. Query objects are created\
        \ automatically in Looker as users explore data.\nLooker does not delete them;\
        \ they become part of the query history. When asked to create a query for\n\
        any given set of parameters, Looker will first try to find an existing query\
        \ object with matching\nparameters and will only create a new object when\
        \ an appropriate object can not be found.\n\nThis 'get' method is used to\
        \ get the details about a query for a given id. See the other methods here\n\
        to 'create' and 'run' queries.\n\nNote that some fields like 'filter_config'\
        \ and 'vis_config' etc are specific to how the Looker UI\nbuilds queries and\
        \ visualizations and are not generally useful for API use. They are not required\
        \ when\ncreating new queries and can usually just be ignored.\n\n"
      operationId: "query"
      parameters:
      - name: "query_id"
        in: "path"
        description: "Id of query"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Query"
          schema:
            $ref: "#/definitions/Query"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Query"
      x-looker-status: "stable"
  /queries/{query_id}/run/{result_format}:
    get:
      tags:
      - "Query"
      summary: "Run Query"
      description: "### Run a saved query.\n\nThis runs a previously saved query.\
        \ You can use this on a query that was generated in the Looker UI\nor one\
        \ that you have explicitly created using the API. You can also use a query\
        \ 'id' from a saved 'Look'.\n\nThe 'result_format' parameter specifies the\
        \ desired structure and format of the response.\n\nSupported formats:\n\n\
        | result_format | Description\n| :-----------: | :--- |\n| json | Plain json\n\
        | json_detail | Row data plus metadata describing the fields, pivots, table\
        \ calcs, and other aspects of the query\n| csv | Comma separated values with\
        \ a header\n| txt | Tab separated values with a header\n| html | Simple html\n\
        | md | Simple markdown\n| xlsx | MS Excel spreadsheet\n| sql | Returns the\
        \ generated SQL rather than running the query\n| png | A PNG image of the\
        \ visualization of the query\n| jpg | A JPG image of the visualization of\
        \ the query\n\n\n"
      operationId: "run_query"
      produces:
      - "text"
      - "application/json"
      - "image/png"
      - "image/jpg"
      parameters:
      - name: "query_id"
        in: "path"
        description: "Id of query"
        required: true
        type: "integer"
        format: "int64"
      - name: "result_format"
        in: "path"
        description: "Format of result"
        required: true
        type: "string"
      - name: "limit"
        in: "query"
        description: "Row limit (may override the limit in the saved query)."
        required: false
        type: "integer"
        format: "int64"
      - name: "apply_formatting"
        in: "query"
        description: "Apply model-specified formatting to each result."
        required: false
        type: "boolean"
      - name: "apply_vis"
        in: "query"
        description: "Apply visualization options to results."
        required: false
        type: "boolean"
      - name: "cache"
        in: "query"
        description: "Get results from cache if available."
        required: false
        type: "boolean"
      - name: "image_width"
        in: "query"
        description: "Render width for image formats."
        required: false
        type: "integer"
        format: "int64"
      - name: "image_height"
        in: "query"
        description: "Render height for image formats."
        required: false
        type: "integer"
        format: "int64"
      - name: "generate_drill_links"
        in: "query"
        description: "Generate drill links (only applicable to 'json_detail' format."
        required: false
        type: "boolean"
      - name: "force_production"
        in: "query"
        description: "Force use of production models even if the user is in development\
          \ mode."
        required: false
        type: "boolean"
      - name: "cache_only"
        in: "query"
        description: "Retrieve any results from cache even if the results have expired."
        required: false
        type: "boolean"
      - name: "path_prefix"
        in: "query"
        description: "Prefix to use for drill links (url encoded)."
        required: false
        type: "string"
      - name: "rebuild_pdts"
        in: "query"
        description: "Rebuild PDTS used in query."
        required: false
        type: "boolean"
      - name: "server_table_calcs"
        in: "query"
        description: "Perform table calculations on query results"
        required: false
        type: "boolean"
      responses:
        200:
          description: "Query"
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Query"
      x-looker-status: "stable"
  /query_tasks:
    post:
      tags:
      - "Query"
      summary: "Run Query Async"
      description: "### Run a saved query asynchronously.\n\nRuns a previously created\
        \ query asynchronously. Returns a Query Task ID\nwhich can be used to fetch\
        \ the results from the Query Tasks results endpoint.\n"
      operationId: "create_query_task"
      parameters:
      - in: "body"
        name: "body"
        description: "Query parameters"
        required: true
        schema:
          $ref: "#/definitions/CreateQueryTask"
      - name: "limit"
        in: "query"
        description: "Row limit (may override the limit in the saved query)."
        required: false
        type: "integer"
        format: "int64"
      - name: "apply_formatting"
        in: "query"
        description: "Apply model-specified formatting to each result."
        required: false
        type: "boolean"
      - name: "apply_vis"
        in: "query"
        description: "Apply visualization options to results."
        required: false
        type: "boolean"
      - name: "cache"
        in: "query"
        description: "Get results from cache if available."
        required: false
        type: "boolean"
      - name: "image_width"
        in: "query"
        description: "Render width for image formats."
        required: false
        type: "integer"
        format: "int64"
      - name: "image_height"
        in: "query"
        description: "Render height for image formats."
        required: false
        type: "integer"
        format: "int64"
      - name: "generate_drill_links"
        in: "query"
        description: "Generate drill links (only applicable to 'json_detail' format."
        required: false
        type: "boolean"
      - name: "force_production"
        in: "query"
        description: "Force use of production models even if the user is in development\
          \ mode."
        required: false
        type: "boolean"
      - name: "cache_only"
        in: "query"
        description: "Retrieve any results from cache even if the results have expired."
        required: false
        type: "boolean"
      - name: "path_prefix"
        in: "query"
        description: "Prefix to use for drill links (url encoded)."
        required: false
        type: "string"
      - name: "rebuild_pdts"
        in: "query"
        description: "Rebuild PDTS used in query."
        required: false
        type: "boolean"
      - name: "server_table_calcs"
        in: "query"
        description: "Perform table calculations on query results"
        required: false
        type: "boolean"
      - name: "fields"
        in: "query"
        description: "Requested fields"
        required: false
        type: "string"
      responses:
        200:
          description: "query_task"
          schema:
            $ref: "#/definitions/QueryTask"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Query"
      x-looker-status: "beta"
  /query_tasks/multi_results:
    get:
      tags:
      - "Query"
      summary: "Get Multiple Async Query Results"
      description: "Fetch the results of multiple async Query Tasks in one response.\n\
        \nQuery Tasks that are not ready will be skipped and will not appear in the\
        \ response.\nQuery Tasks whose results have expired will have a status of\
        \ 'expired'.\nIf the user making the API request does not have sufficient\
        \ privileges to view a Query Task result, the result will have a status of\
        \ 'missing'\n"
      operationId: "query_task_multi_results"
      parameters:
      - name: "query_task_ids"
        in: "query"
        description: "List of Query Task IDs"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "Multiple query results"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Query"
      x-looker-status: "beta"
  /query_tasks/{query_task_id}:
    get:
      tags:
      - "Query"
      summary: "Get Async Query Info"
      description: "Returns information about a Query Task.\n\nQuery Tasks are generated\
        \ by running queries asynchronously. They are represented by a GUID returned\n\
        from one of the async query endpoints.\n"
      operationId: "query_task"
      parameters:
      - name: "query_task_id"
        in: "path"
        description: "ID of the Query Task"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "query_task"
          schema:
            $ref: "#/definitions/QueryTask"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Query"
      x-looker-status: "beta"
  /query_tasks/{query_task_id}/results:
    get:
      tags:
      - "Query"
      summary: "Get Async Query Results"
      description: "Returns the results of an async Query Task if the query has completed.\n"
      operationId: "query_task_results"
      produces:
      - "text"
      - "application/json"
      parameters:
      - name: "query_task_id"
        in: "path"
        description: "ID of the Query Task"
        required: true
        type: "string"
      responses:
        200:
          description: "The query results."
          schema:
            type: "object"
            additionalProperties:
              type: "string"
        204:
          description: "The query is not finished"
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "The Query Task Id was not found or the results have expired."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Query"
      x-looker-status: "beta"
  /render_tasks/dashboards/{dashboard_id}/{result_format}:
    post:
      tags:
      - "RenderTask"
      summary: "Create Dashboard Render Task"
      description: "### Create a new task to render a dashboard to a document or image.\n\
        \nReturns a render task object.\nTo check the status of a render task, pass\
        \ the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\n\
        Once the render task is complete, you can download the resulting document\
        \ or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\
        \n"
      operationId: "create_dashboard_render_task"
      parameters:
      - name: "dashboard_id"
        in: "path"
        description: "Id of dashboard to render"
        required: true
        type: "integer"
        format: "int64"
      - name: "result_format"
        in: "path"
        description: "Output type: pdf, png, or jpg"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Dashboard render task parameters"
        required: true
        schema:
          $ref: "#/definitions/CreateDashboardRenderTask"
      - name: "width"
        in: "query"
        description: "Output width in pixels"
        required: true
        type: "integer"
        format: "int64"
      - name: "height"
        in: "query"
        description: "Output height in pixels"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "pdf_paper_size"
        in: "query"
        description: "Paper size for pdf"
        required: false
        type: "string"
      - name: "pdf_landscape"
        in: "query"
        description: "Whether to render pdf in landscape"
        required: false
        type: "boolean"
      responses:
        200:
          description: "Render Task"
          schema:
            $ref: "#/definitions/RenderTask"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "RenderTask"
      x-looker-status: "beta"
  /render_tasks/lookml_dashboards/{dashboard_id}/{result_format}:
    post:
      tags:
      - "RenderTask"
      summary: "Create Lookml Dashboard Render Task"
      description: "### Create a new task to render a lookml dashboard to a document\
        \ or image.\n\nReturns a render task object.\nTo check the status of a render\
        \ task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\n\
        Once the render task is complete, you can download the resulting document\
        \ or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\
        \n"
      operationId: "create_lookml_dashboard_render_task"
      parameters:
      - name: "dashboard_id"
        in: "path"
        description: "Id of lookml dashboard to render"
        required: true
        type: "string"
      - name: "result_format"
        in: "path"
        description: "Output type: pdf, png, or jpg"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Dashboard render task parameters"
        required: true
        schema:
          $ref: "#/definitions/CreateDashboardRenderTask"
      - name: "width"
        in: "query"
        description: "Output width in pixels"
        required: true
        type: "integer"
        format: "int64"
      - name: "height"
        in: "query"
        description: "Output height in pixels"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "pdf_paper_size"
        in: "query"
        description: "Paper size for pdf"
        required: false
        type: "string"
      - name: "pdf_landscape"
        in: "query"
        description: "Whether to render pdf in landscape"
        required: false
        type: "boolean"
      responses:
        200:
          description: "Render Task"
          schema:
            $ref: "#/definitions/RenderTask"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "RenderTask"
      x-looker-status: "beta"
  /render_tasks/looks/{look_id}/{result_format}:
    post:
      tags:
      - "RenderTask"
      summary: "Create Look Render Task"
      description: "### Create a new task to render a look to an image.\n\nReturns\
        \ a render task object.\nTo check the status of a render task, pass the render_task.id\
        \ to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task\
        \ is complete, you can download the resulting document or image using [Get\
        \ Render Task Results](#!/RenderTask/get_render_task_results).\n\n"
      operationId: "create_look_render_task"
      parameters:
      - name: "look_id"
        in: "path"
        description: "Id of look to render"
        required: true
        type: "integer"
        format: "int64"
      - name: "result_format"
        in: "path"
        description: "Output type: png, or jpg"
        required: true
        type: "string"
      - name: "width"
        in: "query"
        description: "Output width in pixels"
        required: true
        type: "integer"
        format: "int64"
      - name: "height"
        in: "query"
        description: "Output height in pixels"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Render Task"
          schema:
            $ref: "#/definitions/RenderTask"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "RenderTask"
      x-looker-status: "beta"
  /render_tasks/queries/{query_id}/{result_format}:
    post:
      tags:
      - "RenderTask"
      summary: "Create Query Render Task"
      description: "### Create a new task to render an existing query to an image.\n\
        \nReturns a render task object.\nTo check the status of a render task, pass\
        \ the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\n\
        Once the render task is complete, you can download the resulting document\
        \ or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\
        \n"
      operationId: "create_query_render_task"
      parameters:
      - name: "query_id"
        in: "path"
        description: "Id of the query to render"
        required: true
        type: "integer"
        format: "int64"
      - name: "result_format"
        in: "path"
        description: "Output type: png or jpg"
        required: true
        type: "string"
      - name: "width"
        in: "query"
        description: "Output width in pixels"
        required: true
        type: "integer"
        format: "int64"
      - name: "height"
        in: "query"
        description: "Output height in pixels"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Render Task"
          schema:
            $ref: "#/definitions/RenderTask"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "RenderTask"
      x-looker-status: "beta"
  /render_tasks/{render_task_id}:
    get:
      tags:
      - "RenderTask"
      summary: "Get Render Task"
      description: "### Get information about a render task.\n\nReturns a render task\
        \ object.\nTo check the status of a render task, pass the render_task.id to\
        \ [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task\
        \ is complete, you can download the resulting document or image using [Get\
        \ Render Task Results](#!/RenderTask/get_render_task_results).\n\n"
      operationId: "render_task"
      parameters:
      - name: "render_task_id"
        in: "path"
        description: "Id of render task"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Render Task"
          schema:
            $ref: "#/definitions/RenderTask"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "RenderTask"
      x-looker-status: "beta"
  /render_tasks/{render_task_id}/results:
    get:
      tags:
      - "RenderTask"
      summary: "Render Task Results"
      description: "### Get the document or image produced by a completed render task.\n\
        \nReturns `102 Processing` if the render task has not completed.\n"
      operationId: "render_task_results"
      produces:
      - "image/jpeg"
      - "image/png"
      - "application/pdf"
      parameters:
      - name: "render_task_id"
        in: "path"
        description: "Id of render task"
        required: true
        type: "string"
      responses:
        102:
          description: "Processing"
        200:
          description: "Document or image"
          schema:
            type: "string"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "RenderTask"
      x-looker-status: "beta"
  /roles:
    get:
      tags:
      - "Role"
      summary: "Get All Roles"
      description: "### Get information about all roles.\n"
      operationId: "all_roles"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "ids"
        in: "query"
        description: "Optional list of ids to get specific roles."
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "csv"
      responses:
        200:
          description: "Role"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Role"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
    post:
      tags:
      - "Role"
      summary: "Create Role"
      description: "### Create a role with the specified information.\n"
      operationId: "create_role"
      parameters:
      - in: "body"
        name: "body"
        description: "Role"
        required: false
        schema:
          $ref: "#/definitions/Role"
      responses:
        200:
          description: "Role"
          schema:
            $ref: "#/definitions/Role"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
  /roles/{role_id}:
    get:
      tags:
      - "Role"
      summary: "Get Role"
      description: "### Get information about the role with a specific id.\n"
      operationId: "role"
      parameters:
      - name: "role_id"
        in: "path"
        description: "id of role"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Role"
          schema:
            $ref: "#/definitions/Role"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
    delete:
      tags:
      - "Role"
      summary: "Delete Role"
      description: "### Delete the role with a specific id.\n"
      operationId: "delete_role"
      parameters:
      - name: "role_id"
        in: "path"
        description: "id of role"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Resource Can't Be Modified"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
    patch:
      tags:
      - "Role"
      summary: "Update Role"
      description: "### Update information about the role with a specific id.\n"
      operationId: "update_role"
      parameters:
      - name: "role_id"
        in: "path"
        description: "id of role"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Role"
        required: true
        schema:
          $ref: "#/definitions/Role"
      responses:
        200:
          description: "Role"
          schema:
            $ref: "#/definitions/Role"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Resource Can't Be Modified"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
  /roles/{role_id}/groups:
    get:
      tags:
      - "Role"
      summary: "Get Role Groups"
      description: "### Get information about all the groups with the role that has\
        \ a specific id.\n"
      operationId: "role_groups"
      parameters:
      - name: "role_id"
        in: "path"
        description: "id of role"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Groups with role."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
    put:
      tags:
      - "Role"
      summary: "Update Role Groups"
      description: "### Set all groups for a role, removing all existing group associations\
        \ from that role.\n"
      operationId: "set_role_groups"
      parameters:
      - name: "role_id"
        in: "path"
        description: "Id of Role"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Array of Group Ids"
        required: true
        schema:
          type: "array"
          items:
            type: "integer"
            format: "int64"
      responses:
        200:
          description: "Groups with role."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
  /roles/{role_id}/users:
    get:
      tags:
      - "Role"
      summary: "Get Role Users"
      description: "### Get information about all the users with the role that has\
        \ a specific id.\n"
      operationId: "role_users"
      parameters:
      - name: "role_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "direct_association_only"
        in: "query"
        description: "Get only users associated directly with the role: exclude those\
          \ only associated through groups."
        required: false
        type: "boolean"
      responses:
        200:
          description: "Users with role."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
    put:
      tags:
      - "Role"
      summary: "Update Role Users"
      description: "### Set all the users of the role with a specific id.\n"
      operationId: "set_role_users"
      parameters:
      - name: "role_id"
        in: "path"
        description: "id of role"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "array of user ids for role"
        required: true
        schema:
          type: "array"
          items:
            type: "integer"
            format: "int64"
      responses:
        200:
          description: "Users with role."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Permission Denied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Resource Can't Be Modified"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Role"
      x-looker-status: "stable"
  /running_queries:
    get:
      tags:
      - "RunningQueries"
      summary: "Get All Running Queries"
      description: "Get information about all running queries.\n"
      operationId: "all_running_queries"
      parameters: []
      responses:
        200:
          description: "Running Queries."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RunningQueries"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "RunningQueries"
      x-looker-status: "stable"
  /running_queries/{query_task_id}:
    delete:
      tags:
      - "RunningQueries"
      summary: "Kill Running Query"
      description: "Kill a query with a specific query_task_id.\n"
      operationId: "kill_query"
      parameters:
      - name: "query_task_id"
        in: "path"
        description: "Query task id."
        required: true
        type: "string"
      responses:
        204:
          description: "Query successfully killed."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "RunningQueries"
      x-looker-status: "stable"
  /saml_config:
    get:
      tags:
      - "Auth"
      summary: "Get SAML Configuration"
      description: "### Get the SAML configuration.\n\nLooker can be optionally configured\
        \ to authenticate users against a SAML authentication server.\nSAML setup\
        \ requires coordination with an administrator of that server.\n\nOnly Looker\
        \ administrators can read and update the SAML configuration.\n\nConfiguring\
        \ SAML impacts authentication for all users. This configuration should be\
        \ done carefully.\n\nLooker maintains a single SAML configuation. It can be\
        \ read and updated.       Updates only succeed if the new state will be valid\
        \ (in the sense that all required fields are populated);       it is up to\
        \ you to ensure that the configuration is appropriate and correct).\n\nSAML\
        \ is enabled or disabled for Looker using the **enabled** field.\n"
      operationId: "saml_config"
      parameters: []
      responses:
        200:
          description: "SAML Configuration."
          schema:
            $ref: "#/definitions/SamlConfig"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Auth"
      x-looker-status: "stable"
    patch:
      tags:
      - "Auth"
      summary: "Update SAML Configuration"
      description: "### Update the SAML configuration.\n\nConfiguring SAML impacts\
        \ authentication for all users. This configuration should be done carefully.\n\
        \nOnly Looker administrators can read and update the SAML configuration.\n\
        \nSAML is enabled or disabled for Looker using the **enabled** field.\n\n\
        It is **highly** recommended that any SAML setting changes be tested using\
        \ the APIs below before being set globally.\n"
      operationId: "update_saml_config"
      parameters:
      - in: "body"
        name: "body"
        description: "SAML Config"
        required: true
        schema:
          $ref: "#/definitions/SamlConfig"
      responses:
        200:
          description: "New state for SAML Configuration."
          schema:
            $ref: "#/definitions/SamlConfig"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Auth"
      x-looker-status: "stable"
  /saml_test_configs:
    post:
      tags:
      - "Auth"
      summary: "Create SAML Test Configuration"
      description: "### Create a SAML test configuration.\n"
      operationId: "create_saml_test_config"
      parameters:
      - in: "body"
        name: "body"
        description: "SAML test config"
        required: true
        schema:
          $ref: "#/definitions/SamlConfig"
      responses:
        200:
          description: "SAML test config"
          schema:
            $ref: "#/definitions/SamlConfig"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Auth"
      x-looker-status: "stable"
  /saml_test_configs/{test_slug}:
    get:
      tags:
      - "Auth"
      summary: "Get SAML Test Configuration"
      description: "### Get a SAML test configuration by test_slug.\n"
      operationId: "saml_test_config"
      parameters:
      - name: "test_slug"
        in: "path"
        description: "Slug of test config"
        required: true
        type: "string"
      responses:
        200:
          description: "SAML test config."
          schema:
            $ref: "#/definitions/SamlConfig"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Auth"
      x-looker-status: "stable"
    delete:
      tags:
      - "Auth"
      summary: "Delete SAML Test Configuration"
      description: "### Delete a SAML test configuration.\n"
      operationId: "delete_saml_test_config"
      parameters:
      - name: "test_slug"
        in: "path"
        description: "Slug of test config"
        required: true
        type: "string"
      responses:
        204:
          description: "Test config succssfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Auth"
      x-looker-status: "stable"
  /scheduled_plans:
    get:
      tags:
      - "ScheduledPlan"
      summary: "Get All Scheduled Plans"
      description: "### Get All Scheduled Plans\n\nReturns all scheduled plans owned\
        \ by the caller or given user.\n\nIf no user_id is provided, this function\
        \ returns the scheduled plans owned by the caller.\n\n\nThe caller must have\
        \ `see_schedules` permission to see other users' scheduled plans.\n\n\n"
      operationId: "all_scheduled_plans"
      parameters:
      - name: "user_id"
        in: "query"
        description: "User Id (default is requesting user if not specified)"
        required: false
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Scheduled Plan"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ScheduledPlan"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ScheduledPlan"
      x-looker-status: "beta"
    post:
      tags:
      - "ScheduledPlan"
      summary: "Create Scheduled Plan"
      description: "### Create a Scheduled Plan\n\nCreate a scheduled plan to render\
        \ a Look or Dashboard on a recurring schedule.\n\nThe queries that provide\
        \ the data for the look or dashboard are run in the context of user account\
        \ that owns the scheduled plan.\n\nAdmins can create scheduled plans on behalf\
        \ of other users by specifying a user id.\n\nScheduled plan destinations must\
        \ specify the data format to produce and send to the destination\n\nScheduled\
        \ Plan Destination formats:\n\n| format | Description\n| :-----------: | :---\
        \ |\n| json | A JSON object containing a `data` property which contains an\
        \ array of JSON objects, one per row. No metadata.\n| json_detail | Row data\
        \ plus metadata describing the fields, pivots, table calcs, and other aspects\
        \ of the query\n| inline_json | Same as the JSON format, except that the `data`\
        \ property is a string containing JSON-escaped row data. Additional properties\
        \ describe the data operation. This format is primarily used to send data\
        \ to web hooks so that the web hook doesn't have to re-encode the JSON row\
        \ data in order to pass it on to its ultimate destination.\n| csv | Comma\
        \ separated values with a header\n| txt | Tab separated values with a header\n\
        | html | Simple html\n| xlsx | MS Excel spreadsheet\n| wysiwyg_pdf | Dashboard\
        \ rendered in a tiled layout to produce a PDF document\n| assembled_pdf |\
        \ Dashboard rendered in a single column layout to produce a PDF document\n\
        | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n\
        ||\n\nValid formats vary by destination type and source object. `wysiwyg_pdf`\
        \ is only valid for dashboards, for example.\n\n\n"
      operationId: "create_scheduled_plan"
      parameters:
      - in: "body"
        name: "body"
        description: "Scheduled Plan"
        required: false
        schema:
          $ref: "#/definitions/ScheduledPlan"
      responses:
        200:
          description: "Scheduled Plan"
          schema:
            $ref: "#/definitions/ScheduledPlan"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "ScheduledPlan"
      x-looker-status: "beta"
  /scheduled_plans/dashboard/{dashboard_id}:
    get:
      tags:
      - "ScheduledPlan"
      summary: "Scheduled Plans for Dashboard"
      description: "### Get Scheduled Plans for a Dashboard\n\nReturns all scheduled\
        \ plans owned by the caller or given user, for a given dashboard.\n\nIf no\
        \ user_id is provided, this function returns the scheduled plans owned by\
        \ the caller.\n\n\nThe caller must have `see_schedules` permission to see\
        \ other users' scheduled plans.\n\n\n"
      operationId: "scheduled_plans_for_dashboard"
      parameters:
      - name: "dashboard_id"
        in: "path"
        description: "Dashboard Id"
        required: true
        type: "integer"
        format: "int64"
      - name: "user_id"
        in: "query"
        description: "User Id (default is requesting user if not specified)"
        required: false
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Scheduled Plan"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ScheduledPlan"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ScheduledPlan"
      x-looker-status: "beta"
  /scheduled_plans/look/{look_id}:
    get:
      tags:
      - "ScheduledPlan"
      summary: "Scheduled Plans for Look"
      description: "### Get Scheduled Plans for a Look\n\nReturns all scheduled plans\
        \ owned by the caller or given user, for a given look.\n\nIf no user_id is\
        \ provided, this function returns the scheduled plans owned by the caller.\n\
        \n\nThe caller must have `see_schedules` permission to see other users' scheduled\
        \ plans.\n\n\n"
      operationId: "scheduled_plans_for_look"
      parameters:
      - name: "look_id"
        in: "path"
        description: "Look Id"
        required: true
        type: "integer"
        format: "int64"
      - name: "user_id"
        in: "query"
        description: "User Id (default is requesting user if not specified)"
        required: false
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Scheduled Plan"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ScheduledPlan"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ScheduledPlan"
      x-looker-status: "beta"
  /scheduled_plans/lookml_dashboard/{lookml_dashboard_id}:
    get:
      tags:
      - "ScheduledPlan"
      summary: "Scheduled Plans for LookML Dashboard"
      description: "### Get Scheduled Plans for a LookML Dashboard\n\nReturns all\
        \ scheduled plans owned by the caller or given user, for a given LookML dashboard.\n\
        \nIf no user_id is provided, this function returns the scheduled plans owned\
        \ by the caller.\n\n\nThe caller must have `see_schedules` permission to see\
        \ other users' scheduled plans.\n\n\n"
      operationId: "scheduled_plans_for_lookml_dashboard"
      parameters:
      - name: "lookml_dashboard_id"
        in: "path"
        description: "LookML Dashboard Id"
        required: true
        type: "integer"
        format: "int64"
      - name: "user_id"
        in: "query"
        description: "User Id (default is requesting user if not specified)"
        required: false
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Scheduled Plan"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ScheduledPlan"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ScheduledPlan"
      x-looker-status: "beta"
  /scheduled_plans/run_once:
    post:
      tags:
      - "ScheduledPlan"
      summary: "Run Scheduled Plan Once"
      description: "### Run a Scheduled Plan Immediately\n\nCreate a scheduled plan\
        \ that runs only once, and immediately.\n\nThis can be useful for testing\
        \ a Scheduled Plan before committing to a production schedule.\n\nAdmins can\
        \ create scheduled plans on behalf of other users by specifying a user id.\n\
        \nThis API is rate limited to prevent it from being used for relay spam or\
        \ DoS attacks\n\nScheduled plan destinations must specify the data format\
        \ to produce and send to the destination\n\nScheduled Plan Destination formats:\n\
        \n| format | Description\n| :-----------: | :--- |\n| json | A JSON object\
        \ containing a `data` property which contains an array of JSON objects, one\
        \ per row. No metadata.\n| json_detail | Row data plus metadata describing\
        \ the fields, pivots, table calcs, and other aspects of the query\n| inline_json\
        \ | Same as the JSON format, except that the `data` property is a string containing\
        \ JSON-escaped row data. Additional properties describe the data operation.\
        \ This format is primarily used to send data to web hooks so that the web\
        \ hook doesn't have to re-encode the JSON row data in order to pass it on\
        \ to its ultimate destination.\n| csv | Comma separated values with a header\n\
        | txt | Tab separated values with a header\n| html | Simple html\n| xlsx |\
        \ MS Excel spreadsheet\n| wysiwyg_pdf | Dashboard rendered in a tiled layout\
        \ to produce a PDF document\n| assembled_pdf | Dashboard rendered in a single\
        \ column layout to produce a PDF document\n| wysiwyg_png | Dashboard rendered\
        \ in a tiled layout to produce a PNG image\n||\n\nValid formats vary by destination\
        \ type and source object. `wysiwyg_pdf` is only valid for dashboards, for\
        \ example.\n\n\n"
      operationId: "scheduled_plan_run_once"
      parameters:
      - in: "body"
        name: "body"
        description: "Scheduled Plan"
        required: false
        schema:
          $ref: "#/definitions/ScheduledPlan"
      responses:
        200:
          description: "Scheduled Plan"
          schema:
            $ref: "#/definitions/ScheduledPlan"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too Many Requests"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ScheduledPlan"
      x-looker-status: "beta"
  /scheduled_plans/space/{space_id}:
    get:
      tags:
      - "ScheduledPlan"
      summary: "Scheduled Plans for Space"
      description: "### Get Scheduled Plans for a Space\n\nReturns scheduled plans\
        \ owned by the caller for a given space id.\n"
      operationId: "scheduled_plans_for_space"
      parameters:
      - name: "space_id"
        in: "path"
        description: "Space Id"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Scheduled Plan"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ScheduledPlan"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ScheduledPlan"
      x-looker-status: "beta"
  /scheduled_plans/{scheduled_plan_id}:
    get:
      tags:
      - "ScheduledPlan"
      summary: "Get Scheduled Plan"
      description: "### Get Information About a Scheduled Plan\n\nAdmins can fetch\
        \ information about other users' Scheduled Plans.\n"
      operationId: "scheduled_plan"
      parameters:
      - name: "scheduled_plan_id"
        in: "path"
        description: "Scheduled Plan Id"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Scheduled Plan"
          schema:
            $ref: "#/definitions/ScheduledPlan"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ScheduledPlan"
      x-looker-status: "beta"
    delete:
      tags:
      - "ScheduledPlan"
      summary: "Delete Scheduled Plan"
      description: "### Delete a Scheduled Plan\n\nNormal users can only delete their\
        \ own scheduled plans.\nAdmins can delete other users' scheduled plans.\n"
      operationId: "delete_scheduled_plan"
      parameters:
      - name: "scheduled_plan_id"
        in: "path"
        description: "Scheduled Plan Id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ScheduledPlan"
      x-looker-status: "beta"
    patch:
      tags:
      - "ScheduledPlan"
      summary: "Update Scheduled Plan"
      description: "### Update a Scheduled Plan\n\nAdmins can update other users'\
        \ Scheduled Plans.\n\nNote: Any scheduled plan destinations specified in an\
        \ update will **replace** all scheduled plan destinations\ncurrently defined\
        \ for the scheduled plan.\n\nFor Example: If a scheduled plan has destinations\
        \ A, B, and C, and you call update on this scheduled plan\nspecifying only\
        \ B in the destinations, then destinations A and C will be deleted by the\
        \ update.\n\nScheduled plan destinations must specify the data format to produce\
        \ and send to the destination\n\nScheduled Plan Destination formats:\n\n|\
        \ format | Description\n| :-----------: | :--- |\n| json | A JSON object containing\
        \ a `data` property which contains an array of JSON objects, one per row.\
        \ No metadata.\n| json_detail | Row data plus metadata describing the fields,\
        \ pivots, table calcs, and other aspects of the query\n| inline_json | Same\
        \ as the JSON format, except that the `data` property is a string containing\
        \ JSON-escaped row data. Additional properties describe the data operation.\
        \ This format is primarily used to send data to web hooks so that the web\
        \ hook doesn't have to re-encode the JSON row data in order to pass it on\
        \ to its ultimate destination.\n| csv | Comma separated values with a header\n\
        | txt | Tab separated values with a header\n| html | Simple html\n| xlsx |\
        \ MS Excel spreadsheet\n| wysiwyg_pdf | Dashboard rendered in a tiled layout\
        \ to produce a PDF document\n| assembled_pdf | Dashboard rendered in a single\
        \ column layout to produce a PDF document\n| wysiwyg_png | Dashboard rendered\
        \ in a tiled layout to produce a PNG image\n||\n\nValid formats vary by destination\
        \ type and source object. `wysiwyg_pdf` is only valid for dashboards, for\
        \ example.\n\n\n"
      operationId: "update_scheduled_plan"
      parameters:
      - name: "scheduled_plan_id"
        in: "path"
        description: "Scheduled Plan Id"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Scheduled Plan"
        required: true
        schema:
          $ref: "#/definitions/ScheduledPlan"
      responses:
        200:
          description: "Scheduled Plan"
          schema:
            $ref: "#/definitions/ScheduledPlan"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "ScheduledPlan"
      x-looker-status: "beta"
  /session:
    get:
      tags:
      - "Session"
      summary: "Get Session"
      description: "### Get API Session\n\nReturns information about the current API\
        \ session, such as which workspace is selected for the session.\n"
      operationId: "session"
      parameters: []
      responses:
        200:
          description: "Session"
          schema:
            $ref: "#/definitions/ApiSession"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Session"
      x-looker-status: "beta"
    patch:
      tags:
      - "Session"
      summary: "Update Session"
      description: "### Update API Session\n\n#### API Session Workspace\n\nYou can\
        \ use this endpoint to change the active workspace for the current API session.\n\
        \nOnly one workspace can be active in a session. The active workspace can\
        \ be changed\nany number of times in a session.\n\nThe default workspace for\
        \ API sessions is the \"production\" workspace.\n\nAll Looker APIs that use\
        \ projects or lookml models (such as running queries) will\nuse the version\
        \ of project and model files defined by this workspace for the lifetime of\
        \ the\ncurrent API session or until the session workspace is changed again.\n\
        \nAn API session has the same lifetime as the access_token used to authenticate\
        \ API requests. Each successful\nAPI login generates a new access_token and\
        \ a new API session.\n\nIf your Looker API client application needs to work\
        \ in a dev workspace across multiple\nAPI sessions, be sure to select the\
        \ dev workspace after each login.\n"
      operationId: "update_session"
      parameters:
      - in: "body"
        name: "body"
        description: "Session"
        required: true
        schema:
          $ref: "#/definitions/ApiSession"
      responses:
        200:
          description: "Session"
          schema:
            $ref: "#/definitions/ApiSession"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Session"
      x-looker-status: "beta"
  /spaces:
    get:
      tags:
      - "Space"
      summary: "Get All Spaces"
      description: "### Get information about all spaces."
      operationId: "all_spaces"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Space"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SpaceBase"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Space"
      x-looker-status: "beta"
    post:
      tags:
      - "Space"
      summary: "Create Space"
      description: "### Create a space with specified information.\n\nCaller must\
        \ have permission to edit the parent space and to create spaces, otherwise\
        \ the request\nreturns 404 Not Found.\n"
      operationId: "create_space"
      parameters:
      - in: "body"
        name: "body"
        description: "Space"
        required: false
        schema:
          $ref: "#/definitions/Space"
      responses:
        200:
          description: "Space"
          schema:
            $ref: "#/definitions/Space"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Space"
      x-looker-status: "beta"
  /spaces/search:
    get:
      tags:
      - "Space"
      summary: "Search Spaces"
      description: "Search for spaces by creator id, parent id, name, etc"
      operationId: "search_spaces"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Requested page."
        required: false
        type: "integer"
        format: "int64"
      - name: "per_page"
        in: "query"
        description: "Results per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "limit"
        in: "query"
        description: "Number of results to return. (used with offset and takes priority\
          \ over page and per_page)"
        required: false
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Number of results to skip before returning any. (used with limit\
          \ and takes priority over page and per_page)"
        required: false
        type: "integer"
        format: "int64"
      - name: "sorts"
        in: "query"
        description: "Fields to sort by."
        required: false
        type: "string"
      - name: "name"
        in: "query"
        description: "Match Space title."
        required: false
        type: "string"
      - name: "id"
        in: "query"
        description: "Match Space id"
        required: false
        type: "integer"
        format: "int64"
      - name: "parent_id"
        in: "query"
        description: "Filter on a children of a particular space."
        required: false
        type: "string"
      - name: "creator_id"
        in: "query"
        description: "Filter on dashboards created by a particular user."
        required: false
        type: "string"
      responses:
        200:
          description: "spaces"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Space"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Space"
      x-looker-status: "beta"
  /spaces/{space_id}:
    get:
      tags:
      - "Space"
      summary: "Get Space"
      description: "### Get information about the space with a specific id."
      operationId: "space"
      parameters:
      - name: "space_id"
        in: "path"
        description: "Id of space"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Space"
          schema:
            $ref: "#/definitions/Space"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Space"
      x-looker-status: "beta"
    delete:
      tags:
      - "Space"
      summary: "Delete Space"
      description: "### Delete the space with a specific id including any children\
        \ spaces.\n**DANGER** this will delete all looks and dashboards in the space.\n"
      operationId: "delete_space"
      parameters:
      - name: "space_id"
        in: "path"
        description: "Id of space"
        required: true
        type: "string"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Space"
      x-looker-status: "beta"
    patch:
      tags:
      - "Space"
      summary: "Update Space"
      description: "### Update the space with a specific id."
      operationId: "update_space"
      parameters:
      - name: "space_id"
        in: "path"
        description: "Id of space"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Space"
        required: true
        schema:
          $ref: "#/definitions/Space"
      responses:
        200:
          description: "Space"
          schema:
            $ref: "#/definitions/Space"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Space"
      x-looker-status: "beta"
  /spaces/{space_id}/ancestors:
    get:
      tags:
      - "Space"
      summary: "Get Space Ancestors"
      description: "### Get the ancestors of a space"
      operationId: "space_ancestors"
      parameters:
      - name: "space_id"
        in: "path"
        description: "Id of space"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Spaces"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Space"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Space"
      x-looker-status: "beta"
  /spaces/{space_id}/children:
    get:
      tags:
      - "Space"
      summary: "Get Space Children"
      description: "### Get the children of a space."
      operationId: "space_children"
      parameters:
      - name: "space_id"
        in: "path"
        description: "Id of space"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Requested page."
        required: false
        type: "integer"
        format: "int64"
      - name: "per_page"
        in: "query"
        description: "Results per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "sorts"
        in: "query"
        description: "Fields to sort by."
        required: false
        type: "string"
      responses:
        200:
          description: "Spaces"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Space"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Space"
      x-looker-status: "beta"
  /spaces/{space_id}/children/search:
    get:
      tags:
      - "Space"
      summary: "Search Space Children"
      description: "### Search the children of a space"
      operationId: "space_children_search"
      parameters:
      - name: "space_id"
        in: "path"
        description: "Id of space"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "sorts"
        in: "query"
        description: "Fields to sort by."
        required: false
        type: "string"
      - name: "name"
        in: "query"
        description: "Match Space name."
        required: false
        type: "string"
      responses:
        200:
          description: "Spaces"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Space"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Space"
      x-looker-status: "beta"
  /spaces/{space_id}/dashboards:
    get:
      tags:
      - "Space"
      summary: "Get Space Dashboards"
      description: "### Get the dashboards in a space"
      operationId: "space_dashboards"
      parameters:
      - name: "space_id"
        in: "path"
        description: "Id of space"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Dashboard"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Dashboard"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Space"
      x-looker-status: "beta"
  /spaces/{space_id}/looks:
    get:
      tags:
      - "Space"
      summary: "Get Space Looks"
      description: "### Get the looks in a space"
      operationId: "space_looks"
      parameters:
      - name: "space_id"
        in: "path"
        description: "Id of space"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Looks"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LookWithQuery"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Space"
      x-looker-status: "beta"
  /spaces/{space_id}/parent:
    get:
      tags:
      - "Space"
      summary: "Get Space Parent"
      description: "### Get the parent of a space"
      operationId: "space_parent"
      parameters:
      - name: "space_id"
        in: "path"
        description: "Id of space"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Space"
          schema:
            $ref: "#/definitions/Space"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Space"
      x-looker-status: "beta"
  /sql_queries:
    post:
      tags:
      - "SqlQuery"
      summary: "Create SQL Runner Query"
      description: "Create a SQL Runner query."
      operationId: "create_sql_query"
      parameters:
      - in: "body"
        name: "body"
        description: "SQL Runner Query"
        required: true
        schema:
          $ref: "#/definitions/SqlQueryCreate"
      responses:
        200:
          description: "SQL Runner Query"
          schema:
            $ref: "#/definitions/SqlQuery"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "SqlQuery"
      x-looker-status: "beta"
  /sql_queries/{slug}:
    get:
      tags:
      - "SqlQuery"
      summary: "Get SQL Runner Query"
      description: "Get a SQL Runner query."
      operationId: "sql_query"
      parameters:
      - name: "slug"
        in: "path"
        description: "slug of query"
        required: true
        type: "string"
      responses:
        200:
          description: "SQL Runner Query"
          schema:
            $ref: "#/definitions/SqlQuery"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "SqlQuery"
      x-looker-status: "beta"
  /timezones:
    get:
      tags:
      - "Config"
      summary: "Get All Timezones"
      description: "### Get a list of timezones that Looker supports (e.g. useful\
        \ for scheduling tasks).\n"
      operationId: "all_timezones"
      parameters: []
      responses:
        200:
          description: "Timezone"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Timezone"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Config"
      x-looker-status: "stable"
  /user:
    get:
      tags:
      - "User"
      summary: "Get Current User"
      description: "### Get information about the current user; i.e. the user account\
        \ currently calling the API.\n"
      operationId: "me"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Current user."
          schema:
            $ref: "#/definitions/User"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /user_attributes:
    get:
      tags:
      - "UserAttribute"
      summary: "Get All User Attributes"
      description: "### Get information about all user attributes.\n"
      operationId: "all_user_attributes"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "sorts"
        in: "query"
        description: "Fields to sort by."
        required: false
        type: "string"
      responses:
        200:
          description: "User Attribute"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserAttribute"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "UserAttribute"
      x-looker-status: "stable"
    post:
      tags:
      - "UserAttribute"
      summary: "Create User Attribute"
      description: "### Create a new user attribute.\n"
      operationId: "create_user_attribute"
      parameters:
      - in: "body"
        name: "body"
        description: "User Attribute"
        required: false
        schema:
          $ref: "#/definitions/UserAttribute"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "User Attribute"
          schema:
            $ref: "#/definitions/UserAttribute"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "UserAttribute"
      x-looker-status: "stable"
  /user_attributes/{user_attribute_id}:
    get:
      tags:
      - "UserAttribute"
      summary: "Get User Attribute"
      description: "### Get information about a user attribute.\n"
      operationId: "user_attribute"
      parameters:
      - name: "user_attribute_id"
        in: "path"
        description: "Id of user attribute"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "User Attribute"
          schema:
            $ref: "#/definitions/UserAttribute"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "UserAttribute"
      x-looker-status: "stable"
    delete:
      tags:
      - "UserAttribute"
      summary: "Delete User Attribute"
      description: "### Delete a user attribute (admin only).\n"
      operationId: "delete_user_attribute"
      parameters:
      - name: "user_attribute_id"
        in: "path"
        description: "Id of user_attribute"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "UserAttribute"
      x-looker-status: "stable"
    patch:
      tags:
      - "UserAttribute"
      summary: "Update User Attribute"
      description: "### Update a user attribute definition.\n"
      operationId: "update_user_attribute"
      parameters:
      - name: "user_attribute_id"
        in: "path"
        description: "Id of user attribute"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "User Attribute"
        required: true
        schema:
          $ref: "#/definitions/UserAttribute"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "User Attribute"
          schema:
            $ref: "#/definitions/UserAttribute"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "UserAttribute"
      x-looker-status: "stable"
  /user_attributes/{user_attribute_id}/group_values:
    get:
      tags:
      - "UserAttribute"
      summary: "Get User Attribute Group Values"
      description: "### Returns all values of a user attribute defined by user groups,\
        \ in precedence order.\n\nA user may be a member of multiple groups which\
        \ define different values for a given user attribute.\nThe order of group-values\
        \ in the response determines precedence for selecting which group-value applies\n\
        to a given user.  For more information, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).\n\
        \nResults will only include groups that the caller's user account has permission\
        \ to see.\n"
      operationId: "all_user_attribute_group_values"
      parameters:
      - name: "user_attribute_id"
        in: "path"
        description: "Id of user attribute"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "All group values for attribute."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserAttributeGroupValue"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "UserAttribute"
      x-looker-status: "stable"
    post:
      tags:
      - "UserAttribute"
      summary: "Set User Attribute Group Values"
      description: "### Define values for a user attribute across a set of groups,\
        \ in priority order.\n\nThis function defines all values for a user attribute\
        \ defined by user groups. This is a global setting, potentially affecting\n\
        all users in the system. This function replaces any existing group value definitions\
        \ for the indicated user attribute.\n\nThe value of a user attribute for a\
        \ given user is determined by searching the following locations, in this order:\n\
        \n1. the user's account settings\n2. the groups that the user is a member\
        \ of\n3. the default value of the user attribute, if any\n\nThe user may be\
        \ a member of multiple groups which define different values for that user\
        \ attribute. The order of items in the group_values parameter\ndetermines\
        \ which group takes priority for that user. Lowest array index wins.\n\nAn\
        \ alternate method to indicate the selection precedence of group-values is\
        \ to assign numbers to the 'rank' property of each\ngroup-value object in\
        \ the array. Lowest 'rank' value wins. If you use this technique, you must\
        \ assign a\nrank value to every group-value object in the array.\n\nTo set\
        \ a user attribute value for a single user, see [Set User Attribute User Value](#!/User/set_user_attribute_user_value).\n\
        To set a user attribute value for all members of a group, see [Set User Attribute\
        \ Group Value](#!/Group/update_user_attribute_group_value).\n"
      operationId: "set_user_attribute_group_values"
      parameters:
      - name: "user_attribute_id"
        in: "path"
        description: "Id of user attribute"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Array of group values."
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/UserAttributeGroupValue"
      responses:
        200:
          description: "Array of group values."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserAttributeGroupValue"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "UserAttribute"
      x-looker-status: "stable"
  /users:
    get:
      tags:
      - "User"
      summary: "Get All Users"
      description: "### Get information about all users.\n"
      operationId: "all_users"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Requested page."
        required: false
        type: "integer"
        format: "int64"
      - name: "per_page"
        in: "query"
        description: "Results per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "sorts"
        in: "query"
        description: "Fields to sort by."
        required: false
        type: "string"
      - name: "ids"
        in: "query"
        description: "Optional list of ids to get specific users."
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "csv"
      responses:
        200:
          description: "All users."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    post:
      tags:
      - "User"
      summary: "Create User"
      description: "### Create a user with the specified information.\n"
      operationId: "create_user"
      parameters:
      - in: "body"
        name: "body"
        description: "User"
        required: false
        schema:
          $ref: "#/definitions/User"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Created User"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/credential/{credential_type}/{credential_id}:
    get:
      tags:
      - "User"
      summary: "Get User by Credential Id"
      description: "### Get information about the user with a credential of given\
        \ type with specific id.\n\nThis is used to do things like find users by their\
        \ embed external_user_id. Or, find the user with\na given api3 client_id,\
        \ etc. The 'credential_type' matchs the 'type' name of the various credential\n\
        types. It must be one of the values listed in the table below. The 'credential_id'\
        \ is your unique Id\nfor the user and is specific to each type of credential.\n\
        \nAn example using the Ruby sdk might look like:\n\n`sdk.user_for_credential('embed',\
        \ 'customer-4959425')`\n\nThis table shows the supported 'Credential Type'\
        \ strings. The right column is for reference; it shows\nwhich field in the\
        \ given credential type is actually searched when finding a user with the\
        \ supplied\n'credential_id'.\n\n| Credential Types | Id Field Matched |\n\
        | ---------------- | ---------------- |\n| email            | email      \
        \      |\n| google           | google_user_id   |\n| saml             | saml_user_id\
        \     |\n| oidc             | oidc_user_id     |\n| ldap             | ldap_id\
        \          |\n| api              | token            |\n| api3            \
        \ | client_id        |\n| embed            | external_user_id |\n| looker_openid\
        \    | email            |\n\nNOTE: The 'api' credential type was only used\
        \ with the legacy Looker query API and is no longer supported. The credential\
        \ type for API you are currently looking at is 'api3'.\n\n"
      operationId: "user_for_credential"
      parameters:
      - name: "credential_type"
        in: "path"
        description: "Type name of credential"
        required: true
        type: "string"
      - name: "credential_id"
        in: "path"
        description: "Id of credential"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Specified user."
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/search:
    get:
      tags:
      - "User"
      summary: "Search Users"
      description: "### Search users.\n"
      operationId: "search_users"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Requested page."
        required: false
        type: "integer"
        format: "int64"
      - name: "per_page"
        in: "query"
        description: "Results per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "sorts"
        in: "query"
        description: "Fields to sort by."
        required: false
        type: "string"
      - name: "id"
        in: "query"
        description: "Match User Id."
        required: false
        type: "integer"
        format: "int64"
      - name: "first_name"
        in: "query"
        description: "Match First name."
        required: false
        type: "string"
      - name: "last_name"
        in: "query"
        description: "Match Last name."
        required: false
        type: "string"
      - name: "verified_looker_employee"
        in: "query"
        description: "Search for user accounts associated with Looker employees"
        required: false
        type: "boolean"
      - name: "email"
        in: "query"
        description: "Search for the user with this email address"
        required: false
        type: "string"
      - name: "is_disabled"
        in: "query"
        description: "Search for disabled user accounts"
        required: false
        type: "boolean"
      - name: "filter_or"
        in: "query"
        description: "Combine given search params in a boolean OR expression"
        required: false
        type: "boolean"
      - name: "content_metadata_id"
        in: "query"
        description: "Search for users who have access to this content_metadata item"
        required: false
        type: "integer"
        format: "int64"
      - name: "group_id"
        in: "query"
        description: "Search for users who are direct members of this group"
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Matching users."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/search/names/{pattern}:
    get:
      tags:
      - "User"
      summary: "Search User Names"
      description: "### Search users where first_name OR last_name OR email matches\
        \ a string.\n\nThe results will be AND'd with any additional search parameters\
        \ that are (optionally) included.\n"
      operationId: "search_users_names"
      parameters:
      - name: "pattern"
        in: "path"
        description: "Pattern to match."
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Requested page."
        required: false
        type: "integer"
        format: "int64"
      - name: "per_page"
        in: "query"
        description: "Results per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "sorts"
        in: "query"
        description: "Fields to sort by."
        required: false
        type: "string"
      - name: "id"
        in: "query"
        description: "Match User Id."
        required: false
        type: "integer"
        format: "int64"
      - name: "first_name"
        in: "query"
        description: "Match First name."
        required: false
        type: "string"
      - name: "last_name"
        in: "query"
        description: "Match Last name."
        required: false
        type: "string"
      - name: "verified_looker_employee"
        in: "query"
        description: "Match Verified Looker employee."
        required: false
        type: "boolean"
      - name: "email"
        in: "query"
        description: "Match Email Address."
        required: false
        type: "string"
      - name: "is_disabled"
        in: "query"
        description: "Match Is disabled."
        required: false
        type: "boolean"
      responses:
        200:
          description: "Matching users."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}:
    get:
      tags:
      - "User"
      summary: "Get User by Id"
      description: "### Get information about the user with a specific id.\n\nIf the\
        \ caller is an admin or the caller is the user being specified, then full\
        \ user information will\nbe returned. Otherwise, a minimal 'public' variant\
        \ of the user information will be returned. This contains\nThe user name and\
        \ avatar url, but no sensitive information.\n"
      operationId: "user"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Specified user."
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    delete:
      tags:
      - "User"
      summary: "Delete User"
      description: "### Delete the user with a specific id.\n\n**DANGER** this will\
        \ delete the user and all looks and other information owned by the user.\n"
      operationId: "delete_user"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Id of user"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "User successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Permission Denied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    patch:
      tags:
      - "User"
      summary: "Update User"
      description: "### Update information about the user with a specific id.\n"
      operationId: "update_user"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Id of user"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "User"
        required: true
        schema:
          $ref: "#/definitions/User"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "New state for specified user."
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/access_filters:
    get:
      tags:
      - "User"
      summary: "Get All Access Filters"
      description: "### NOTE: this feature is completely end of life and has been\
        \ removed from the product."
      operationId: "all_user_access_filters"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Access Filter"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AccessFilter"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      deprecated: true
      x-swagger-router-controller: "User"
      x-looker-status: "deprecated"
    post:
      tags:
      - "User"
      summary: "Create Access Filter"
      description: "### NOTE: this feature is completely end of life and has been\
        \ removed from the product."
      operationId: "create_user_access_filter"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Access Filter"
        required: false
        schema:
          $ref: "#/definitions/AccessFilter"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Access Filter"
          schema:
            $ref: "#/definitions/AccessFilter"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      deprecated: true
      x-swagger-router-controller: "User"
      x-looker-status: "deprecated"
  /users/{user_id}/access_filters/{access_filter_id}:
    get:
      tags:
      - "User"
      summary: "Get Access Filter"
      description: "### NOTE: this feature is completely end of life and has been\
        \ removed from the product."
      operationId: "user_access_filter"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "access_filter_id"
        in: "path"
        description: "Id of Access Filter"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Access Filter"
          schema:
            $ref: "#/definitions/AccessFilter"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      deprecated: true
      x-swagger-router-controller: "User"
      x-looker-status: "deprecated"
    delete:
      tags:
      - "User"
      summary: "Delete Access Filter"
      description: "### NOTE: this feature is completely end of life and has been\
        \ removed from the product."
      operationId: "delete_user_access_filter"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "access_filter_id"
        in: "path"
        description: "id of Access Filter"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      deprecated: true
      x-swagger-router-controller: "User"
      x-looker-status: "deprecated"
    patch:
      tags:
      - "User"
      summary: "Update Access Filter"
      description: "### NOTE: this feature is completely end of life and has been\
        \ removed from the product."
      operationId: "update_user_access_filter"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "access_filter_id"
        in: "path"
        description: "id of Access Filter"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Access Filter"
        required: true
        schema:
          $ref: "#/definitions/AccessFilter"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Access Filter"
          schema:
            $ref: "#/definitions/AccessFilter"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      deprecated: true
      x-swagger-router-controller: "User"
      x-looker-status: "deprecated"
  /users/{user_id}/attribute_values:
    get:
      tags:
      - "User"
      summary: "Get User Attribute Values"
      description: "### Get user attribute values for a given user.\n\nReturns the\
        \ values of specified user attributes (or all user attributes) for a certain\
        \ user.\n\nA value for each user attribute is searched for in the following\
        \ locations, in this order:\n1. in the user's account information\n1. in groups\
        \ that the user is a member of\n1. the default value of the user attribute\n\
        \nIf more than one group has a value defined for a user attribute, the group\
        \ with the lowest rank wins.\n\nThe response will only include user attributes\
        \ for which values were found. Use `include_unset=true` to include\nempty\
        \ records for user attributes with no value.\n\nThe value of all hidden user\
        \ attributes will be blank.\n"
      operationId: "user_attribute_user_values"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "user_attribute_ids"
        in: "query"
        description: "Specific user attributes to request. Omit or leave blank to\
          \ request all user attributes."
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "csv"
      - name: "all_values"
        in: "query"
        description: "If true, returns all values in the search path instead of just\
          \ the first value found. Useful for debugging group precedence."
        required: false
        type: "boolean"
      - name: "include_unset"
        in: "query"
        description: "If true, returns an empty record for each requested attribute\
          \ that has no user, group, or default value."
        required: false
        type: "boolean"
      responses:
        200:
          description: "Value of user attribute."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserAttributeWithValue"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/attribute_values/{user_attribute_id}:
    delete:
      tags:
      - "User"
      summary: "Delete User Attribute User Value"
      description: "### Delete a user attribute value from a user's account settings.\n\
        \nAfter the user attribute value is deleted from the user's account settings,\
        \ subsequent requests\nfor the user attribute value for this user will draw\
        \ from the user's groups or the default\nvalue of the user attribute. See\
        \ [Get User Attribute Values](#!/User/user_attribute_user_values) for more\n\
        information about how user attribute values are resolved.\n"
      operationId: "delete_user_attribute_user_value"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "user_attribute_id"
        in: "path"
        description: "Id of user attribute"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    patch:
      tags:
      - "User"
      summary: "Set User Attribute User Value"
      description: "### Store a custom value for a user attribute in a user's account\
        \ settings.\n\nPer-user user attribute values take precedence over group or\
        \ default values.\n"
      operationId: "set_user_attribute_user_value"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "user_attribute_id"
        in: "path"
        description: "Id of user attribute"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "New attribute value for user."
        required: true
        schema:
          $ref: "#/definitions/UserAttributeWithValue"
      responses:
        200:
          description: "User attribute value."
          schema:
            $ref: "#/definitions/UserAttributeWithValue"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/credentials_api:
    get:
      tags:
      - "User"
      summary: "Get API Credential"
      description: "### API login information for the specified user. This is for\
        \ 'API Users' used for the 'old' query API. THIS FEATURE HAS BEEN REMOVED."
      operationId: "user_credentials_api"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "API Credential"
          schema:
            $ref: "#/definitions/CredentialsApi"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      deprecated: true
      x-swagger-router-controller: "User"
      x-looker-status: "deprecated"
    post:
      tags:
      - "User"
      summary: "Create API Credential"
      description: "### Create API Credential.\nSUPPORT FOR THIS HAS BEEN REMOVED.\n"
      operationId: "create_user_credentials_api"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Id of user"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "API Credential"
        required: false
        schema:
          $ref: "#/definitions/CredentialsApi"
      responses:
        200:
          description: "API Credential"
          schema:
            $ref: "#/definitions/CredentialsApi"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      deprecated: true
      x-swagger-router-controller: "User"
      x-looker-status: "deprecated"
    delete:
      tags:
      - "User"
      summary: "Delete API Credential"
      description: "### API login information for the specified user. This is for\
        \ 'API Users' used for the 'old' query API. THIS FEATURE HAS BEEN REMOVED."
      operationId: "delete_user_credentials_api"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      deprecated: true
      x-swagger-router-controller: "User"
      x-looker-status: "deprecated"
  /users/{user_id}/credentials_api3:
    get:
      tags:
      - "User"
      summary: "Get All API 3 Credentials"
      description: "### API 3 login information for the specified user. This is for\
        \ the newer API keys that can be added for any user."
      operationId: "all_user_credentials_api3s"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "API 3 Credential"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CredentialsApi3"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    post:
      tags:
      - "User"
      summary: "Create API 3 Credential"
      description: "### API 3 login information for the specified user. This is for\
        \ the newer API keys that can be added for any user."
      operationId: "create_user_credentials_api3"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "API 3 Credential"
        required: false
        schema:
          $ref: "#/definitions/CredentialsApi3"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "API 3 Credential"
          schema:
            $ref: "#/definitions/CredentialsApi3"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/credentials_api3/{credentials_api3_id}:
    get:
      tags:
      - "User"
      summary: "Get API 3 Credential"
      description: "### API 3 login information for the specified user. This is for\
        \ the newer API keys that can be added for any user."
      operationId: "user_credentials_api3"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "credentials_api3_id"
        in: "path"
        description: "Id of API 3 Credential"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "API 3 Credential"
          schema:
            $ref: "#/definitions/CredentialsApi3"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    delete:
      tags:
      - "User"
      summary: "Delete API 3 Credential"
      description: "### API 3 login information for the specified user. This is for\
        \ the newer API keys that can be added for any user."
      operationId: "delete_user_credentials_api3"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "credentials_api3_id"
        in: "path"
        description: "id of API 3 Credential"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/credentials_email:
    get:
      tags:
      - "User"
      summary: "Get Email/Password Credential"
      description: "### Email/password login information for the specified user."
      operationId: "user_credentials_email"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Email/Password Credential"
          schema:
            $ref: "#/definitions/CredentialsEmail"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    post:
      tags:
      - "User"
      summary: "Create Email/Password Credential"
      description: "### Email/password login information for the specified user."
      operationId: "create_user_credentials_email"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Email/Password Credential"
        required: false
        schema:
          $ref: "#/definitions/CredentialsEmail"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Email/Password Credential"
          schema:
            $ref: "#/definitions/CredentialsEmail"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    delete:
      tags:
      - "User"
      summary: "Delete Email/Password Credential"
      description: "### Email/password login information for the specified user."
      operationId: "delete_user_credentials_email"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    patch:
      tags:
      - "User"
      summary: "Update Email/Password Credential"
      description: "### Email/password login information for the specified user."
      operationId: "update_user_credentials_email"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Email/Password Credential"
        required: true
        schema:
          $ref: "#/definitions/CredentialsEmail"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Email/Password Credential"
          schema:
            $ref: "#/definitions/CredentialsEmail"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/credentials_email/password_reset:
    post:
      tags:
      - "User"
      summary: "Create Password Reset Token"
      description: "### Create a password reset token.\nThis will create a cryptographically\
        \ secure random password reset token for the user.\nIf the user already has\
        \ a password reset token then this invalidates the old token and creates a\
        \ new one.\nThe token is expressed as the 'password_reset_url' of the user's\
        \ email/password credential object.\nThis takes an optional 'expires' param\
        \ to indicate if the new token should be an expiring token.\nTokens that expire\
        \ are typically used for self-service password resets for existing users.\n\
        Invitation emails for new users typically are not set to expire.\nThe expire\
        \ period is always 60 minutes when expires is enabled.\nThis method can be\
        \ called with an empty body.\n"
      operationId: "create_user_credentials_email_password_reset"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "expires"
        in: "query"
        description: "Expiring token."
        required: false
        type: "boolean"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "email/password credential"
          schema:
            $ref: "#/definitions/CredentialsEmail"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/credentials_embed:
    get:
      tags:
      - "User"
      summary: "Get All Embedding Credentials"
      description: "### Embed login information for the specified user."
      operationId: "all_user_credentials_embeds"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Embedding Credential"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CredentialsEmbed"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/credentials_embed/{credentials_embed_id}:
    get:
      tags:
      - "User"
      summary: "Get Embedding Credential"
      description: "### Embed login information for the specified user."
      operationId: "user_credentials_embed"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "credentials_embed_id"
        in: "path"
        description: "Id of Embedding Credential"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Embedding Credential"
          schema:
            $ref: "#/definitions/CredentialsEmbed"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    delete:
      tags:
      - "User"
      summary: "Delete Embedding Credential"
      description: "### Embed login information for the specified user."
      operationId: "delete_user_credentials_embed"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "credentials_embed_id"
        in: "path"
        description: "id of Embedding Credential"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/credentials_google:
    get:
      tags:
      - "User"
      summary: "Get Google Auth Credential"
      description: "### Google authentication login information for the specified\
        \ user."
      operationId: "user_credentials_google"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Google Auth Credential"
          schema:
            $ref: "#/definitions/CredentialsGoogle"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    delete:
      tags:
      - "User"
      summary: "Delete Google Auth Credential"
      description: "### Google authentication login information for the specified\
        \ user."
      operationId: "delete_user_credentials_google"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/credentials_ldap:
    get:
      tags:
      - "User"
      summary: "Get LDAP Credential"
      description: "### LDAP login information for the specified user."
      operationId: "user_credentials_ldap"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "LDAP Credential"
          schema:
            $ref: "#/definitions/CredentialsLDAP"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    delete:
      tags:
      - "User"
      summary: "Delete LDAP Credential"
      description: "### LDAP login information for the specified user."
      operationId: "delete_user_credentials_ldap"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/credentials_looker_openid:
    get:
      tags:
      - "User"
      summary: "Get Looker OpenId Credential"
      description: "### Looker Openid login information for the specified user. Used\
        \ by Looker Analysts."
      operationId: "user_credentials_looker_openid"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Looker OpenId Credential"
          schema:
            $ref: "#/definitions/CredentialsLookerOpenid"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    delete:
      tags:
      - "User"
      summary: "Delete Looker OpenId Credential"
      description: "### Looker Openid login information for the specified user. Used\
        \ by Looker Analysts."
      operationId: "delete_user_credentials_looker_openid"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/credentials_oidc:
    get:
      tags:
      - "User"
      summary: "Get OIDC Auth Credential"
      description: "### OpenID Connect (OIDC) authentication login information for\
        \ the specified user."
      operationId: "user_credentials_oidc"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "OIDC Auth Credential"
          schema:
            $ref: "#/definitions/CredentialsOIDC"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    delete:
      tags:
      - "User"
      summary: "Delete OIDC Auth Credential"
      description: "### OpenID Connect (OIDC) authentication login information for\
        \ the specified user."
      operationId: "delete_user_credentials_oidc"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/credentials_saml:
    get:
      tags:
      - "User"
      summary: "Get Saml Auth Credential"
      description: "### Saml authentication login information for the specified user."
      operationId: "user_credentials_saml"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Saml Auth Credential"
          schema:
            $ref: "#/definitions/CredentialsSaml"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    delete:
      tags:
      - "User"
      summary: "Delete Saml Auth Credential"
      description: "### Saml authentication login information for the specified user."
      operationId: "delete_user_credentials_saml"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/credentials_totp:
    get:
      tags:
      - "User"
      summary: "Get Two-Factor Credential"
      description: "### Two-factor login information for the specified user."
      operationId: "user_credentials_totp"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Two-Factor Credential"
          schema:
            $ref: "#/definitions/CredentialsTotp"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    post:
      tags:
      - "User"
      summary: "Create Two-Factor Credential"
      description: "### Two-factor login information for the specified user."
      operationId: "create_user_credentials_totp"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Two-Factor Credential"
        required: false
        schema:
          $ref: "#/definitions/CredentialsTotp"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Two-Factor Credential"
          schema:
            $ref: "#/definitions/CredentialsTotp"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "Resource Already Exists"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    delete:
      tags:
      - "User"
      summary: "Delete Two-Factor Credential"
      description: "### Two-factor login information for the specified user."
      operationId: "delete_user_credentials_totp"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/roles:
    get:
      tags:
      - "User"
      summary: "Get User Roles"
      description: "### Get information about roles of a given user\n"
      operationId: "user_roles"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      - name: "direct_association_only"
        in: "query"
        description: "Get only roles associated directly with the user: exclude those\
          \ only associated through groups."
        required: false
        type: "boolean"
      responses:
        200:
          description: "Roles of user."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Role"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    put:
      tags:
      - "User"
      summary: "Set User Roles"
      description: "### Set roles of the user with a specific id.\n"
      operationId: "set_user_roles"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "array of roles ids for user"
        required: true
        schema:
          type: "array"
          items:
            type: "integer"
            format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Roles of user."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Role"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/sessions:
    get:
      tags:
      - "User"
      summary: "Get All Web Login Sessions"
      description: "### Web login session for the specified user."
      operationId: "all_user_sessions"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Web Login Session"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Session"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /users/{user_id}/sessions/{session_id}:
    get:
      tags:
      - "User"
      summary: "Get Web Login Session"
      description: "### Web login session for the specified user."
      operationId: "user_session"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "session_id"
        in: "path"
        description: "Id of Web Login Session"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Web Login Session"
          schema:
            $ref: "#/definitions/Session"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
    delete:
      tags:
      - "User"
      summary: "Delete Web Login Session"
      description: "### Web login session for the specified user."
      operationId: "delete_user_session"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of user"
        required: true
        type: "integer"
        format: "int64"
      - name: "session_id"
        in: "path"
        description: "id of Web Login Session"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted."
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
      x-looker-status: "stable"
  /versions:
    get:
      tags:
      - "Config"
      summary: "Get ApiVersion"
      description: "### Get information about all API versions supported by this Looker\
        \ instance.\n"
      operationId: "versions"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "ApiVersion"
          schema:
            $ref: "#/definitions/ApiVersion"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Config"
      x-looker-status: "stable"
  /whitelabel_configuration:
    get:
      tags:
      - "Config"
      summary: "Get Whitelabel configuration"
      description: "### This feature is enabled only by special license.\n### Gets\
        \ the whitelabel configuration, which includes hiding documentation links,\
        \ custom favicon uploading, etc.\n"
      operationId: "whitelabel_configuration"
      parameters:
      - name: "fields"
        in: "query"
        description: "Requested fields."
        required: false
        type: "string"
      responses:
        200:
          description: "Whitelabel configuration"
          schema:
            $ref: "#/definitions/WhitelabelConfiguration"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Config"
      x-looker-status: "beta"
    put:
      tags:
      - "Config"
      summary: "Update Whitelabel configuration"
      description: "### Update the whitelabel configuration\n"
      operationId: "update_whitelabel_configuration"
      parameters:
      - in: "body"
        name: "body"
        description: "Whitelabel configuration"
        required: true
        schema:
          $ref: "#/definitions/WhitelabelConfiguration"
      responses:
        200:
          description: "Whitelabel configuration"
          schema:
            $ref: "#/definitions/WhitelabelConfiguration"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ValidationError"
      x-swagger-router-controller: "Config"
      x-looker-status: "beta"
  /workspaces:
    get:
      tags:
      - "Workspace"
      summary: "Get All Workspaces"
      description: "### Get All Workspaces\n\nReturns all workspaces available to\
        \ the calling user.\n"
      operationId: "all_workspaces"
      parameters: []
      responses:
        200:
          description: "Workspace"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workspace"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Workspace"
      x-looker-status: "beta"
  /workspaces/{workspace_id}:
    get:
      tags:
      - "Workspace"
      summary: "Get Workspace"
      description: "### Get A Workspace\n\nReturns information about a workspace such\
        \ as the git status and selected branches\nof all projects available to the\
        \ caller's user account.\n\nA workspace defines which versions of project\
        \ files will be used to evaluate expressions\nand operations that use model\
        \ definitions - operations such as running queries or rendering dashboards.\n\
        Each project has its own git repository, and each project in a workspace may\
        \ be configured to reference\nparticular branch or revision within their respective\
        \ repositories.\n\nThere are two predefined workspaces available: \"production\"\
        \ and \"dev\".\n\nThe production workspace is shared across all Looker users.\
        \ Models in the production workspace are read-only.\nChanging files in production\
        \ is accomplished by modifying files in a git branch and using Pull Requests\n\
        to merge the changes from the dev branch into the production branch, and then\
        \ telling\nLooker to sync with production.\n\nThe dev workspace is local to\
        \ each Looker user. Changes made to project/model files in the dev workspace\
        \ only affect\nthat user, and only when the dev workspace is selected as the\
        \ active workspace for the API session.\n(See set_session_workspace()).\n\n\
        The dev workspace is NOT unique to an API session. Two applications accessing\
        \ the Looker API using\nthe same user account will see the same files in the\
        \ dev workspace. To avoid collisions between\nAPI clients it's best to have\
        \ each client login with API3 credentials for a different user account.\n\n\
        Changes made to files in a dev workspace are persistent across API sessions.\
        \ It's a good\nidea to commit any changes you've made to the git repository,\
        \ but not strictly required. Your modified files\nreside in a special user-specific\
        \ directory on the Looker server and will still be there when you login in\
        \ again\nlater and use update_session(workspace_id: \"dev\") to select the\
        \ dev workspace for the new API session.\n"
      operationId: "workspace"
      parameters:
      - name: "workspace_id"
        in: "path"
        description: "Id of the workspace "
        required: true
        type: "string"
      responses:
        200:
          description: "Workspace"
          schema:
            $ref: "#/definitions/Workspace"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Workspace"
      x-looker-status: "beta"
definitions:
  Error:
    required:
    - "documentation_url"
    - "message"
    properties:
      message:
        type: "string"
        description: "Error details"
        readOnly: true
        x-looker-nullable: true
      documentation_url:
        type: "string"
        format: "uri"
        description: "Documentation link"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  DashboardBase:
    properties:
      content_favorite_id:
        type: "integer"
        format: "int64"
        description: "Content Favorite Id"
        readOnly: true
        x-looker-nullable: true
      content_metadata_id:
        type: "integer"
        format: "int64"
        description: "Id of content metadata"
        readOnly: true
        x-looker-nullable: true
      description:
        type: "string"
        description: "Description"
        readOnly: true
        x-looker-nullable: true
      hidden:
        type: "boolean"
        description: "Is Hidden"
        readOnly: true
        x-looker-nullable: false
      id:
        type: "string"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      model:
        description: "Model"
        $ref: "#/definitions/LookModel"
      query_timezone:
        type: "string"
        description: "Timezone in which the Dashboard will run by default."
        readOnly: true
        x-looker-nullable: true
      readonly:
        type: "boolean"
        description: "Is Read-only"
        readOnly: true
        x-looker-nullable: false
      refresh_interval:
        type: "string"
        description: "Refresh Interval"
        readOnly: true
        x-looker-nullable: true
      refresh_interval_to_i:
        type: "integer"
        format: "int64"
        description: "Refresh Interval as Integer"
        readOnly: true
        x-looker-nullable: true
      space:
        description: "Space"
        $ref: "#/definitions/SpaceBase"
      title:
        type: "string"
        description: "Dashboard Title"
        readOnly: true
        x-looker-nullable: true
      user_id:
        type: "integer"
        format: "int64"
        description: "Id of User"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  SpaceBase:
    required:
    - "parent_id"
    properties:
      child_count:
        type: "integer"
        format: "int64"
        description: "Children Count"
        readOnly: true
        x-looker-nullable: true
      content_metadata_id:
        type: "integer"
        format: "int64"
        description: "Id of content metadata"
        readOnly: true
        x-looker-nullable: true
      creator_id:
        type: "integer"
        format: "int64"
        description: "User Id of Creator"
        readOnly: true
        x-looker-nullable: true
      external_id:
        type: "string"
        description: "Embedder's Id if this space was autogenerated as an embedding\
          \ shared space via 'external_group_id' in an SSO embed login"
        readOnly: true
        x-looker-nullable: true
      id:
        type: "string"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      is_embed:
        type: "boolean"
        description: "Space is an embed space"
        readOnly: true
        x-looker-nullable: false
      is_embed_shared_root:
        type: "boolean"
        description: "Space is the root embed shared space"
        readOnly: true
        x-looker-nullable: false
      is_embed_users_root:
        type: "boolean"
        description: "Space is the root embed users space"
        readOnly: true
        x-looker-nullable: false
      is_personal:
        type: "boolean"
        description: "Space is a user's personal space"
        readOnly: true
        x-looker-nullable: false
      is_personal_descendant:
        type: "boolean"
        description: "Space is descendant of a user's personal space"
        readOnly: true
        x-looker-nullable: false
      is_shared_root:
        type: "boolean"
        description: "Space is the root shared space"
        readOnly: true
        x-looker-nullable: false
      is_users_root:
        type: "boolean"
        description: "Space is the root user space"
        readOnly: true
        x-looker-nullable: false
      name:
        type: "string"
        description: "Unique Name"
        readOnly: true
        x-looker-nullable: true
      parent_id:
        type: "string"
        description: "Id of Parent"
        x-looker-nullable: true
      is_root:
        type: "boolean"
        description: "(DEPRECATED) Space is the root shared space (alias of is_shared_root)"
        readOnly: true
        x-looker-deprecated: true
        x-looker-nullable: false
      is_user_root:
        type: "boolean"
        description: "(DEPRECATED) Space is the root user space (alias of is_users_root)"
        readOnly: true
        x-looker-deprecated: true
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  ValidationError:
    required:
    - "documentation_url"
    - "message"
    properties:
      message:
        type: "string"
        description: "Error details"
        readOnly: true
        x-looker-nullable: true
      errors:
        type: "array"
        description: "Error detail array"
        items:
          $ref: "#/definitions/ValidationErrorDetail"
        x-looker-nullable: true
      documentation_url:
        type: "string"
        format: "uri"
        description: "Documentation link"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  ValidationErrorDetail:
    required:
    - "documentation_url"
    properties:
      field:
        type: "string"
        description: "Field with error"
        readOnly: true
        x-looker-nullable: true
      code:
        type: "string"
        description: "Error code"
        readOnly: true
        x-looker-nullable: true
      message:
        type: "string"
        description: "Error info message"
        readOnly: true
        x-looker-nullable: true
      documentation_url:
        type: "string"
        format: "uri"
        description: "Documentation link"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  AccessFilter:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "ID of this AccessFilter"
        readOnly: true
        x-looker-nullable: false
      model:
        type: "string"
        description: "Model to which this filter applies"
        x-looker-nullable: true
      field:
        type: "string"
        description: "Field to which this filter applies"
        x-looker-nullable: true
      value:
        type: "string"
        description: "Value for this filter"
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  AccessToken:
    properties:
      access_token:
        type: "string"
        description: "Access Token used for API calls"
        readOnly: true
        x-looker-nullable: true
      token_type:
        type: "string"
        description: "Type of Token"
        readOnly: true
        x-looker-nullable: true
      expires_in:
        type: "integer"
        format: "int64"
        description: "Number of seconds before the token expires"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  ApiSession:
    properties:
      workspace_id:
        type: "string"
        description: "The id of active workspace for this session"
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  BackupConfiguration:
    properties:
      type:
        type: "string"
        description: "Type of backup: looker-s3 or custom-s3"
        x-looker-nullable: true
      custom_s3_bucket:
        type: "string"
        description: "Name of bucket for custom-s3 backups"
        x-looker-nullable: true
      custom_s3_bucket_region:
        type: "string"
        description: "Name of region where the bucket is located"
        x-looker-nullable: true
      custom_s3_key:
        type: "string"
        description: "(Write-Only) AWS S3 key used for custom-s3 backups"
        x-looker-write-only: true
        x-looker-nullable: true
      custom_s3_secret:
        type: "string"
        description: "(Write-Only) AWS S3 secret used for custom-s3 backups"
        x-looker-write-only: true
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  ContentFavorite:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      user_id:
        type: "integer"
        format: "int64"
        description: "User Id which owns this ContentFavorite"
        x-looker-nullable: true
      content_metadata_id:
        type: "integer"
        format: "int64"
        description: "Content Metadata Id associated with this ContentFavorite"
        x-looker-nullable: true
      look_id:
        type: "integer"
        format: "int64"
        description: "Id of a look"
        readOnly: true
        x-looker-nullable: true
      dashboard_id:
        type: "integer"
        format: "int64"
        description: "Id of a dashboard"
        readOnly: true
        x-looker-nullable: true
      look:
        description: "Associated Look"
        $ref: "#/definitions/LookBasic"
      dashboard:
        description: "Associated Dashboard"
        $ref: "#/definitions/DashboardBase"
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  ContentMetaGroupUser:
    properties:
      id:
        type: "string"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      content_metadata_id:
        type: "string"
        description: "Id of associated Content Metadata"
        readOnly: true
        x-looker-nullable: true
      permission_type:
        type: "string"
        description: "Type of permission: \"view\" or \"edit\""
        readOnly: true
        x-looker-nullable: true
      group_id:
        type: "integer"
        format: "int64"
        description: "ID of associated group"
        readOnly: true
        x-looker-nullable: true
      user_id:
        type: "integer"
        format: "int64"
        description: "ID of associated user"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  ContentMeta:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      name:
        type: "string"
        description: "Name or title of underlying content"
        readOnly: true
        x-looker-nullable: true
      parent_id:
        type: "integer"
        format: "int64"
        description: "Id of Parent Content"
        readOnly: true
        x-looker-nullable: true
      space_id:
        type: "string"
        description: "Id of associated space when content_type is \"space\""
        readOnly: true
        x-looker-nullable: true
      dashboard_id:
        type: "string"
        description: "Id of associated dashboard when content_type is \"dashboard\""
        readOnly: true
        x-looker-nullable: true
      look_id:
        type: "integer"
        format: "int64"
        description: "Id of associated look when content_type is \"look\""
        readOnly: true
        x-looker-nullable: true
      content_type:
        type: "string"
        description: "Content Type (\"dashboard\", \"look\", or \"space\")"
        readOnly: true
        x-looker-nullable: true
      inherits:
        type: "boolean"
        description: "Whether content inherits its access levels from parent"
        x-looker-nullable: false
      inheriting_id:
        type: "integer"
        format: "int64"
        description: "Id of Inherited Content"
        readOnly: true
        x-looker-nullable: true
      slug:
        type: "string"
        description: "Content Slug"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  ContentView:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      look_id:
        type: "integer"
        format: "int64"
        description: "Id of viewed Look"
        readOnly: true
        x-looker-nullable: true
      dashboard_id:
        type: "integer"
        format: "int64"
        description: "Id of the viewed Dashboard"
        readOnly: true
        x-looker-nullable: true
      content_metadata_id:
        type: "integer"
        format: "int64"
        description: "Content metadata id of the Look or Dashboard"
        readOnly: true
        x-looker-nullable: true
      user_id:
        type: "integer"
        format: "int64"
        description: "Id of user content was viewed by"
        readOnly: true
        x-looker-nullable: true
      group_id:
        type: "integer"
        format: "int64"
        description: "Id of group content was viewed by"
        readOnly: true
        x-looker-nullable: true
      view_count:
        type: "integer"
        format: "int64"
        description: "Number of times piece of content was viewed"
        readOnly: true
        x-looker-nullable: true
      favorite_count:
        type: "integer"
        format: "int64"
        description: "Number of times piece of content was favorited"
        readOnly: true
        x-looker-nullable: true
      last_viewed_at:
        type: "string"
        description: "Date the piece of content was last viewed"
        readOnly: true
        x-looker-nullable: true
      start_of_week_date:
        type: "string"
        description: "Week start date for the view and favorite count during that\
          \ given week"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  CredentialsApi3:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      client_id:
        type: "string"
        description: "API key client_id"
        readOnly: true
        x-looker-nullable: true
      created_at:
        type: "string"
        description: "Timestamp for the creation of this credential"
        readOnly: true
        x-looker-nullable: true
      is_disabled:
        type: "boolean"
        description: "Has this credential been disabled?"
        readOnly: true
        x-looker-nullable: false
      type:
        type: "string"
        description: "Short name for the type of this kind of credential"
        readOnly: true
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  CredentialsApi:
    properties:
      token:
        type: "string"
        description: "API key token"
        readOnly: true
        x-looker-nullable: true
      created_at:
        type: "string"
        description: "Timestamp for the creation of this credential"
        readOnly: true
        x-looker-nullable: true
      is_disabled:
        type: "boolean"
        description: "Has this credential been disabled?"
        readOnly: true
        x-looker-nullable: false
      type:
        type: "string"
        description: "Short name for the type of this kind of credential"
        readOnly: true
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  CredentialsEmail:
    properties:
      created_at:
        type: "string"
        description: "Timestamp for the creation of this credential"
        readOnly: true
        x-looker-nullable: true
      email:
        type: "string"
        description: "EMail address used for user login"
        x-looker-nullable: true
      forced_password_reset_at_next_login:
        type: "boolean"
        description: "Force the user to change their password upon their next login"
        x-looker-nullable: false
      is_disabled:
        type: "boolean"
        description: "Has this credential been disabled?"
        readOnly: true
        x-looker-nullable: false
      logged_in_at:
        type: "string"
        description: "Timestamp for most recent login using credential"
        readOnly: true
        x-looker-nullable: true
      password_reset_url:
        type: "string"
        description: "Url with one-time use secret token that the user can use to\
          \ reset password"
        readOnly: true
        x-looker-nullable: true
      type:
        type: "string"
        description: "Short name for the type of this kind of credential"
        readOnly: true
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      user_url:
        type: "string"
        format: "uri"
        description: "Link to get this user"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  CredentialsEmbed:
    properties:
      created_at:
        type: "string"
        description: "Timestamp for the creation of this credential"
        readOnly: true
        x-looker-nullable: true
      external_group_id:
        type: "string"
        description: "Embedder's id for a group to which this user was added during\
          \ the most recent login"
        readOnly: true
        x-looker-nullable: true
      external_user_id:
        type: "string"
        description: "Embedder's unique id for the user"
        readOnly: true
        x-looker-nullable: true
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      is_disabled:
        type: "boolean"
        description: "Has this credential been disabled?"
        readOnly: true
        x-looker-nullable: false
      logged_in_at:
        type: "string"
        description: "Timestamp for most recent login using credential"
        readOnly: true
        x-looker-nullable: true
      type:
        type: "string"
        description: "Short name for the type of this kind of credential"
        readOnly: true
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  CredentialsGoogle:
    properties:
      created_at:
        type: "string"
        description: "Timestamp for the creation of this credential"
        readOnly: true
        x-looker-nullable: true
      domain:
        type: "string"
        description: "Google domain"
        readOnly: true
        x-looker-nullable: true
      email:
        type: "string"
        description: "EMail address"
        readOnly: true
        x-looker-nullable: true
      google_user_id:
        type: "string"
        description: "Google's Unique ID for this user"
        readOnly: true
        x-looker-nullable: true
      is_disabled:
        type: "boolean"
        description: "Has this credential been disabled?"
        readOnly: true
        x-looker-nullable: false
      logged_in_at:
        type: "string"
        description: "Timestamp for most recent login using credential"
        readOnly: true
        x-looker-nullable: true
      type:
        type: "string"
        description: "Short name for the type of this kind of credential"
        readOnly: true
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  CredentialsLDAP:
    properties:
      created_at:
        type: "string"
        description: "Timestamp for the creation of this credential"
        readOnly: true
        x-looker-nullable: true
      email:
        type: "string"
        description: "EMail address"
        readOnly: true
        x-looker-nullable: true
      is_disabled:
        type: "boolean"
        description: "Has this credential been disabled?"
        readOnly: true
        x-looker-nullable: false
      ldap_dn:
        type: "string"
        description: "LDAP Distinguished name for this user (as-of the last login)"
        readOnly: true
        x-looker-nullable: true
      ldap_id:
        type: "string"
        description: "LDAP Unique ID for this user"
        readOnly: true
        x-looker-nullable: true
      logged_in_at:
        type: "string"
        description: "Timestamp for most recent login using credential"
        readOnly: true
        x-looker-nullable: true
      type:
        type: "string"
        description: "Short name for the type of this kind of credential"
        readOnly: true
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  CredentialsLookerOpenid:
    properties:
      created_at:
        type: "string"
        description: "Timestamp for the creation of this credential"
        readOnly: true
        x-looker-nullable: true
      email:
        type: "string"
        description: "EMail address used for user login"
        readOnly: true
        x-looker-nullable: true
      is_disabled:
        type: "boolean"
        description: "Has this credential been disabled?"
        readOnly: true
        x-looker-nullable: false
      logged_in_at:
        type: "string"
        description: "Timestamp for most recent login using credential"
        readOnly: true
        x-looker-nullable: true
      logged_in_ip:
        type: "string"
        description: "IP address of client for most recent login using credential"
        readOnly: true
        x-looker-nullable: true
      type:
        type: "string"
        description: "Short name for the type of this kind of credential"
        readOnly: true
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      user_url:
        type: "string"
        format: "uri"
        description: "Link to get this user"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  CredentialsOIDC:
    properties:
      created_at:
        type: "string"
        description: "Timestamp for the creation of this credential"
        readOnly: true
        x-looker-nullable: true
      email:
        type: "string"
        description: "EMail address"
        readOnly: true
        x-looker-nullable: true
      is_disabled:
        type: "boolean"
        description: "Has this credential been disabled?"
        readOnly: true
        x-looker-nullable: false
      logged_in_at:
        type: "string"
        description: "Timestamp for most recent login using credential"
        readOnly: true
        x-looker-nullable: true
      oidc_user_id:
        type: "string"
        description: "OIDC OP's Unique ID for this user"
        readOnly: true
        x-looker-nullable: true
      type:
        type: "string"
        description: "Short name for the type of this kind of credential"
        readOnly: true
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  CredentialsSaml:
    properties:
      created_at:
        type: "string"
        description: "Timestamp for the creation of this credential"
        readOnly: true
        x-looker-nullable: true
      email:
        type: "string"
        description: "EMail address"
        readOnly: true
        x-looker-nullable: true
      is_disabled:
        type: "boolean"
        description: "Has this credential been disabled?"
        readOnly: true
        x-looker-nullable: false
      logged_in_at:
        type: "string"
        description: "Timestamp for most recent login using credential"
        readOnly: true
        x-looker-nullable: true
      saml_user_id:
        type: "string"
        description: "Saml IdP's Unique ID for this user"
        readOnly: true
        x-looker-nullable: true
      type:
        type: "string"
        description: "Short name for the type of this kind of credential"
        readOnly: true
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  CredentialsTotp:
    properties:
      created_at:
        type: "string"
        description: "Timestamp for the creation of this credential"
        readOnly: true
        x-looker-nullable: true
      is_disabled:
        type: "boolean"
        description: "Has this credential been disabled?"
        readOnly: true
        x-looker-nullable: false
      type:
        type: "string"
        description: "Short name for the type of this kind of credential"
        readOnly: true
        x-looker-nullable: true
      verified:
        type: "boolean"
        description: "User has verified"
        readOnly: true
        x-looker-nullable: false
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  DashboardElement:
    properties:
      body_text:
        type: "string"
        description: "Text tile body text"
        x-looker-nullable: true
      body_text_as_html:
        type: "string"
        description: "Text tile body text as Html"
        readOnly: true
        x-looker-nullable: true
      dashboard_id:
        type: "string"
        description: "Id of Dashboard"
        x-looker-nullable: true
      edit_uri:
        type: "string"
        format: "uri"
        description: "Relative path of URI of LookML file to edit the dashboard element\
          \ (LookML dashboard only)."
        readOnly: true
        x-looker-nullable: true
      id:
        type: "string"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      look:
        description: "Look"
        $ref: "#/definitions/LookWithQuery"
      look_id:
        type: "string"
        description: "Id Of Look"
        x-looker-nullable: true
      merge_result_id:
        type: "string"
        description: "ID of merge result"
        x-looker-nullable: true
      note_display:
        type: "string"
        description: "Note Display"
        x-looker-nullable: true
      note_state:
        type: "string"
        description: "Note State"
        x-looker-nullable: true
      note_text:
        type: "string"
        description: "Note Text"
        x-looker-nullable: true
      note_text_as_html:
        type: "string"
        description: "Note Text as Html"
        readOnly: true
        x-looker-nullable: true
      query:
        description: "Query"
        $ref: "#/definitions/Query"
      query_id:
        type: "integer"
        format: "int64"
        description: "Id Of Query"
        x-looker-nullable: true
      refresh_interval:
        type: "string"
        description: "Refresh Interval"
        x-looker-nullable: true
      refresh_interval_to_i:
        type: "integer"
        format: "int64"
        description: "Refresh Interval as integer"
        readOnly: true
        x-looker-nullable: true
      result_maker:
        description: "Data about the result maker."
        $ref: "#/definitions/ResultMakerWithIdVisConfigAndDynamicFields"
      result_maker_id:
        type: "integer"
        format: "int64"
        description: "ID of the ResultMakerLookup entry."
        readOnly: true
        x-looker-nullable: true
      subtitle_text:
        type: "string"
        description: "Text tile subtitle text"
        x-looker-nullable: true
      title:
        type: "string"
        description: "Title of dashboard element"
        x-looker-nullable: true
      title_hidden:
        type: "boolean"
        description: "Whether title is hidden"
        x-looker-nullable: false
      title_text:
        type: "string"
        description: "Text tile title"
        x-looker-nullable: true
      type:
        type: "string"
        description: "Type"
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  DashboardFilter:
    required:
    - "name"
    - "title"
    - "type"
    properties:
      id:
        type: "string"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      dashboard_id:
        type: "string"
        description: "Id of Dashboard"
        readOnly: true
        x-looker-nullable: true
      name:
        type: "string"
        description: "Name of filter"
        x-looker-nullable: true
      title:
        type: "string"
        description: "Title of filter"
        x-looker-nullable: true
      type:
        type: "string"
        description: "Type of filter: one of date, number, string, or field"
        x-looker-nullable: true
      default_value:
        type: "string"
        description: "Default value of filter"
        x-looker-nullable: true
      model:
        type: "string"
        description: "Model of filter (required if type = field)"
        x-looker-nullable: true
      explore:
        type: "string"
        description: "Explore of filter (required if type = field)"
        x-looker-nullable: true
      dimension:
        type: "string"
        description: "Dimension of filter (required if type = field)"
        x-looker-nullable: true
      field:
        type: "object"
        description: "Field information"
        additionalProperties:
          type: "string"
          format: "any"
        x-looker-nullable: true
      row:
        type: "integer"
        format: "int64"
        description: "Display order of this filter relative to other filters"
        x-looker-nullable: true
      listens_to_filters:
        type: "array"
        description: "Array of listeners for faceted filters"
        items:
          type: "string"
        x-looker-nullable: true
      allow_multiple_values:
        type: "boolean"
        description: "Whether the filter allows multiple filter values"
        x-looker-nullable: false
      required:
        type: "boolean"
        description: "Whether the filter requires a value to run the dashboard"
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  DashboardLayoutComponent:
    properties:
      id:
        type: "string"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      dashboard_layout_id:
        type: "string"
        description: "Id of Dashboard Layout"
        x-looker-nullable: true
      dashboard_element_id:
        type: "string"
        description: "Id Of Dashboard Element"
        x-looker-nullable: true
      row:
        type: "integer"
        format: "int64"
        description: "Row"
        x-looker-nullable: true
      column:
        type: "integer"
        format: "int64"
        description: "Column"
        x-looker-nullable: true
      width:
        type: "integer"
        format: "int64"
        description: "Width"
        x-looker-nullable: true
      height:
        type: "integer"
        format: "int64"
        description: "Height"
        x-looker-nullable: true
      deleted:
        type: "boolean"
        description: "Whether or not the dashboard layout component is deleted"
        readOnly: true
        x-looker-nullable: false
      element_title:
        type: "string"
        description: "Dashboard element title, extracted from the Dashboard Element."
        readOnly: true
        x-looker-nullable: true
      element_title_hidden:
        type: "boolean"
        description: "Whether or not the dashboard element title is displayed."
        readOnly: true
        x-looker-nullable: false
      vis_type:
        type: "string"
        description: "Visualization type, extracted from a query's vis_config"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  DashboardLayout:
    properties:
      id:
        type: "string"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      dashboard_id:
        type: "string"
        description: "Id of Dashboard"
        x-looker-nullable: true
      type:
        type: "string"
        description: "Type"
        x-looker-nullable: true
      active:
        type: "boolean"
        description: "Is Active"
        x-looker-nullable: false
      column_width:
        type: "integer"
        format: "int64"
        description: "Column Width"
        x-looker-nullable: true
      width:
        type: "integer"
        format: "int64"
        description: "Width"
        x-looker-nullable: true
      deleted:
        type: "boolean"
        description: "Whether or not the dashboard layout is deleted."
        readOnly: true
        x-looker-nullable: false
      dashboard_title:
        type: "string"
        description: "Title extracted from the dashboard this layout represents."
        readOnly: true
        x-looker-nullable: true
      dashboard_layout_components:
        type: "array"
        description: "Components"
        items:
          $ref: "#/definitions/DashboardLayoutComponent"
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  Dashboard:
    properties:
      content_favorite_id:
        type: "integer"
        format: "int64"
        description: "Content Favorite Id"
        readOnly: true
        x-looker-nullable: true
      content_metadata_id:
        type: "integer"
        format: "int64"
        description: "Id of content metadata"
        readOnly: true
        x-looker-nullable: true
      description:
        type: "string"
        description: "Description"
        x-looker-nullable: true
      hidden:
        type: "boolean"
        description: "Is Hidden"
        x-looker-nullable: false
      id:
        type: "string"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      model:
        description: "Model"
        $ref: "#/definitions/LookModel"
      query_timezone:
        type: "string"
        description: "Timezone in which the Dashboard will run by default."
        x-looker-nullable: true
      readonly:
        type: "boolean"
        description: "Is Read-only"
        readOnly: true
        x-looker-nullable: false
      refresh_interval:
        type: "string"
        description: "Refresh Interval"
        x-looker-nullable: true
      refresh_interval_to_i:
        type: "integer"
        format: "int64"
        description: "Refresh Interval as Integer"
        readOnly: true
        x-looker-nullable: true
      space:
        description: "Space"
        $ref: "#/definitions/SpaceBase"
      title:
        type: "string"
        description: "Dashboard Title"
        x-looker-nullable: true
      user_id:
        type: "integer"
        format: "int64"
        description: "Id of User"
        readOnly: true
        x-looker-nullable: true
      background_color:
        type: "string"
        description: "Background color"
        x-looker-nullable: true
      created_at:
        type: "string"
        format: "date-time"
        description: "Time that the Dashboard was created."
        readOnly: true
        x-looker-nullable: true
      dashboard_elements:
        type: "array"
        description: "Elements"
        items:
          $ref: "#/definitions/DashboardElement"
        x-looker-nullable: true
      dashboard_filters:
        type: "array"
        description: "Filters"
        items:
          $ref: "#/definitions/DashboardFilter"
        x-looker-nullable: true
      dashboard_layouts:
        type: "array"
        description: "Layouts"
        items:
          $ref: "#/definitions/DashboardLayout"
        x-looker-nullable: true
      deleted:
        type: "boolean"
        description: "Whether or not a dashboard is 'soft' deleted."
        x-looker-nullable: false
      deleted_at:
        type: "string"
        format: "date-time"
        description: "Time that the Dashboard was 'soft' deleted."
        readOnly: true
        x-looker-nullable: true
      deleter_id:
        type: "integer"
        format: "int64"
        description: "Id of User that 'soft' deleted the dashboard."
        readOnly: true
        x-looker-nullable: true
      edit_uri:
        type: "string"
        format: "uri"
        description: "Relative path of URI of LookML file to edit the dashboard (LookML\
          \ dashboard only)."
        readOnly: true
        x-looker-nullable: true
      favorite_count:
        type: "integer"
        format: "int64"
        description: "Number of times favorited"
        readOnly: true
        x-looker-nullable: true
      last_accessed_at:
        type: "string"
        format: "date-time"
        description: "Time the dashboard was last accessed"
        readOnly: true
        x-looker-nullable: true
      last_viewed_at:
        type: "string"
        format: "date-time"
        description: "Time last viewed in the Looker web UI"
        readOnly: true
        x-looker-nullable: true
      load_configuration:
        type: "string"
        description: "configuration option that governs how dashboard loading will\
          \ happen."
        x-looker-nullable: true
      lookml_link_id:
        type: "string"
        description: "Links this dashboard to a particular LookML dashboard such that\
          \ calling a **sync** operation on that LookML dashboard will update this\
          \ dashboard to match."
        x-looker-nullable: true
      show_filters_bar:
        type: "boolean"
        description: "Show filters bar.  **Security Note:** This property only affects\
          \ the *cosmetic* appearance of the dashboard, not a user's ability to access\
          \ data. Hiding the filters bar does **NOT** prevent users from changing\
          \ filters by other means. For information on how to set up secure data access\
          \ control policies, see [Control User Access to Data](https://docs.looker.com/admin-options/tutorials/permissions#control_user_access_to_data)"
        x-looker-nullable: false
      show_title:
        type: "boolean"
        description: "Show title"
        x-looker-nullable: false
      slug:
        type: "string"
        description: "Content Metadata Slug"
        x-looker-nullable: true
      space_id:
        type: "string"
        description: "Id of Space"
        x-looker-nullable: true
      text_tile_text_color:
        type: "string"
        description: "Color of text on text tiles"
        x-looker-nullable: true
      tile_background_color:
        type: "string"
        description: "Tile background color"
        x-looker-nullable: true
      tile_text_color:
        type: "string"
        description: "Tile text color"
        x-looker-nullable: true
      title_color:
        type: "string"
        description: "Title color"
        x-looker-nullable: true
      view_count:
        type: "integer"
        format: "int64"
        description: "Number of times viewed in the Looker web UI"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  DataActionFormField:
    properties:
      name:
        type: "string"
        description: "Name"
        readOnly: true
        x-looker-nullable: true
      label:
        type: "string"
        description: "Human-readable label"
        readOnly: true
        x-looker-nullable: true
      description:
        type: "string"
        description: "Description of field"
        readOnly: true
        x-looker-nullable: true
      type:
        type: "string"
        description: "Type of field."
        readOnly: true
        x-looker-nullable: true
      default:
        type: "string"
        description: "Default value of the field."
        readOnly: true
        x-looker-nullable: true
      oauth_url:
        type: "string"
        description: "The URL for an oauth link, if type is 'oauth_link'."
        readOnly: true
        x-looker-nullable: true
      required:
        type: "boolean"
        description: "Whether or not the field is required. This is a user-interface\
          \ hint. A user interface displaying this form should not submit it without\
          \ a value for this field. The action server must also perform this validation."
        readOnly: true
        x-looker-nullable: false
      options:
        type: "array"
        description: "If the form type is 'select', a list of options to be selected\
          \ from."
        items:
          $ref: "#/definitions/DataActionFormSelectOption"
        x-looker-nullable: true
    x-looker-status: "beta"
  DataActionForm:
    properties:
      state:
        description: "User state"
        $ref: "#/definitions/DataActionUserState"
      fields:
        type: "array"
        description: "Array of form fields."
        items:
          $ref: "#/definitions/DataActionFormField"
        x-looker-nullable: true
    x-looker-status: "beta"
  DataActionFormSelectOption:
    properties:
      name:
        type: "string"
        description: "Name"
        readOnly: true
        x-looker-nullable: true
      label:
        type: "string"
        description: "Human-readable label"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "beta"
  DataActionRequest:
    properties:
      action:
        type: "object"
        description: "The JSON describing the data action. This JSON should be considered\
          \ opaque and should be passed through unmodified from the query result it\
          \ came from."
        additionalProperties:
          type: "string"
        x-looker-nullable: true
      form_values:
        type: "object"
        description: "User input for any form values the data action might use."
        additionalProperties:
          type: "string"
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  DataActionResponse:
    properties:
      webhook_id:
        type: "string"
        description: "ID of the webhook event that sent this data action. In some\
          \ error conditions, this may be null."
        readOnly: true
        x-looker-nullable: true
      success:
        type: "boolean"
        description: "Whether the data action was successful."
        readOnly: true
        x-looker-nullable: false
      refresh_query:
        type: "boolean"
        description: "When true, indicates that the client should refresh (rerun)\
          \ the source query because the data may have been changed by the action."
        readOnly: true
        x-looker-nullable: false
      validation_errors:
        description: "Validation errors returned by the data action server."
        $ref: "#/definitions/ValidationError"
      message:
        type: "string"
        description: "Optional message returned by the data action server describing\
          \ the state of the action that took place. This can be used to implement\
          \ custom failure messages. If a failure is related to a particular form\
          \ field, the server should send back a validation error instead. The Looker\
          \ web UI does not currently display any message if the action indicates\
          \ 'success', but may do so in the future."
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "beta"
  DataActionUserState:
    properties:
      data:
        type: "string"
        description: "User state data"
        readOnly: true
        x-looker-nullable: true
      refresh_time:
        type: "integer"
        format: "int64"
        description: "Time in seconds until the state needs to be refreshed"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "beta"
  Datagroup:
    properties:
      created_at:
        type: "integer"
        format: "int64"
        description: "UNIX timestamp at which this entry was created."
        readOnly: true
        x-looker-nullable: true
      id:
        type: "integer"
        format: "int64"
        description: "ID of the datagroup. Also used as the unique identifier."
        readOnly: true
        x-looker-nullable: false
      model_name:
        type: "string"
        description: "Name of the model containing the datagroup. Unique when combined\
          \ with name."
        readOnly: true
        x-looker-nullable: true
      name:
        type: "string"
        description: "Name of the datagroup. Unique when combined with model_name."
        readOnly: true
        x-looker-nullable: true
      stale_before:
        type: "integer"
        format: "int64"
        description: "UNIX timestamp before which cache entries are considered stale.\
          \ Cannot be in the future."
        x-looker-nullable: true
      trigger_check_at:
        type: "integer"
        format: "int64"
        description: "UNIX timestamp at which this entry trigger was last checked."
        readOnly: true
        x-looker-nullable: true
      trigger_error:
        type: "string"
        description: "The message returned with the error of the last trigger check."
        readOnly: true
        x-looker-nullable: true
      trigger_value:
        type: "string"
        description: "The value of the trigger when last checked."
        readOnly: true
        x-looker-nullable: true
      triggered_at:
        type: "integer"
        format: "int64"
        description: "UNIX timestamp at which this entry became triggered. Cannot\
          \ be in the future."
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  DBConnectionBase:
    properties:
      name:
        type: "string"
        description: "Name of the connection. Also used as the unique identifier"
        readOnly: true
        x-looker-nullable: false
      dialect:
        description: "(Read-only) SQL Dialect details"
        $ref: "#/definitions/Dialect"
      snippets:
        type: "array"
        description: "SQL Runner snippets for this connection"
        items:
          $ref: "#/definitions/Snippet"
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  DBConnection:
    properties:
      name:
        type: "string"
        description: "Name of the connection. Also used as the unique identifier"
        x-looker-nullable: false
      dialect:
        description: "(Read-only) SQL Dialect details"
        $ref: "#/definitions/Dialect"
      snippets:
        type: "array"
        description: "SQL Runner snippets for this connection"
        items:
          $ref: "#/definitions/Snippet"
        x-looker-nullable: false
      host:
        type: "string"
        description: "Host name/address of server"
        x-looker-nullable: true
      port:
        type: "string"
        description: "Port number on server"
        x-looker-nullable: true
      username:
        type: "string"
        description: "Username for server authentication"
        x-looker-nullable: true
      password:
        type: "string"
        description: "(Write-Only) Password for server authentication"
        x-looker-write-only: true
        x-looker-nullable: true
      certificate:
        type: "string"
        description: "(Write-Only) Base64 encoded Certificate body for server authentication\
          \ (when appropriate for dialect)."
        x-looker-write-only: true
        x-looker-nullable: true
      file_type:
        type: "string"
        description: "(Write-Only) Certificate keyfile type - .json or .p12"
        x-looker-write-only: true
        x-looker-nullable: true
      database:
        type: "string"
        description: "Database name"
        x-looker-nullable: true
      db_timezone:
        type: "string"
        description: "Time zone of database"
        x-looker-nullable: true
      query_timezone:
        type: "string"
        description: "Timezone to use in queries"
        x-looker-nullable: true
      schema:
        type: "string"
        description: "Scheme name"
        x-looker-nullable: true
      max_connections:
        type: "integer"
        format: "int64"
        description: "Maximum number of concurrent connection to use"
        x-looker-nullable: true
      max_billing_gigabytes:
        type: "string"
        description: "Maximum size of query in GBs (BigQuery only, can be a user_attribute\
          \ name)"
        x-looker-nullable: true
      ssl:
        type: "boolean"
        description: "Use SSL/TLS when connecting to server"
        x-looker-nullable: false
      verify_ssl:
        type: "boolean"
        description: "Verify the SSL"
        x-looker-nullable: false
      tmp_db_name:
        type: "string"
        description: "Name of temporary database (if used)"
        x-looker-nullable: true
      jdbc_additional_params:
        type: "string"
        description: "Additional params to add to JDBC connection string"
        x-looker-nullable: true
      pool_timeout:
        type: "integer"
        format: "int64"
        description: "Pool Timeout"
        x-looker-nullable: true
      dialect_name:
        type: "string"
        description: "(Read/Write) SQL Dialect name"
        x-looker-nullable: true
      created_at:
        type: "string"
        description: "Creation date for this connection"
        readOnly: true
        x-looker-nullable: true
      user_id:
        type: "string"
        description: "Id of user who last modified this connection configuration"
        readOnly: true
        x-looker-nullable: true
      example:
        type: "boolean"
        description: "Is this an example connection"
        readOnly: true
        x-looker-nullable: false
      user_db_credentials:
        type: "boolean"
        description: "(Limited access feature) Are per user db credentials enabled.\
          \ Enabling will remove previously set username and password"
        x-looker-nullable: true
      user_attribute_fields:
        type: "array"
        description: "Fields whose values map to user attribute names"
        items:
          type: "string"
        x-looker-nullable: true
      maintenance_cron:
        type: "string"
        description: "Cron string specifying when maintenance such as PDT trigger\
          \ checks and drops should be performed"
        x-looker-nullable: true
      last_regen_at:
        type: "string"
        description: "Unix timestamp at start of last completed PDT trigger check\
          \ process"
        readOnly: true
        x-looker-nullable: true
      last_reap_at:
        type: "string"
        description: "Unix timestamp at start of last completed PDT reap process"
        readOnly: true
        x-looker-nullable: true
      sql_runner_precache_tables:
        type: "boolean"
        description: "Precache tables in the SQL Runner"
        x-looker-nullable: false
      after_connect_statements:
        type: "string"
        description: "SQL statements (semicolon separated) to issue after connecting\
          \ to the database. Requires `custom_after_connect_statements` license feature"
        x-looker-nullable: true
      pdt_context_override:
        description: "db_connection_override for this connection in the `pdt` maintenance\
          \ context"
        $ref: "#/definitions/DBConnectionOverride"
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  DBConnectionOverride:
    properties:
      context:
        type: "string"
        description: "Context in which to override (`pdt` is the only allowed value)"
        x-looker-nullable: false
      host:
        type: "string"
        description: "Host name/address of server"
        x-looker-nullable: true
      port:
        type: "string"
        description: "Port number on server"
        x-looker-nullable: true
      username:
        type: "string"
        description: "Username for server authentication"
        x-looker-nullable: true
      password:
        type: "string"
        description: "(Write-Only) Password for server authentication"
        x-looker-write-only: true
        x-looker-nullable: true
      has_password:
        type: "boolean"
        description: "Whether or not the password is overridden in this context"
        readOnly: true
        x-looker-nullable: false
      certificate:
        type: "string"
        description: "(Write-Only) Base64 encoded Certificate body for server authentication\
          \ (when appropriate for dialect)."
        x-looker-write-only: true
        x-looker-nullable: true
      file_type:
        type: "string"
        description: "(Write-Only) Certificate keyfile type - .json or .p12"
        x-looker-write-only: true
        x-looker-nullable: true
      database:
        type: "string"
        description: "Database name"
        x-looker-nullable: true
      schema:
        type: "string"
        description: "Scheme name"
        x-looker-nullable: true
      jdbc_additional_params:
        type: "string"
        description: "Additional params to add to JDBC connection string"
        x-looker-nullable: true
      after_connect_statements:
        type: "string"
        description: "SQL statements (semicolon separated) to issue after connecting\
          \ to the database. Requires `custom_after_connect_statements` license feature"
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  DBConnectionTestResult:
    properties:
      connection_string:
        type: "string"
        description: "JDBC connection string. (only populated in the 'connect' test)"
        readOnly: true
        x-looker-nullable: true
      message:
        type: "string"
        description: "Result message of test"
        readOnly: true
        x-looker-nullable: true
      name:
        type: "string"
        description: "Name of test"
        readOnly: true
        x-looker-nullable: true
      status:
        type: "string"
        description: "Result code of test"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  DialectInfo:
    properties:
      default_max_connections:
        type: "string"
        description: "Default number max connections"
        readOnly: true
        x-looker-nullable: true
      default_port:
        type: "string"
        description: "Default port number"
        readOnly: true
        x-looker-nullable: true
      installed:
        type: "boolean"
        description: "Is the supporting driver installed"
        readOnly: true
        x-looker-nullable: false
      label:
        type: "string"
        description: "The human-readable label of the connection"
        readOnly: true
        x-looker-nullable: true
      label_for_database_equivalent:
        type: "string"
        description: "What the dialect calls the equivalent of a normal SQL table"
        readOnly: true
        x-looker-nullable: true
      name:
        type: "string"
        description: "The name of the dialect"
        readOnly: true
        x-looker-nullable: true
      supported_options:
        description: "Option support details"
        $ref: "#/definitions/DialectInfoOptions"
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  DialectInfoOptions:
    properties:
      additional_params:
        type: "boolean"
        description: "Has additional params support"
        readOnly: true
        x-looker-nullable: false
      auth:
        type: "boolean"
        description: "Has auth support"
        readOnly: true
        x-looker-nullable: false
      host:
        type: "boolean"
        description: "Has host support"
        readOnly: true
        x-looker-nullable: false
      oauth_credentials:
        type: "boolean"
        description: "Has OAuth support"
        readOnly: true
        x-looker-nullable: false
      project_name:
        type: "boolean"
        description: "Has project name support"
        readOnly: true
        x-looker-nullable: false
      schema:
        type: "boolean"
        description: "Has schema support"
        readOnly: true
        x-looker-nullable: false
      ssl:
        type: "boolean"
        description: "Has SSL support"
        readOnly: true
        x-looker-nullable: false
      timezone:
        type: "boolean"
        description: "Has timezone support"
        readOnly: true
        x-looker-nullable: false
      tmp_table:
        type: "boolean"
        description: "Has tmp table support"
        readOnly: true
        x-looker-nullable: false
      username_required:
        type: "boolean"
        description: "Username is required"
        readOnly: true
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  Dialect:
    properties:
      name:
        type: "string"
        description: "The name of the dialect"
        readOnly: true
        x-looker-nullable: false
      label:
        type: "string"
        description: "The human-readable label of the connection"
        readOnly: true
        x-looker-nullable: false
      supports_cost_estimate:
        type: "boolean"
        description: "Whether the dialect supports query cost estimates"
        readOnly: true
        x-looker-nullable: false
      supports_upload_tables:
        type: "boolean"
        description: "Whether the dialect supports uploading tables"
        readOnly: true
        x-looker-nullable: false
      persistent_table_indexes:
        type: "string"
        description: "PDT index columns"
        readOnly: true
        x-looker-nullable: false
      persistent_table_sortkeys:
        type: "string"
        description: "PDT sortkey columns"
        readOnly: true
        x-looker-nullable: false
      persistent_table_distkey:
        type: "string"
        description: "PDT distkey column"
        readOnly: true
        x-looker-nullable: false
      supports_streaming:
        type: "boolean"
        description: "Suports streaming results"
        readOnly: true
        x-looker-nullable: false
      automatically_run_sql_runner_snippets:
        type: "boolean"
        description: "Should SQL Runner snippets automatically be run"
        readOnly: true
        x-looker-nullable: false
      connection_tests:
        type: "array"
        description: "Array of names of the tests that can be run on a connection\
          \ using this dialect"
        items:
          type: "string"
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  GitBranch:
    properties:
      name:
        type: "string"
        description: "The short name on the local. Updating `name` results in `git\
          \ checkout <new_name>`"
        x-looker-nullable: true
      remote:
        type: "string"
        description: "The name of the remote"
        readOnly: true
        x-looker-nullable: true
      remote_name:
        type: "string"
        description: "The short name on the remote"
        readOnly: true
        x-looker-nullable: true
      error:
        type: "string"
        description: "Name of error"
        readOnly: true
        x-looker-nullable: true
      message:
        type: "string"
        description: "Message describing an error if present"
        readOnly: true
        x-looker-nullable: true
      owner_name:
        type: "string"
        description: "Name of the owner of a personal branch"
        readOnly: true
        x-looker-nullable: true
      readonly:
        type: "boolean"
        description: "Whether or not this branch is readonly"
        readOnly: true
        x-looker-nullable: false
      personal:
        type: "boolean"
        description: "Whether or not this branch is a personal branch - readonly for\
          \ all developers except the owner"
        readOnly: true
        x-looker-nullable: false
      is_local:
        type: "boolean"
        description: "Whether or not a local ref exists for the branch"
        readOnly: true
        x-looker-nullable: false
      is_remote:
        type: "boolean"
        description: "Whether or not a remote ref exists for the branch"
        readOnly: true
        x-looker-nullable: false
      is_production:
        type: "boolean"
        description: "Whether or not this is the production branch"
        readOnly: true
        x-looker-nullable: false
      ahead_count:
        type: "integer"
        format: "int64"
        description: "Number of commits the local branch is ahead of the remote"
        readOnly: true
        x-looker-nullable: true
      behind_count:
        type: "integer"
        format: "int64"
        description: "Number of commits the local branch is behind the remote"
        readOnly: true
        x-looker-nullable: true
      commit_at:
        type: "integer"
        format: "int64"
        description: "UNIX timestamp at which this branch was last committed."
        readOnly: true
        x-looker-nullable: true
      ref:
        type: "string"
        description: "The resolved ref of this branch. Updating `ref` results in `git\
          \ reset --hard <new_ref>``."
        x-looker-nullable: true
      remote_ref:
        type: "string"
        description: "The resolved ref of this branch remote."
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  GitConnectionTest:
    properties:
      description:
        type: "string"
        description: "Human readable string describing the test"
        readOnly: true
        x-looker-nullable: true
      id:
        type: "string"
        description: "A short string, uniquely naming this test"
        readOnly: true
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  GitConnectionTestResult:
    properties:
      id:
        type: "string"
        description: "A short string, uniquely naming this test"
        readOnly: true
        x-looker-nullable: false
      message:
        type: "string"
        description: "Additional data from the test"
        readOnly: true
        x-looker-nullable: true
      status:
        type: "string"
        description: "Either 'pass' or 'fail'"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  GitStatus:
    properties:
      action:
        type: "string"
        description: "Git action: add, delete, etc"
        readOnly: true
        x-looker-nullable: true
      conflict:
        type: "boolean"
        description: "When true, changes to the local file conflict with the remote\
          \ repository"
        readOnly: true
        x-looker-nullable: false
      revertable:
        type: "boolean"
        description: "When true, the file can be reverted to an earlier state"
        readOnly: true
        x-looker-nullable: false
      text:
        type: "string"
        description: "Git description of the action"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  GroupIdForGroupInclusion:
    properties:
      group_id:
        type: "integer"
        format: "int64"
        description: "Id of group"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  Group:
    properties:
      can_add_to_content_metadata:
        type: "boolean"
        description: "Group can be used in content access controls"
        x-looker-nullable: false
      contains_current_user:
        type: "boolean"
        description: "Currently logged in user is group member"
        readOnly: true
        x-looker-nullable: false
      external_group_id:
        type: "string"
        description: "External Id group if embed group"
        readOnly: true
        x-looker-nullable: true
      externally_managed:
        type: "boolean"
        description: "Group membership controlled outside of Looker"
        readOnly: true
        x-looker-nullable: false
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      include_by_default:
        type: "boolean"
        description: "New users are added to this group by default"
        readOnly: true
        x-looker-nullable: false
      name:
        type: "string"
        description: "Name of group"
        x-looker-nullable: true
      user_count:
        type: "integer"
        format: "int64"
        description: "Number of users included in this group"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  GroupIdForGroupUserInclusion:
    properties:
      user_id:
        type: "integer"
        format: "int64"
        description: "Id of user"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  HomepageItem:
    properties:
      content_created_by:
        type: "string"
        description: "Name of user who created the content this item is based on"
        readOnly: true
        x-looker-nullable: true
      content_favorite_id:
        type: "integer"
        format: "int64"
        description: "Content favorite id associated with the item this content is\
          \ based on"
        readOnly: true
        x-looker-nullable: true
      content_metadata_id:
        type: "integer"
        format: "int64"
        description: "Content metadata id associated with the item this content is\
          \ based on"
        readOnly: true
        x-looker-nullable: true
      content_updated_at:
        type: "string"
        description: "Last time the content that this item is based on was updated"
        readOnly: true
        x-looker-nullable: true
      custom_description:
        type: "string"
        description: "Custom description entered by the user, if present"
        x-looker-nullable: true
      custom_image_data_base64:
        type: "string"
        description: "(Write-Only) base64 encoded image data"
        x-looker-write-only: true
        x-looker-nullable: true
      custom_image_url:
        type: "string"
        description: "Custom image_url entered by the user, if present"
        readOnly: true
        x-looker-nullable: true
      custom_title:
        type: "string"
        description: "Custom title entered by the user, if present"
        x-looker-nullable: true
      custom_url:
        type: "string"
        description: "Custom url entered by the user, if present"
        x-looker-nullable: true
      dashboard_id:
        type: "integer"
        format: "int64"
        description: "Dashboard to base this item on"
        x-looker-nullable: true
      description:
        type: "string"
        description: "The actual description for display"
        readOnly: true
        x-looker-nullable: true
      favorite_count:
        type: "integer"
        format: "int64"
        description: "Number of times content has been favorited, if present"
        readOnly: true
        x-looker-nullable: true
      homepage_section_id:
        type: "string"
        description: "Associated Homepage Section"
        x-looker-nullable: true
      id:
        type: "string"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      image_url:
        type: "string"
        description: "The actual image_url for display"
        readOnly: true
        x-looker-nullable: true
      location:
        type: "string"
        description: "The container folder name of the content"
        readOnly: true
        x-looker-nullable: true
      look_id:
        type: "integer"
        format: "int64"
        description: "Look to base this item on"
        x-looker-nullable: true
      lookml_dashboard_id:
        type: "string"
        description: "LookML Dashboard to base this item on"
        x-looker-nullable: true
      order:
        type: "integer"
        format: "int64"
        description: "An arbitrary integer representing the sort order within the\
          \ section"
        x-looker-nullable: true
      section_fetch_time:
        type: "number"
        format: "float"
        description: "Number of seconds it took to fetch the section this item is\
          \ in"
        readOnly: true
        x-looker-nullable: true
      title:
        type: "string"
        description: "The actual title for display"
        readOnly: true
        x-looker-nullable: true
      url:
        type: "string"
        description: "The actual url for display"
        readOnly: true
        x-looker-nullable: true
      use_custom_description:
        type: "boolean"
        description: "Whether the custom description should be used instead of the\
          \ content description, if the item is associated with content"
        x-looker-nullable: false
      use_custom_image:
        type: "boolean"
        description: "Whether the custom image should be used instead of the content\
          \ image, if the item is associated with content"
        x-looker-nullable: false
      use_custom_title:
        type: "boolean"
        description: "Whether the custom title should be used instead of the content\
          \ title, if the item is associated with content"
        x-looker-nullable: false
      use_custom_url:
        type: "boolean"
        description: "Whether the custom url should be used instead of the content\
          \ url, if the item is associated with content"
        x-looker-nullable: false
      view_count:
        type: "integer"
        format: "int64"
        description: "Number of times content has been viewed, if present"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  HomepageSection:
    properties:
      created_at:
        type: "string"
        format: "date-time"
        description: "Time at which this section was created."
        readOnly: true
        x-looker-nullable: true
      deleted_at:
        type: "string"
        format: "date-time"
        description: "Time at which this section was deleted."
        x-looker-nullable: true
      detail_url:
        type: "string"
        description: "A URL pointing to a page showing further information about the\
          \ content in the section."
        readOnly: true
        x-looker-nullable: true
      homepage_id:
        type: "integer"
        format: "int64"
        description: "Id reference to parent homepage"
        x-looker-nullable: true
      homepage_items:
        type: "array"
        description: "Items in the homepage section"
        items:
          $ref: "#/definitions/HomepageItem"
        x-looker-nullable: true
      id:
        type: "string"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      is_header:
        type: "boolean"
        description: "Is this a header section (has no items)"
        readOnly: true
        x-looker-nullable: false
      item_order:
        type: "array"
        description: "ids of the homepage items in the order they should be displayed"
        items:
          type: "integer"
          format: "int64"
        x-looker-nullable: true
      title:
        type: "string"
        description: "Name of row"
        x-looker-nullable: true
      updated_at:
        type: "string"
        format: "date-time"
        description: "Time at which this section was last updated."
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  ImportedProject:
    properties:
      name:
        type: "string"
        description: "Dependency name"
        readOnly: true
        x-looker-nullable: true
      url:
        type: "string"
        description: "Url for a remote dependency"
        readOnly: true
        x-looker-nullable: true
      ref:
        type: "string"
        description: "Ref for a remote dependency"
        readOnly: true
        x-looker-nullable: true
      is_remote:
        type: "boolean"
        description: "Flag signifying if a dependency is remote or local"
        readOnly: true
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  IntegrationHub:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "ID of the hub."
        readOnly: true
        x-looker-nullable: false
      url:
        type: "string"
        description: "URL of the hub."
        x-looker-nullable: false
      label:
        type: "string"
        description: "Label of the hub."
        readOnly: true
        x-looker-nullable: false
      official:
        type: "boolean"
        description: "Whether this hub is a first-party integration hub operated by\
          \ Looker."
        readOnly: true
        x-looker-nullable: false
      fetch_error_message:
        type: "string"
        description: "An error message, present if the integration hub metadata could\
          \ not be fetched. If this is present, the integration hub is unusable."
        readOnly: true
        x-looker-nullable: true
      authorization_token:
        type: "string"
        description: "(Write-Only) An authorization key that will be sent to the integration\
          \ hub on every request."
        x-looker-write-only: true
        x-looker-nullable: true
      has_authorization_token:
        type: "boolean"
        description: "Whether the authorization_token is set for the hub."
        readOnly: true
        x-looker-nullable: false
      legal_agreement_signed:
        type: "boolean"
        description: "Whether the legal agreement message has been signed by the user.\
          \ This only matters if legal_agreement_required is true."
        readOnly: true
        x-looker-nullable: false
      legal_agreement_required:
        type: "boolean"
        description: "Whether the legal terms for the integration hub are required\
          \ before use."
        readOnly: true
        x-looker-nullable: false
      legal_agreement_text:
        type: "string"
        description: "The legal agreement text for this integration hub."
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  Integration:
    properties:
      id:
        type: "string"
        description: "ID of the integration."
        readOnly: true
        x-looker-nullable: false
      integration_hub_id:
        type: "integer"
        format: "int64"
        description: "ID of the integration hub."
        readOnly: true
        x-looker-nullable: false
      label:
        type: "string"
        description: "Label for the integration."
        readOnly: true
        x-looker-nullable: false
      description:
        type: "string"
        description: "Description of the integration."
        readOnly: true
        x-looker-nullable: true
      enabled:
        type: "boolean"
        description: "Whether the integration is available to users."
        x-looker-nullable: false
      params:
        type: "array"
        description: "Array of params for the integration."
        items:
          $ref: "#/definitions/IntegrationParam"
        x-looker-nullable: false
      supported_formats:
        type: "array"
        description: "A list of data formats the integration supports. If unspecified,\
          \ this will default to [\"txt\", \"csv\", \"inline_json\", \"json\", \"\
          json_detail\", \"json_detail_lite_stream\", \"xlsx\", \"html\", \"wysiwyg_pdf\"\
          , \"assembled_pdf\", \"wysiwyg_png\", \"csv_zip\"]. Valid values are: \"\
          txt\", \"csv\", \"inline_json\", \"json\", \"json_detail\", \"json_detail_lite_stream\"\
          , \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\", \"wysiwyg_png\"\
          , \"csv_zip\"."
        items:
          type: "string"
        x-looker-values:
        - "txt"
        - "csv"
        - "inline_json"
        - "json"
        - "json_detail"
        - "json_detail_lite_stream"
        - "xlsx"
        - "html"
        - "wysiwyg_pdf"
        - "assembled_pdf"
        - "wysiwyg_png"
        - "csv_zip"
        x-looker-nullable: false
      supported_action_types:
        type: "array"
        description: "A list of action types the integration supports. Valid values\
          \ are: \"cell\", \"query\", \"dashboard\"."
        items:
          type: "string"
        x-looker-values:
        - "cell"
        - "query"
        - "dashboard"
        x-looker-nullable: false
      supported_formattings:
        type: "array"
        description: "A list of formatting options the integration supports. If unspecified,\
          \ this will default to [\"formatted\", \"unformatted\"]. Valid values are:\
          \ \"formatted\", \"unformatted\"."
        items:
          type: "string"
        x-looker-values:
        - "formatted"
        - "unformatted"
        x-looker-nullable: false
      supported_visualization_formattings:
        type: "array"
        description: "A list of visualization formatting options the integration supports.\
          \ If unspecified, this will default to [\"apply\", \"noapply\"]. Valid values\
          \ are: \"apply\", \"noapply\"."
        items:
          type: "string"
        x-looker-values:
        - "apply"
        - "noapply"
        x-looker-nullable: false
      supported_download_settings:
        type: "array"
        description: "A list of all the download mechanisms the integration supports.\
          \ The order is undefined: Looker will select the most appropriate supported\
          \ download mechanism for a given query. The integration must ensure it can\
          \ handle any of the mechanisms it claims to support. If unspecified, this\
          \ will default to [\"push\"]. Valid values are: \"push\", \"url\"."
        items:
          type: "string"
        x-looker-values:
        - "push"
        - "url"
        x-looker-nullable: false
      icon_url:
        type: "string"
        description: "URL to an icon for the integration."
        readOnly: true
        x-looker-nullable: true
      uses_oauth:
        type: "boolean"
        description: "Whether the integration uses oauth."
        readOnly: true
        x-looker-nullable: true
      required_fields:
        type: "array"
        description: "A list of descriptions of required fields that this integration\
          \ is compatible with. If there are multiple entries in this list, the integration\
          \ requires more than one field. If unspecified, no fields will be required."
        items:
          $ref: "#/definitions/IntegrationRequiredField"
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  IntegrationParam:
    properties:
      name:
        type: "string"
        description: "Name of the parameter."
        readOnly: true
        x-looker-nullable: true
      label:
        type: "string"
        description: "Label of the parameter."
        readOnly: true
        x-looker-nullable: true
      description:
        type: "string"
        description: "Short description of the parameter."
        readOnly: true
        x-looker-nullable: true
      required:
        type: "boolean"
        description: "Whether the parameter is required to be set to use the destination.\
          \ If unspecified, this defaults to false."
        readOnly: true
        x-looker-nullable: false
      has_value:
        type: "boolean"
        description: "Whether the parameter has a value set."
        readOnly: true
        x-looker-nullable: false
      value:
        type: "string"
        description: "The current value of the parameter. Always null if the value\
          \ is sensitive. When writing, null values will be ignored. Set the value\
          \ to an empty string to clear it."
        x-looker-nullable: true
      user_attribute_name:
        type: "string"
        description: "When present, the param's value comes from this user attribute\
          \ instead of the 'value' parameter. Set to null to use the 'value'."
        x-looker-nullable: true
      sensitive:
        type: "boolean"
        description: "Whether the parameter contains sensitive data like API credentials.\
          \ If unspecified, this defaults to true."
        readOnly: true
        x-looker-nullable: false
      per_user:
        type: "boolean"
        description: "When true, this parameter must be assigned to a user attribute\
          \ in the admin panel (instead of a constant value), and that value may be\
          \ updated by the user as part of the integration flow."
        readOnly: true
        x-looker-nullable: false
    x-looker-status: "beta"
  IntegrationRequiredField:
    properties:
      tag:
        type: "string"
        description: "Matches a field that has this tag."
        readOnly: true
        x-looker-nullable: true
      any_tag:
        type: "array"
        description: "If present, supercedes 'tag' and matches a field that has any\
          \ of the provided tags."
        items:
          type: "string"
        x-looker-nullable: true
      all_tags:
        type: "array"
        description: "If present, supercedes 'tag' and matches a field that has all\
          \ of the provided tags."
        items:
          type: "string"
        x-looker-nullable: true
    x-looker-status: "beta"
  IntegrationTestResult:
    properties:
      success:
        type: "boolean"
        description: "Whether or not the test was successful"
        readOnly: true
        x-looker-nullable: false
      message:
        type: "string"
        description: "A message representing the results of the test."
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "beta"
  LDAPConfig:
    properties:
      alternate_email_login_allowed:
        type: "boolean"
        description: "Allow alternate email-based login via '/login/email' for admins\
          \ and for specified users with the 'login_special_email' permission. This\
          \ option is useful as a fallback during ldap setup, if ldap config problems\
          \ occur later, or if you need to support some users who are not in your\
          \ ldap directory. Looker email/password logins are always disabled for regular\
          \ users when ldap is enabled."
        x-looker-nullable: false
      auth_password:
        type: "string"
        description: "(Write-Only)  Password for the LDAP account used to access the\
          \ LDAP server"
        x-looker-write-only: true
        x-looker-nullable: true
      auth_requires_role:
        type: "boolean"
        description: "Users will not be allowed to login at all unless a role for\
          \ them is found in LDAP if set to true"
        x-looker-nullable: false
      auth_username:
        type: "string"
        description: "Distinguished name of LDAP account used to access the LDAP server"
        x-looker-nullable: true
      connection_host:
        type: "string"
        description: "LDAP server hostname"
        x-looker-nullable: true
      connection_port:
        type: "string"
        description: "LDAP host port"
        x-looker-nullable: true
      connection_tls:
        type: "boolean"
        description: "Use Transport Layer Security"
        x-looker-nullable: false
      connection_tls_no_verify:
        type: "boolean"
        description: "Do not verify peer when using TLS"
        x-looker-nullable: false
      default_new_user_group_ids:
        type: "array"
        description: "(Write-Only)  Array of ids of groups that will be applied to\
          \ new users the first time they login via LDAP"
        items:
          type: "integer"
          format: "int64"
        x-looker-write-only: true
        x-looker-nullable: true
      default_new_user_groups:
        type: "array"
        description: "(Read-only) Groups that will be applied to new users the first\
          \ time they login via LDAP"
        items:
          $ref: "#/definitions/Group"
        x-looker-nullable: true
      default_new_user_role_ids:
        type: "array"
        description: "(Write-Only)  Array of ids of roles that will be applied to\
          \ new users the first time they login via LDAP"
        items:
          type: "integer"
          format: "int64"
        x-looker-write-only: true
        x-looker-nullable: true
      default_new_user_roles:
        type: "array"
        description: "(Read-only) Roles that will be applied to new users the first\
          \ time they login via LDAP"
        items:
          $ref: "#/definitions/Role"
        x-looker-nullable: true
      enabled:
        type: "boolean"
        description: "Enable/Disable LDAP authentication for the server"
        x-looker-nullable: false
      force_no_page:
        type: "boolean"
        description: "Don't attempt to do LDAP search result paging (RFC 2696) even\
          \ if the LDAP server claims to support it."
        x-looker-nullable: false
      groups:
        type: "array"
        description: "(Read-only) Array of mappings between LDAP Groups and Looker\
          \ Roles"
        items:
          $ref: "#/definitions/LDAPGroupRead"
        x-looker-nullable: true
      groups_base_dn:
        type: "string"
        description: "Base dn for finding groups in LDAP searches"
        x-looker-nullable: true
      groups_finder_type:
        type: "string"
        description: "Identifier for a strategy for how Looker will search for groups\
          \ in the LDAP server"
        x-looker-nullable: true
      groups_member_attribute:
        type: "string"
        description: "LDAP Group attribute that signifies the members of the groups.\
          \ Most commonly 'member'"
        x-looker-nullable: true
      groups_objectclasses:
        type: "string"
        description: "Optional comma-separated list of supported LDAP objectclass\
          \ for groups when doing groups searches"
        x-looker-nullable: true
      groups_user_attribute:
        type: "string"
        description: "LDAP Group attribute that signifies the user in a group. Most\
          \ commonly 'dn'"
        x-looker-nullable: true
      groups_with_role_ids:
        type: "array"
        description: "(Read/Write) Array of mappings between LDAP Groups and arrays\
          \ of Looker Role ids"
        items:
          $ref: "#/definitions/LDAPGroupWrite"
        x-looker-nullable: true
      has_auth_password:
        type: "boolean"
        description: "(Read-only) Has the password been set for the LDAP account used\
          \ to access the LDAP server"
        readOnly: true
        x-looker-nullable: false
      merge_new_users_by_email:
        type: "boolean"
        description: "Merge first-time ldap login to existing user account by email\
          \ addresses. When a user logs in for the first time via ldap this option\
          \ will connect this user into their existing account by finding the account\
          \ with a matching email address. Otherwise a new user account will be created\
          \ for the user."
        x-looker-nullable: false
      modified_at:
        type: "string"
        description: "When this config was last modified"
        readOnly: true
        x-looker-nullable: true
      modified_by:
        type: "string"
        description: "User id of user who last modified this config"
        readOnly: true
        x-looker-nullable: true
      set_roles_from_groups:
        type: "boolean"
        description: "Set user roles in Looker based on groups from LDAP"
        x-looker-nullable: false
      test_ldap_password:
        type: "string"
        description: "(Write-Only)  Test LDAP user password. For ldap tests only."
        x-looker-write-only: true
        x-looker-nullable: true
      test_ldap_user:
        type: "string"
        description: "(Write-Only)  Test LDAP user login id. For ldap tests only."
        x-looker-write-only: true
        x-looker-nullable: true
      user_attribute_map_email:
        type: "string"
        description: "Name of user record attributes used to indicate email address\
          \ field"
        x-looker-nullable: true
      user_attribute_map_first_name:
        type: "string"
        description: "Name of user record attributes used to indicate first name"
        x-looker-nullable: true
      user_attribute_map_last_name:
        type: "string"
        description: "Name of user record attributes used to indicate last name"
        x-looker-nullable: true
      user_attribute_map_ldap_id:
        type: "string"
        description: "Name of user record attributes used to indicate unique record\
          \ id"
        x-looker-nullable: true
      user_attributes:
        type: "array"
        description: "(Read-only) Array of mappings between LDAP User Attributes and\
          \ Looker User Attributes"
        items:
          $ref: "#/definitions/LDAPUserAttributeRead"
        x-looker-nullable: true
      user_attributes_with_ids:
        type: "array"
        description: "(Read/Write) Array of mappings between LDAP User Attributes\
          \ and arrays of Looker User Attribute ids"
        items:
          $ref: "#/definitions/LDAPUserAttributeWrite"
        x-looker-nullable: true
      user_bind_base_dn:
        type: "string"
        description: "Distinguished name of LDAP node used as the base for user searches"
        x-looker-nullable: true
      user_custom_filter:
        type: "string"
        description: "(Optional) Custom RFC-2254 filter clause for use in finding\
          \ user during login. Combined via 'and' with the other generated filter\
          \ clauses."
        x-looker-nullable: true
      user_id_attribute_names:
        type: "string"
        description: "Name(s) of user record attributes used for matching user login\
          \ id (comma separated list)"
        x-looker-nullable: true
      user_objectclass:
        type: "string"
        description: "(Optional) Name of user record objectclass used for finding\
          \ user during login id"
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  LDAPConfigTestResult:
    properties:
      details:
        type: "string"
        description: "Additional details for error cases"
        readOnly: true
        x-looker-nullable: true
      issues:
        type: "array"
        description: "Array of issues/considerations about the result"
        items:
          $ref: "#/definitions/LDAPConfigTestIssue"
        x-looker-nullable: true
      message:
        type: "string"
        description: "Short human readable test about the result"
        readOnly: true
        x-looker-nullable: true
      status:
        type: "string"
        description: "Test status code: always 'success' or 'error'"
        readOnly: true
        x-looker-nullable: true
      trace:
        type: "string"
        description: "A more detailed trace of incremental results during auth tests"
        readOnly: true
        x-looker-nullable: true
      user:
        description: "User details from LDAP server for auth tests"
        $ref: "#/definitions/LDAPUser"
      url:
        type: "string"
        format: "uri"
        description: "Link to ldap config"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  LDAPConfigTestIssue:
    properties:
      severity:
        type: "string"
        description: "Severity of the issue. Error or Warning"
        readOnly: true
        x-looker-nullable: true
      message:
        type: "string"
        description: "Message describing the issue"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  LDAPGroupRead:
    properties:
      name:
        type: "string"
        description: "Name of group in LDAP"
        readOnly: true
        x-looker-nullable: true
      roles:
        type: "array"
        description: "Looker Roles"
        items:
          $ref: "#/definitions/Role"
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to ldap config"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  LDAPGroupWrite:
    properties:
      name:
        type: "string"
        description: "Name of group in LDAP"
        x-looker-nullable: true
      role_ids:
        type: "array"
        description: "Looker Role Ids"
        items:
          type: "integer"
          format: "int64"
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to ldap config"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  LDAPUserAttributeRead:
    properties:
      name:
        type: "string"
        description: "Name of User Attribute in LDAP"
        readOnly: true
        x-looker-nullable: true
      required:
        type: "boolean"
        description: "Required to be in LDAP assertion for login to be allowed to\
          \ succeed"
        readOnly: true
        x-looker-nullable: false
      user_attributes:
        type: "array"
        description: "Looker User Attributes"
        items:
          $ref: "#/definitions/UserAttribute"
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to ldap config"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  LDAPUserAttributeWrite:
    properties:
      name:
        type: "string"
        description: "Name of User Attribute in LDAP"
        x-looker-nullable: true
      required:
        type: "boolean"
        description: "Required to be in LDAP assertion for login to be allowed to\
          \ succeed"
        x-looker-nullable: false
      user_attribute_ids:
        type: "array"
        description: "Looker User Attribute Ids"
        items:
          type: "integer"
          format: "int64"
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to ldap config"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  LDAPUser:
    properties:
      all_emails:
        type: "array"
        description: "Array of user's email addresses and aliases for use in migration"
        items:
          type: "string"
        x-looker-nullable: true
      attributes:
        type: "object"
        description: "Dictionary of user's attributes (name/value)"
        additionalProperties:
          type: "string"
        x-looker-nullable: true
      email:
        type: "string"
        description: "Primary email address"
        readOnly: true
        x-looker-nullable: true
      first_name:
        type: "string"
        description: "First name"
        readOnly: true
        x-looker-nullable: true
      groups:
        type: "array"
        description: "Array of user's groups (group names only)"
        items:
          type: "string"
        x-looker-nullable: true
      last_name:
        type: "string"
        description: "Last Name"
        readOnly: true
        x-looker-nullable: true
      ldap_dn:
        type: "string"
        description: "LDAP's distinguished name for the user record"
        readOnly: true
        x-looker-nullable: true
      ldap_id:
        type: "string"
        description: "LDAP's Unique ID for the user"
        readOnly: true
        x-looker-nullable: true
      roles:
        type: "array"
        description: "Array of user's roles (role names only)"
        items:
          type: "string"
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to ldap config"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  LegacyFeature:
    properties:
      id:
        type: "string"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      name:
        type: "string"
        description: "Name"
        readOnly: true
        x-looker-nullable: true
      description:
        type: "string"
        description: "Description"
        readOnly: true
        x-looker-nullable: true
      enabled_locally:
        type: "boolean"
        description: "Whether this feature has been enabled by a user"
        x-looker-nullable: false
      enabled:
        type: "boolean"
        description: "Whether this feature is currently enabled"
        readOnly: true
        x-looker-nullable: false
      disallowed_as_of_version:
        type: "string"
        description: "Looker version where this feature became a legacy feature"
        readOnly: true
        x-looker-nullable: true
      disable_on_upgrade_to_version:
        type: "string"
        description: "Looker version where this feature will be automatically disabled"
        readOnly: true
        x-looker-nullable: true
      end_of_life_version:
        type: "string"
        description: "Future Looker version where this feature will be removed"
        readOnly: true
        x-looker-nullable: true
      documentation_url:
        type: "string"
        description: "URL for documentation about this feature"
        readOnly: true
        x-looker-nullable: true
      approximate_disable_date:
        type: "string"
        format: "date-time"
        description: "Approximate date that this feature will be automatically disabled."
        readOnly: true
        x-looker-nullable: true
      approximate_end_of_life_date:
        type: "string"
        format: "date-time"
        description: "Approximate date that this feature will be removed."
        readOnly: true
        x-looker-nullable: true
      has_disabled_on_upgrade:
        type: "boolean"
        description: "Whether this legacy feature may have been automatically disabled\
          \ when upgrading to the current version."
        readOnly: true
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  LocalizationSettings:
    properties:
      default_locale:
        type: "string"
        description: "Default locale for localization"
        readOnly: true
        x-looker-nullable: true
      localization_level:
        type: "string"
        description: "Localization level - strict or permissive"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  LookBasic:
    properties:
      content_metadata_id:
        type: "integer"
        format: "int64"
        description: "Id of content metadata"
        readOnly: true
        x-looker-nullable: true
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      title:
        type: "string"
        description: "Look Title"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  Look:
    properties:
      content_metadata_id:
        type: "integer"
        format: "int64"
        description: "Id of content metadata"
        readOnly: true
        x-looker-nullable: true
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      title:
        type: "string"
        description: "Look Title"
        x-looker-nullable: true
      content_favorite_id:
        type: "integer"
        format: "int64"
        description: "Content Favorite Id"
        readOnly: true
        x-looker-nullable: true
      created_at:
        type: "string"
        format: "date-time"
        description: "Time that the Look was created."
        readOnly: true
        x-looker-nullable: true
      deleted:
        type: "boolean"
        description: "Whether or not a look is 'soft' deleted."
        x-looker-nullable: false
      deleted_at:
        type: "string"
        format: "date-time"
        description: "Time that the Look was deleted."
        readOnly: true
        x-looker-nullable: true
      deleter_id:
        type: "integer"
        format: "int64"
        description: "Id of User that deleted the look."
        readOnly: true
        x-looker-nullable: true
      description:
        type: "string"
        description: "Description"
        x-looker-nullable: true
      embed_url:
        type: "string"
        description: "Embed Url"
        readOnly: true
        x-looker-nullable: true
      excel_file_url:
        type: "string"
        description: "Excel File Url"
        readOnly: true
        x-looker-nullable: true
      favorite_count:
        type: "integer"
        format: "int64"
        description: "Number of times favorited"
        readOnly: true
        x-looker-nullable: true
      google_spreadsheet_formula:
        type: "string"
        description: "Google Spreadsheet Formula"
        readOnly: true
        x-looker-nullable: true
      image_embed_url:
        type: "string"
        description: "Image Embed Url"
        readOnly: true
        x-looker-nullable: true
      is_run_on_load:
        type: "boolean"
        description: "auto-run query when Look viewed"
        x-looker-nullable: false
      last_accessed_at:
        type: "string"
        format: "date-time"
        description: "Time that the Look was last accessed by any user"
        readOnly: true
        x-looker-nullable: true
      last_updater_id:
        type: "integer"
        format: "int64"
        description: "Id of User that last updated the look."
        readOnly: true
        x-looker-nullable: true
      last_viewed_at:
        type: "string"
        format: "date-time"
        description: "Time last viewed in the Looker web UI"
        readOnly: true
        x-looker-nullable: true
      model:
        description: "Model"
        $ref: "#/definitions/LookModel"
      public:
        type: "boolean"
        description: "Is Public"
        x-looker-nullable: false
      public_slug:
        type: "string"
        description: "Public Slug"
        readOnly: true
        x-looker-nullable: true
      public_url:
        type: "string"
        description: "Public Url"
        readOnly: true
        x-looker-nullable: true
      query_id:
        type: "integer"
        format: "int64"
        description: "Query Id"
        x-looker-nullable: true
      short_url:
        type: "string"
        description: "Short Url"
        readOnly: true
        x-looker-nullable: true
      space:
        description: "Space of this Look"
        $ref: "#/definitions/SpaceBase"
      space_id:
        type: "string"
        description: "Space Id"
        x-looker-nullable: true
      updated_at:
        type: "string"
        format: "date-time"
        description: "Time that the Look was updated."
        readOnly: true
        x-looker-nullable: true
      user:
        description: "User"
        $ref: "#/definitions/UserIdOnly"
      user_id:
        type: "integer"
        format: "int64"
        description: "User Id"
        x-looker-nullable: true
      view_count:
        type: "integer"
        format: "int64"
        description: "Number of times viewed in the Looker web UI"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  LookWithQuery:
    properties:
      content_metadata_id:
        type: "integer"
        format: "int64"
        description: "Id of content metadata"
        readOnly: true
        x-looker-nullable: true
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      title:
        type: "string"
        description: "Look Title"
        x-looker-nullable: true
      content_favorite_id:
        type: "integer"
        format: "int64"
        description: "Content Favorite Id"
        readOnly: true
        x-looker-nullable: true
      created_at:
        type: "string"
        format: "date-time"
        description: "Time that the Look was created."
        readOnly: true
        x-looker-nullable: true
      deleted:
        type: "boolean"
        description: "Whether or not a look is 'soft' deleted."
        x-looker-nullable: false
      deleted_at:
        type: "string"
        format: "date-time"
        description: "Time that the Look was deleted."
        readOnly: true
        x-looker-nullable: true
      deleter_id:
        type: "integer"
        format: "int64"
        description: "Id of User that deleted the look."
        readOnly: true
        x-looker-nullable: true
      description:
        type: "string"
        description: "Description"
        x-looker-nullable: true
      embed_url:
        type: "string"
        description: "Embed Url"
        readOnly: true
        x-looker-nullable: true
      excel_file_url:
        type: "string"
        description: "Excel File Url"
        readOnly: true
        x-looker-nullable: true
      favorite_count:
        type: "integer"
        format: "int64"
        description: "Number of times favorited"
        readOnly: true
        x-looker-nullable: true
      google_spreadsheet_formula:
        type: "string"
        description: "Google Spreadsheet Formula"
        readOnly: true
        x-looker-nullable: true
      image_embed_url:
        type: "string"
        description: "Image Embed Url"
        readOnly: true
        x-looker-nullable: true
      is_run_on_load:
        type: "boolean"
        description: "auto-run query when Look viewed"
        x-looker-nullable: false
      last_accessed_at:
        type: "string"
        format: "date-time"
        description: "Time that the Look was last accessed by any user"
        readOnly: true
        x-looker-nullable: true
      last_updater_id:
        type: "integer"
        format: "int64"
        description: "Id of User that last updated the look."
        readOnly: true
        x-looker-nullable: true
      last_viewed_at:
        type: "string"
        format: "date-time"
        description: "Time last viewed in the Looker web UI"
        readOnly: true
        x-looker-nullable: true
      model:
        description: "Model"
        $ref: "#/definitions/LookModel"
      public:
        type: "boolean"
        description: "Is Public"
        x-looker-nullable: false
      public_slug:
        type: "string"
        description: "Public Slug"
        readOnly: true
        x-looker-nullable: true
      public_url:
        type: "string"
        description: "Public Url"
        readOnly: true
        x-looker-nullable: true
      query_id:
        type: "integer"
        format: "int64"
        description: "Query Id"
        x-looker-nullable: true
      short_url:
        type: "string"
        description: "Short Url"
        readOnly: true
        x-looker-nullable: true
      space:
        description: "Space of this Look"
        $ref: "#/definitions/SpaceBase"
      space_id:
        type: "string"
        description: "Space Id"
        x-looker-nullable: true
      updated_at:
        type: "string"
        format: "date-time"
        description: "Time that the Look was updated."
        readOnly: true
        x-looker-nullable: true
      user:
        description: "User"
        $ref: "#/definitions/UserIdOnly"
      user_id:
        type: "integer"
        format: "int64"
        description: "User Id"
        x-looker-nullable: true
      view_count:
        type: "integer"
        format: "int64"
        description: "Number of times viewed in the Looker web UI"
        readOnly: true
        x-looker-nullable: true
      query:
        description: "Query"
        $ref: "#/definitions/Query"
      url:
        type: "string"
        description: "Url"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  LookWithDashboards:
    properties:
      content_metadata_id:
        type: "integer"
        format: "int64"
        description: "Id of content metadata"
        readOnly: true
        x-looker-nullable: true
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      title:
        type: "string"
        description: "Look Title"
        x-looker-nullable: true
      content_favorite_id:
        type: "integer"
        format: "int64"
        description: "Content Favorite Id"
        readOnly: true
        x-looker-nullable: true
      created_at:
        type: "string"
        format: "date-time"
        description: "Time that the Look was created."
        readOnly: true
        x-looker-nullable: true
      deleted:
        type: "boolean"
        description: "Whether or not a look is 'soft' deleted."
        x-looker-nullable: false
      deleted_at:
        type: "string"
        format: "date-time"
        description: "Time that the Look was deleted."
        readOnly: true
        x-looker-nullable: true
      deleter_id:
        type: "integer"
        format: "int64"
        description: "Id of User that deleted the look."
        readOnly: true
        x-looker-nullable: true
      description:
        type: "string"
        description: "Description"
        x-looker-nullable: true
      embed_url:
        type: "string"
        description: "Embed Url"
        readOnly: true
        x-looker-nullable: true
      excel_file_url:
        type: "string"
        description: "Excel File Url"
        readOnly: true
        x-looker-nullable: true
      favorite_count:
        type: "integer"
        format: "int64"
        description: "Number of times favorited"
        readOnly: true
        x-looker-nullable: true
      google_spreadsheet_formula:
        type: "string"
        description: "Google Spreadsheet Formula"
        readOnly: true
        x-looker-nullable: true
      image_embed_url:
        type: "string"
        description: "Image Embed Url"
        readOnly: true
        x-looker-nullable: true
      is_run_on_load:
        type: "boolean"
        description: "auto-run query when Look viewed"
        x-looker-nullable: false
      last_accessed_at:
        type: "string"
        format: "date-time"
        description: "Time that the Look was last accessed by any user"
        readOnly: true
        x-looker-nullable: true
      last_updater_id:
        type: "integer"
        format: "int64"
        description: "Id of User that last updated the look."
        readOnly: true
        x-looker-nullable: true
      last_viewed_at:
        type: "string"
        format: "date-time"
        description: "Time last viewed in the Looker web UI"
        readOnly: true
        x-looker-nullable: true
      model:
        description: "Model"
        $ref: "#/definitions/LookModel"
      public:
        type: "boolean"
        description: "Is Public"
        x-looker-nullable: false
      public_slug:
        type: "string"
        description: "Public Slug"
        readOnly: true
        x-looker-nullable: true
      public_url:
        type: "string"
        description: "Public Url"
        readOnly: true
        x-looker-nullable: true
      query_id:
        type: "integer"
        format: "int64"
        description: "Query Id"
        x-looker-nullable: true
      short_url:
        type: "string"
        description: "Short Url"
        readOnly: true
        x-looker-nullable: true
      space:
        description: "Space of this Look"
        $ref: "#/definitions/SpaceBase"
      space_id:
        type: "string"
        description: "Space Id"
        x-looker-nullable: true
      updated_at:
        type: "string"
        format: "date-time"
        description: "Time that the Look was updated."
        readOnly: true
        x-looker-nullable: true
      user:
        description: "User"
        $ref: "#/definitions/UserIdOnly"
      user_id:
        type: "integer"
        format: "int64"
        description: "User Id"
        x-looker-nullable: true
      view_count:
        type: "integer"
        format: "int64"
        description: "Number of times viewed in the Looker web UI"
        readOnly: true
        x-looker-nullable: true
      dashboards:
        type: "array"
        description: "Dashboards"
        items:
          $ref: "#/definitions/DashboardBase"
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  LookModel:
    properties:
      id:
        type: "string"
        description: "Model Id"
        readOnly: true
        x-looker-nullable: false
      label:
        type: "string"
        description: "Model Label"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "beta"
  LookmlModelNavExplore:
    properties:
      name:
        type: "string"
        description: "Name of the explore"
        readOnly: true
        x-looker-nullable: true
      description:
        type: "string"
        description: "Description for the explore"
        readOnly: true
        x-looker-nullable: true
      label:
        type: "string"
        description: "Label for the explore"
        readOnly: true
        x-looker-nullable: true
      hidden:
        type: "boolean"
        description: "Is this explore marked as hidden"
        readOnly: true
        x-looker-nullable: false
      group_label:
        type: "string"
        description: "Label used to group explores in the navigation menus"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  LookmlModelExplore:
    properties:
      id:
        type: "string"
        description: "Fully qualified name model plus explore name"
        readOnly: true
        x-looker-nullable: false
      name:
        type: "string"
        description: "Explore name"
        readOnly: true
        x-looker-nullable: true
      description:
        type: "string"
        description: "Description"
        readOnly: true
        x-looker-nullable: true
      label:
        type: "string"
        description: "Label"
        readOnly: true
        x-looker-nullable: true
      scopes:
        type: "array"
        description: "Scopes"
        items:
          type: "string"
        x-looker-nullable: true
      can_total:
        type: "boolean"
        description: "Can Total"
        readOnly: true
        x-looker-nullable: false
      can_save:
        type: "boolean"
        description: "Can Save"
        readOnly: true
        x-looker-nullable: false
      can_explain:
        type: "boolean"
        description: "Can Explain"
        readOnly: true
        x-looker-nullable: false
      can_pivot_in_db:
        type: "boolean"
        description: "Can pivot in the DB"
        readOnly: true
        x-looker-nullable: false
      can_subtotal:
        type: "boolean"
        description: "Can use subtotals"
        readOnly: true
        x-looker-nullable: false
      has_timezone_support:
        type: "boolean"
        description: "Has timezone support"
        readOnly: true
        x-looker-nullable: false
      supports_cost_estimate:
        type: "boolean"
        description: "Cost estimates supported"
        readOnly: true
        x-looker-nullable: false
      connection_name:
        type: "string"
        description: "Connection name"
        readOnly: true
        x-looker-nullable: true
      null_sort_treatment:
        type: "string"
        description: "How nulls are sorted, possible values are \"low\", \"high\"\
          , \"first\" and \"last\""
        readOnly: true
        x-looker-nullable: true
      files:
        type: "array"
        description: "List of model source files"
        items:
          type: "string"
        x-looker-nullable: true
      source_file:
        type: "string"
        description: "Primary source_file file"
        readOnly: true
        x-looker-nullable: true
      project_name:
        type: "string"
        description: "Name of project"
        readOnly: true
        x-looker-nullable: true
      model_name:
        type: "string"
        description: "Name of model"
        readOnly: true
        x-looker-nullable: true
      view_name:
        type: "string"
        description: "Name of view"
        readOnly: true
        x-looker-nullable: true
      hidden:
        type: "boolean"
        description: "Is hidden"
        readOnly: true
        x-looker-nullable: false
      sql_table_name:
        type: "string"
        description: "A sql_table_name expression that defines what sql table the\
          \ view/explore maps onto. Example: \"prod_orders2 AS orders\" in a view\
          \ named orders."
        readOnly: true
        x-looker-nullable: true
      access_filter_fields:
        type: "array"
        description: "(DEPRECATED) Array of access filter field names"
        items:
          type: "string"
        x-looker-deprecated: true
        x-looker-nullable: true
      access_filters:
        type: "array"
        description: "Access filters"
        items:
          $ref: "#/definitions/LookmlModelExploreAccessFilter"
        x-looker-nullable: true
      aliases:
        type: "array"
        description: "Aliases"
        items:
          $ref: "#/definitions/LookmlModelExploreAlias"
        x-looker-nullable: true
      always_filter:
        type: "array"
        description: "Always filter"
        items:
          $ref: "#/definitions/LookmlModelExploreAlwaysFilter"
        x-looker-nullable: true
      conditionally_filter:
        type: "array"
        description: "Conditionally filter"
        items:
          $ref: "#/definitions/LookmlModelExploreConditionallyFilter"
        x-looker-nullable: true
      index_fields:
        type: "array"
        description: "Array of index fields"
        items:
          type: "string"
        x-looker-nullable: true
      sets:
        type: "array"
        description: "Sets"
        items:
          $ref: "#/definitions/LookmlModelExploreSet"
        x-looker-nullable: true
      errors:
        type: "array"
        description: "Errors"
        items:
          $ref: "#/definitions/LookmlModelExploreError"
        x-looker-nullable: true
      fields:
        description: "Fields"
        $ref: "#/definitions/LookmlModelExploreFieldset"
      joins:
        type: "array"
        description: "Views joined into this explore"
        items:
          $ref: "#/definitions/LookmlModelExploreJoins"
        x-looker-nullable: true
      group_label:
        type: "string"
        description: "Label used to group explores in the navigation menus"
        readOnly: true
        x-looker-nullable: true
      supported_measure_types:
        type: "array"
        description: "An array of items describing which custom measure types are\
          \ supported for creating a custom measure 'baed_on' each possible dimension\
          \ type."
        items:
          $ref: "#/definitions/LookmlModelExploreSupportedMeasureType"
        x-looker-nullable: false
    x-looker-status: "stable"
  LookmlModelExploreSupportedMeasureType:
    properties:
      dimension_type:
        type: "string"
        readOnly: true
        x-looker-nullable: true
      measure_types:
        type: "array"
        items:
          type: "string"
        x-looker-nullable: true
    x-looker-status: "stable"
  LookmlModelExploreAccessFilter:
    properties:
      field:
        type: "string"
        description: "Field to be filtered"
        readOnly: true
        x-looker-nullable: true
      user_attribute:
        type: "string"
        description: "User attribute name"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  LookmlModelExploreConditionallyFilter:
    properties:
      name:
        type: "string"
        description: "Name"
        readOnly: true
        x-looker-nullable: true
      value:
        type: "string"
        description: "Value"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  LookmlModelExploreAlwaysFilter:
    properties:
      name:
        type: "string"
        description: "Name"
        readOnly: true
        x-looker-nullable: true
      value:
        type: "string"
        description: "Value"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  LookmlModelExploreAlias:
    properties:
      name:
        type: "string"
        description: "Name"
        readOnly: true
        x-looker-nullable: true
      value:
        type: "string"
        description: "Value"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  LookmlModelExploreSet:
    properties:
      name:
        type: "string"
        description: "Name"
        readOnly: true
        x-looker-nullable: true
      value:
        type: "array"
        description: "Value set"
        items:
          type: "string"
        x-looker-nullable: true
    x-looker-status: "stable"
  LookmlModelExploreError:
    properties:
      message:
        type: "string"
        description: "Error Message"
        readOnly: true
        x-looker-nullable: true
      details:
        type: "string"
        format: "any"
        description: "Details"
        readOnly: true
        x-looker-nullable: true
      error_pos:
        type: "string"
        description: "Error source location"
        readOnly: true
        x-looker-nullable: true
      field_error:
        type: "boolean"
        description: "Is this a field error"
        readOnly: true
        x-looker-nullable: false
    x-looker-status: "stable"
  LookmlModelExploreFieldset:
    properties:
      dimensions:
        type: "array"
        description: "Array of dimensions"
        items:
          $ref: "#/definitions/LookmlModelExploreField"
        x-looker-nullable: true
      measures:
        type: "array"
        description: "Array of measures"
        items:
          $ref: "#/definitions/LookmlModelExploreField"
        x-looker-nullable: true
      filters:
        type: "array"
        description: "Array of filters"
        items:
          $ref: "#/definitions/LookmlModelExploreField"
        x-looker-nullable: true
      parameters:
        type: "array"
        description: "Array of parameters"
        items:
          $ref: "#/definitions/LookmlModelExploreField"
        x-looker-nullable: true
    x-looker-status: "stable"
  LookmlModelExploreField:
    properties:
      align:
        type: "string"
        description: "The appropriate horizontal text alignment the values of this\
          \ field shoud be displayed in. Valid values are: \"left\", \"right\"."
        readOnly: true
        x-looker-values:
        - "left"
        - "right"
        x-looker-nullable: false
      can_filter:
        type: "boolean"
        description: "Whether it's possible to filter on this field."
        readOnly: true
        x-looker-nullable: false
      category:
        type: "string"
        description: "Field category Valid values are: \"parameter\", \"filter\",\
          \ \"measure\", \"dimension\"."
        readOnly: true
        x-looker-values:
        - "parameter"
        - "filter"
        - "measure"
        - "dimension"
        x-looker-nullable: true
      default_filter_value:
        type: "string"
        description: "The default value that this field uses when filtering. Null\
          \ if there is no default value."
        readOnly: true
        x-looker-nullable: true
      description:
        type: "string"
        description: "Description"
        readOnly: true
        x-looker-nullable: true
      enumerations:
        type: "array"
        description: "An array enumerating all the possible values that this field\
          \ can contain. When null, there is no limit to the set of possible values\
          \ this field can contain."
        items:
          $ref: "#/definitions/LookmlModelExploreFieldEnumeration"
        x-looker-nullable: true
      error:
        type: "string"
        description: "An error message indicating a problem with the definition of\
          \ this field. If there are no errors, this will be null."
        readOnly: true
        x-looker-nullable: true
      field_group_label:
        type: "string"
        description: "A label creating a grouping of fields. All fields with this\
          \ label should be presented together when displayed in a UI."
        readOnly: true
        x-looker-nullable: true
      field_group_variant:
        type: "string"
        description: "When presented in a field group via field_group_label, a shorter\
          \ name of the field to be displayed in that context."
        readOnly: true
        x-looker-nullable: true
      fill_style:
        type: "string"
        description: "The style of dimension fill that is possible for this field.\
          \ Null if no dimension fill is possible. Valid values are: \"enumeration\"\
          , \"range\"."
        readOnly: true
        x-looker-values:
        - "enumeration"
        - "range"
        x-looker-nullable: true
      fiscal_month_offset:
        type: "integer"
        format: "int64"
        description: "An offset (in months) from the calendar start month to the fiscal\
          \ start month defined in the LookML model this field belongs to."
        readOnly: true
        x-looker-nullable: false
      has_allowed_values:
        type: "boolean"
        description: "Whether this field has a set of allowed_values specified in\
          \ LookML."
        readOnly: true
        x-looker-nullable: false
      hidden:
        type: "boolean"
        description: "Whether this field should be hidden from the user interface."
        readOnly: true
        x-looker-nullable: false
      is_filter:
        type: "boolean"
        description: "Whether this field is a filter."
        readOnly: true
        x-looker-nullable: false
      is_fiscal:
        type: "boolean"
        description: "Whether this field represents a fiscal time value."
        readOnly: true
        x-looker-nullable: false
      is_numeric:
        type: "boolean"
        description: "Whether this field is of a type that represents a numeric value."
        readOnly: true
        x-looker-nullable: false
      is_timeframe:
        type: "boolean"
        description: "Whether this field is of a type that represents a time value."
        readOnly: true
        x-looker-nullable: false
      can_time_filter:
        type: "boolean"
        description: "Whether this field can be time filtered."
        readOnly: true
        x-looker-nullable: false
      time_interval:
        description: "Details on the time interval this field represents, if it is_timeframe."
        $ref: "#/definitions/LookmlModelExploreFieldTimeInterval"
      label:
        type: "string"
        description: "Fully-qualified human-readable label of the field."
        readOnly: true
        x-looker-nullable: false
      label_from_parameter:
        type: "string"
        description: "The name of the parameter that will provide a parameterized\
          \ label for this field, if available in the current context."
        readOnly: true
        x-looker-nullable: true
      label_short:
        type: "string"
        description: "The human-readable label of the field, without the view label."
        readOnly: true
        x-looker-nullable: false
      lookml_link:
        type: "string"
        description: "A URL linking to the definition of this field in the LookML\
          \ IDE."
        readOnly: true
        x-looker-nullable: true
      map_layer:
        description: "If applicable, a map layer this field is associated with."
        $ref: "#/definitions/LookmlModelExploreFieldMapLayer"
      measure:
        type: "boolean"
        description: "Whether this field is a measure."
        readOnly: true
        x-looker-nullable: false
      name:
        type: "string"
        description: "Fully-qualified name of the field."
        readOnly: true
        x-looker-nullable: false
      parameter:
        type: "boolean"
        description: "Whether this field is a parameter."
        readOnly: true
        x-looker-nullable: false
      permanent:
        type: "boolean"
        description: "Whether this field can be removed from a query."
        readOnly: true
        x-looker-nullable: true
      primary_key:
        type: "boolean"
        description: "Whether or not the field represents a primary key."
        readOnly: true
        x-looker-nullable: false
      project_name:
        type: "string"
        description: "The name of the project this field is defined in."
        readOnly: true
        x-looker-nullable: true
      requires_refresh_on_sort:
        type: "boolean"
        description: "When true, it's not possible to re-sort this field's values\
          \ without re-running the SQL query, due to database logic that affects the\
          \ sort."
        readOnly: true
        x-looker-nullable: false
      scope:
        type: "string"
        description: "The LookML scope this field belongs to. The scope is typically\
          \ the field's view."
        readOnly: true
        x-looker-nullable: false
      sortable:
        type: "boolean"
        description: "Whether this field can be sorted."
        readOnly: true
        x-looker-nullable: false
      source_file:
        type: "string"
        description: "The path portion of source_file_path."
        readOnly: true
        x-looker-nullable: false
      source_file_path:
        type: "string"
        description: "The fully-qualified path of the project file this field is defined\
          \ in."
        readOnly: true
        x-looker-nullable: false
      sql:
        type: "string"
        description: "SQL expression as defined in the LookML model. The SQL syntax\
          \ shown here is a representation intended for auditability, and is not neccessarily\
          \ an exact match for what will ultimately be run in the database. It may\
          \ contain special LookML syntax or annotations that are not valid SQL. This\
          \ will be null if the current user does not have the see_lookml permission\
          \ for the field's model."
        readOnly: true
        x-looker-nullable: true
      sql_case:
        type: "array"
        description: "An array of conditions and values that make up a SQL Case expression,\
          \ as defined in the LookML model. The SQL syntax shown here is a representation\
          \ intended for auditability, and is not neccessarily an exact match for\
          \ what will ultimately be run in the database. It may contain special LookML\
          \ syntax or annotations that are not valid SQL. This will be null if the\
          \ current user does not have the see_lookml permission for the field's model."
        items:
          $ref: "#/definitions/LookmlModelExploreFieldSqlCase"
        x-looker-nullable: true
      suggest_dimension:
        type: "string"
        description: "The name of the dimension to base suggest queries from."
        readOnly: true
        x-looker-nullable: false
      suggest_explore:
        type: "string"
        description: "The name of the explore to base suggest queries from."
        readOnly: true
        x-looker-nullable: false
      suggestable:
        type: "boolean"
        description: "Whether or not suggestions are possible for this field."
        readOnly: true
        x-looker-nullable: false
      suggestions:
        type: "array"
        description: "If available, a list of suggestions for this field. For most\
          \ fields, a suggest query is a more appropriate way to get an up-to-date\
          \ list of suggestions. Or use enumerations to list all the possible values."
        items:
          type: "string"
        x-looker-nullable: true
      tags:
        type: "array"
        description: "An array of arbitrary string tags provided in the model for\
          \ this field."
        items:
          type: "string"
        x-looker-nullable: false
      type:
        type: "string"
        description: "The LookML type of the field."
        readOnly: true
        x-looker-nullable: false
      user_attribute_filter_types:
        type: "array"
        description: "An array of user attribute types that are allowed to be used\
          \ in filters on this field. Valid values are: \"advanced_filter_string\"\
          , \"advanced_filter_number\", \"advanced_filter_datetime\", \"string\",\
          \ \"number\", \"datetime\", \"yesno\", \"zipcode\"."
        items:
          type: "string"
        x-looker-values:
        - "advanced_filter_string"
        - "advanced_filter_number"
        - "advanced_filter_datetime"
        - "string"
        - "number"
        - "datetime"
        - "yesno"
        - "zipcode"
        x-looker-nullable: false
      value_format:
        type: "string"
        description: "If specified, the LookML value format string for formatting\
          \ values of this field."
        readOnly: true
        x-looker-nullable: true
      view:
        type: "string"
        description: "The name of the view this field belongs to."
        readOnly: true
        x-looker-nullable: false
      view_label:
        type: "string"
        description: "The human-readable label of the view the field belongs to."
        readOnly: true
        x-looker-nullable: false
      dynamic:
        type: "boolean"
        description: "Whether this field was specified in \"dynamic_fields\" and is\
          \ not part of the model."
        readOnly: true
        x-looker-nullable: false
      week_start_day:
        type: "string"
        description: "The name of the starting day of the week. Valid values are:\
          \ \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"\
          , \"sunday\"."
        readOnly: true
        x-looker-values:
        - "monday"
        - "tuesday"
        - "wednesday"
        - "thursday"
        - "friday"
        - "saturday"
        - "sunday"
        x-looker-nullable: false
    x-looker-status: "stable"
  LookmlModelExploreFieldEnumeration:
    properties:
      label:
        type: "string"
        description: "Label"
        readOnly: true
        x-looker-nullable: true
      value:
        type: "string"
        format: "any"
        description: "Value"
        readOnly: true
        x-looker-polymorphic-types:
        - type: "string"
        - type: "number"
          format: "float"
        x-looker-nullable: true
    x-looker-status: "stable"
  LookmlModelExploreFieldTimeInterval:
    properties:
      name:
        type: "string"
        description: "The type of time interval this field represents a grouping of.\
          \ Valid values are: \"day\", \"hour\", \"minute\", \"month\", \"year\"."
        readOnly: true
        x-looker-values:
        - "day"
        - "hour"
        - "minute"
        - "month"
        - "year"
        x-looker-nullable: false
      count:
        type: "integer"
        format: "int64"
        description: "The number of intervals this field represents a grouping of."
        readOnly: true
        x-looker-nullable: false
    x-looker-status: "stable"
  LookmlModelExploreFieldSqlCase:
    properties:
      value:
        type: "string"
        description: "SQL Case label value"
        readOnly: true
        x-looker-nullable: true
      condition:
        type: "string"
        description: "SQL Case condition expression"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  LookmlModelExploreFieldMapLayer:
    properties:
      url:
        type: "string"
        description: "URL to the map layer resource."
        readOnly: true
        x-looker-nullable: false
      name:
        type: "string"
        description: "Name of the map layer, as defined in LookML."
        readOnly: true
        x-looker-nullable: false
      feature_key:
        type: "string"
        description: "Specifies the name of the TopoJSON object that the map layer\
          \ references. If not specified, use the first object.."
        readOnly: true
        x-looker-nullable: true
      property_key:
        type: "string"
        description: "Selects which property from the TopoJSON data to plot against.\
          \ TopoJSON supports arbitrary metadata for each region. When null, the first\
          \ matching property should be used."
        readOnly: true
        x-looker-nullable: true
      property_label_key:
        type: "string"
        description: "Which property from the TopoJSON data to use to label the region.\
          \ When null, property_key should be used."
        readOnly: true
        x-looker-nullable: true
      projection:
        type: "string"
        description: "The preferred geographic projection of the map layer when displayed\
          \ in a visualization that supports multiple geographic projections."
        readOnly: true
        x-looker-nullable: true
      format:
        type: "string"
        description: "Specifies the data format of the region information. Valid values\
          \ are: \"topojson\", \"vector_tile_region\"."
        readOnly: true
        x-looker-values:
        - "topojson"
        - "vector_tile_region"
        x-looker-nullable: false
      extents_json_url:
        type: "string"
        description: "Specifies the URL to a JSON file that defines the geographic\
          \ extents of each region available in the map layer. This data is used to\
          \ automatically center the map on the available data for visualization purposes.\
          \ The JSON file must be a JSON object where the keys are the mapping value\
          \ of the feature (as specified by property_key) and the values are arrays\
          \ of four numbers representing the west longitude, south latitude, east\
          \ longitude, and north latitude extents of the region. The object must include\
          \ a key for every possible value of property_key."
        readOnly: true
        x-looker-nullable: true
      max_zoom_level:
        type: "integer"
        format: "int64"
        description: "The minimum zoom level that the map layer may be displayed at,\
          \ for visualizations that support zooming."
        readOnly: true
        x-looker-nullable: true
      min_zoom_level:
        type: "integer"
        format: "int64"
        description: "The maximum zoom level that the map layer may be displayed at,\
          \ for visualizations that support zooming."
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  LookmlModelExploreJoins:
    properties:
      name:
        type: "string"
        description: "Name of this join (and name of the view to join)"
        readOnly: true
        x-looker-nullable: true
      dependent_fields:
        type: "array"
        description: "Fields referenced by the join"
        items:
          type: "string"
        x-looker-nullable: true
      fields:
        type: "array"
        description: "Fields of the joined view to pull into this explore"
        items:
          type: "string"
        x-looker-nullable: true
      foreign_key:
        type: "string"
        description: "Name of the dimension in this explore whose value is in the\
          \ primary key of the joined view"
        readOnly: true
        x-looker-nullable: true
      from:
        type: "string"
        description: "Name of view to join"
        readOnly: true
        x-looker-nullable: true
      outer_only:
        type: "boolean"
        description: "Specifies whether all queries must use an outer join"
        readOnly: true
        x-looker-nullable: false
      relationship:
        type: "string"
        description: "many_to_one, one_to_one, one_to_many, many_to_many"
        readOnly: true
        x-looker-nullable: true
      required_joins:
        type: "array"
        description: "Names of joins that must always be included in SQL queries"
        items:
          type: "string"
        x-looker-nullable: true
      sql_foreign_key:
        type: "string"
        description: "SQL expression that produces a foreign key"
        readOnly: true
        x-looker-nullable: true
      sql_on:
        type: "string"
        description: "SQL ON expression describing the join condition"
        readOnly: true
        x-looker-nullable: true
      sql_table_name:
        type: "string"
        description: "SQL table name to join"
        readOnly: true
        x-looker-nullable: true
      type:
        type: "string"
        description: "The join type: left_outer, full_outer, inner, or cross"
        readOnly: true
        x-looker-nullable: true
      view_label:
        type: "string"
        description: "Label to display in UI selectors"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  LookmlModel:
    properties:
      allowed_db_connection_names:
        type: "array"
        description: "Array of names of connections this model is allowed to use"
        items:
          type: "string"
        x-looker-nullable: true
      explores:
        type: "array"
        description: "Array of explores (if has_content)"
        items:
          $ref: "#/definitions/LookmlModelNavExplore"
        x-looker-nullable: true
      has_content:
        type: "boolean"
        description: "Does this model declaration have have lookml content?"
        readOnly: true
        x-looker-nullable: false
      label:
        type: "string"
        description: "UI-friendly name for this model"
        readOnly: true
        x-looker-nullable: true
      name:
        type: "string"
        description: "Name of the model. Also used as the unique identifier"
        x-looker-nullable: true
      project_name:
        type: "string"
        description: "Name of project containing the model"
        x-looker-nullable: true
      unlimited_db_connections:
        type: "boolean"
        description: "Is this model allowed to use all current and future connections"
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  Manifest:
    properties:
      name:
        type: "string"
        description: "Manifest project name"
        readOnly: true
        x-looker-nullable: true
      imports:
        type: "array"
        description: "Imports for a project"
        items:
          $ref: "#/definitions/ImportedProject"
        x-looker-nullable: true
      localization_settings:
        description: "Localization settings for a project"
        $ref: "#/definitions/LocalizationSettings"
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  ModelSet:
    properties:
      all_access:
        type: "boolean"
        readOnly: true
        x-looker-nullable: false
      built_in:
        type: "boolean"
        readOnly: true
        x-looker-nullable: false
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      models:
        type: "array"
        items:
          type: "string"
        x-looker-nullable: true
      name:
        type: "string"
        description: "Name of ModelSet"
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  OIDCConfig:
    properties:
      alternate_email_login_allowed:
        type: "boolean"
        description: "Allow alternate email-based login via '/login/email' for admins\
          \ and for specified users with the 'login_special_email' permission. This\
          \ option is useful as a fallback during ldap setup, if ldap config problems\
          \ occur later, or if you need to support some users who are not in your\
          \ ldap directory. Looker email/password logins are always disabled for regular\
          \ users when ldap is enabled."
        x-looker-nullable: false
      audience:
        type: "string"
        description: "OpenID Provider Audience"
        x-looker-nullable: true
      auth_requires_role:
        type: "boolean"
        description: "Users will not be allowed to login at all unless a role for\
          \ them is found in OIDC if set to true"
        x-looker-nullable: false
      authorization_endpoint:
        type: "string"
        description: "OpenID Provider Authorization Url"
        x-looker-nullable: true
      default_new_user_group_ids:
        type: "array"
        description: "(Write-Only) Array of ids of groups that will be applied to\
          \ new users the first time they login via OIDC"
        items:
          type: "integer"
          format: "int64"
        x-looker-write-only: true
        x-looker-nullable: true
      default_new_user_groups:
        type: "array"
        description: "(Read-only) Groups that will be applied to new users the first\
          \ time they login via OIDC"
        items:
          $ref: "#/definitions/Group"
        x-looker-nullable: true
      default_new_user_role_ids:
        type: "array"
        description: "(Write-Only) Array of ids of roles that will be applied to new\
          \ users the first time they login via OIDC"
        items:
          type: "integer"
          format: "int64"
        x-looker-write-only: true
        x-looker-nullable: true
      default_new_user_roles:
        type: "array"
        description: "(Read-only) Roles that will be applied to new users the first\
          \ time they login via OIDC"
        items:
          $ref: "#/definitions/Role"
        x-looker-nullable: true
      enabled:
        type: "boolean"
        description: "Enable/Disable OIDC authentication for the server"
        x-looker-nullable: false
      groups:
        type: "array"
        description: "(Read-only) Array of mappings between OIDC Groups and Looker\
          \ Roles"
        items:
          $ref: "#/definitions/OIDCGroupRead"
        x-looker-nullable: true
      groups_attribute:
        type: "string"
        description: "Name of user record attributes used to indicate groups. Used\
          \ when 'groups_finder_type' is set to 'grouped_attribute_values'"
        x-looker-nullable: true
      groups_with_role_ids:
        type: "array"
        description: "(Read/Write) Array of mappings between OIDC Groups and arrays\
          \ of Looker Role ids"
        items:
          $ref: "#/definitions/OIDCGroupWrite"
        x-looker-nullable: true
      identifier:
        type: "string"
        description: "Relying Party Identifier (provided by OpenID Provider)"
        x-looker-nullable: true
      issuer:
        type: "string"
        description: "OpenID Provider Issuer"
        x-looker-nullable: true
      modified_at:
        type: "string"
        description: "When this config was last modified"
        readOnly: true
        x-looker-nullable: true
      modified_by:
        type: "string"
        description: "User id of user who last modified this config"
        readOnly: true
        x-looker-nullable: true
      new_user_migration_types:
        type: "string"
        description: "Merge first-time oidc login to existing user account by email\
          \ addresses. When a user logs in for the first time via oidc this option\
          \ will connect this user into their existing account by finding the account\
          \ with a matching email address by testing the given types of credentials\
          \ for existing users. Otherwise a new user account will be created for the\
          \ user. This list (if provided) must be a comma separated list of string\
          \ like 'email,ldap,google'"
        x-looker-nullable: true
      scopes:
        type: "array"
        description: "Array of scopes to request."
        items:
          type: "string"
        x-looker-nullable: true
      secret:
        type: "string"
        description: "(Write-Only) Relying Party Secret (provided by OpenID Provider)"
        x-looker-write-only: true
        x-looker-nullable: true
      set_roles_from_groups:
        type: "boolean"
        description: "Set user roles in Looker based on groups from OIDC"
        x-looker-nullable: false
      test_slug:
        type: "string"
        description: "Slug to identify configurations that are created in order to\
          \ run a OIDC config test"
        readOnly: true
        x-looker-nullable: true
      token_endpoint:
        type: "string"
        description: "OpenID Provider Token Url"
        x-looker-nullable: true
      user_attribute_map_email:
        type: "string"
        description: "Name of user record attributes used to indicate email address\
          \ field"
        x-looker-nullable: true
      user_attribute_map_first_name:
        type: "string"
        description: "Name of user record attributes used to indicate first name"
        x-looker-nullable: true
      user_attribute_map_last_name:
        type: "string"
        description: "Name of user record attributes used to indicate last name"
        x-looker-nullable: true
      user_attributes:
        type: "array"
        description: "(Read-only) Array of mappings between OIDC User Attributes and\
          \ Looker User Attributes"
        items:
          $ref: "#/definitions/OIDCUserAttributeRead"
        x-looker-nullable: true
      user_attributes_with_ids:
        type: "array"
        description: "(Read/Write) Array of mappings between OIDC User Attributes\
          \ and arrays of Looker User Attribute ids"
        items:
          $ref: "#/definitions/OIDCUserAttributeWrite"
        x-looker-nullable: true
      userinfo_endpoint:
        type: "string"
        description: "OpenID Provider User Information Url"
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  OIDCGroupRead:
    properties:
      name:
        type: "string"
        description: "Name of group in OIDC"
        readOnly: true
        x-looker-nullable: true
      roles:
        type: "array"
        description: "Looker Roles"
        items:
          $ref: "#/definitions/Role"
        x-looker-nullable: true
    x-looker-status: "stable"
  OIDCGroupWrite:
    properties:
      name:
        type: "string"
        description: "Name of group in OIDC"
        x-looker-nullable: true
      role_ids:
        type: "array"
        description: "Looker Role Ids"
        items:
          type: "integer"
          format: "int64"
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  OIDCUserAttributeRead:
    properties:
      name:
        type: "string"
        description: "Name of User Attribute in OIDC"
        readOnly: true
        x-looker-nullable: true
      required:
        type: "boolean"
        description: "Required to be in OIDC assertion for login to be allowed to\
          \ succeed"
        readOnly: true
        x-looker-nullable: false
      user_attributes:
        type: "array"
        description: "Looker User Attributes"
        items:
          $ref: "#/definitions/UserAttribute"
        x-looker-nullable: true
    x-looker-status: "stable"
  OIDCUserAttributeWrite:
    properties:
      name:
        type: "string"
        description: "Name of User Attribute in OIDC"
        x-looker-nullable: true
      required:
        type: "boolean"
        description: "Required to be in OIDC assertion for login to be allowed to\
          \ succeed"
        x-looker-nullable: false
      user_attribute_ids:
        type: "array"
        description: "Looker User Attribute Ids"
        items:
          type: "integer"
          format: "int64"
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  Permission:
    properties:
      permission:
        type: "string"
        description: "Permission symbol"
        readOnly: true
        x-looker-nullable: true
      parent:
        type: "string"
        description: "Dependency parent symbol"
        readOnly: true
        x-looker-nullable: true
      description:
        type: "string"
        description: "Description"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  PermissionSet:
    properties:
      all_access:
        type: "boolean"
        readOnly: true
        x-looker-nullable: false
      built_in:
        type: "boolean"
        readOnly: true
        x-looker-nullable: false
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      name:
        type: "string"
        description: "Name of PermissionSet"
        x-looker-nullable: true
      permissions:
        type: "array"
        items:
          type: "string"
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  PrefetchDashboardFilterValue:
    properties:
      name:
        type: "string"
        description: "Dashboard filter name."
        readOnly: true
        x-looker-nullable: true
      value:
        type: "string"
        description: "Dashboard filter value"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  PrefetchAccessFilterValue:
    properties:
      field:
        type: "string"
        description: "Access filter field name."
        readOnly: true
        x-looker-nullable: true
      model:
        type: "string"
        description: "Access filter model name."
        readOnly: true
        x-looker-nullable: true
      value:
        type: "string"
        description: "Access filter value"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  Prefetch:
    properties:
      computation_time:
        type: "number"
        format: "float"
        description: "Number of seconds it took to compute results for prefetch."
        readOnly: true
        x-looker-nullable: true
      created_at:
        type: "string"
        format: "date-time"
        description: "Time when prefetch was created."
        readOnly: true
        x-looker-nullable: true
      hit_count:
        type: "integer"
        format: "int64"
        description: "Number of times prefetch has been accessed."
        readOnly: true
        x-looker-nullable: true
      result_size_bytes:
        type: "integer"
        format: "int64"
        description: "Size of result."
        readOnly: true
        x-looker-nullable: true
      touched_at:
        type: "string"
        format: "date-time"
        description: "Time when prefetch was last accessed."
        readOnly: true
        x-looker-nullable: true
      ttl:
        type: "integer"
        format: "int64"
        description: "Number of seconds prefetch will live for."
        x-looker-nullable: true
      value:
        type: "object"
        description: "Data associated with the queries stored by prefetching the data"
        additionalProperties:
          type: "string"
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  PrefetchDashboardRequest:
    properties:
      computation_time:
        type: "number"
        format: "float"
        description: "Number of seconds it took to compute results for prefetch."
        readOnly: true
        x-looker-nullable: true
      created_at:
        type: "string"
        format: "date-time"
        description: "Time when prefetch was created."
        readOnly: true
        x-looker-nullable: true
      hit_count:
        type: "integer"
        format: "int64"
        description: "Number of times prefetch has been accessed."
        readOnly: true
        x-looker-nullable: true
      result_size_bytes:
        type: "integer"
        format: "int64"
        description: "Size of result."
        readOnly: true
        x-looker-nullable: true
      touched_at:
        type: "string"
        format: "date-time"
        description: "Time when prefetch was last accessed."
        readOnly: true
        x-looker-nullable: true
      ttl:
        type: "integer"
        format: "int64"
        description: "Number of seconds prefetch will live for."
        x-looker-nullable: true
      value:
        type: "object"
        description: "Data associated with the queries stored by prefetching the data"
        additionalProperties:
          type: "string"
        x-looker-nullable: true
      access_filters:
        type: "array"
        description: "Access filters to apply when running queries for prefetch."
        items:
          $ref: "#/definitions/PrefetchAccessFilterValue"
        x-looker-nullable: true
      dashboard_filters:
        type: "array"
        description: "Dashboard filters to apply when running queries for prefetch."
        items:
          $ref: "#/definitions/PrefetchDashboardFilterValue"
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  ProjectFile:
    properties:
      id:
        type: "string"
        description: "An opaque token uniquely identifying a file within a project.\
          \ Avoid parsing or decomposing the text of this token. This token is stable\
          \ within a Looker release but may change between Looker releases"
        readOnly: true
        x-looker-nullable: false
      path:
        type: "string"
        description: "Path, file name, and extension of the file relative to the project\
          \ root directory"
        readOnly: true
        x-looker-nullable: true
      title:
        type: "string"
        description: "Display name"
        readOnly: true
        x-looker-nullable: true
      type:
        type: "string"
        description: "File type: model, view, etc"
        readOnly: true
        x-looker-nullable: true
      extension:
        type: "string"
        description: "The extension of the file: .view.lkml, .model.lkml, etc"
        readOnly: true
        x-looker-nullable: true
      mime_type:
        type: "string"
        description: "File mime type"
        readOnly: true
        x-looker-nullable: true
      git_status:
        description: "Status of the file according to git"
        $ref: "#/definitions/GitStatus"
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  Project:
    properties:
      id:
        type: "string"
        description: "Project Id"
        readOnly: true
        x-looker-nullable: false
      name:
        type: "string"
        description: "Project display name"
        x-looker-nullable: false
      uses_git:
        type: "boolean"
        description: "If true the project is configured with a git repository"
        readOnly: true
        x-looker-nullable: false
      git_remote_url:
        type: "string"
        format: "uri"
        description: "Git remote repository url"
        x-looker-nullable: true
      git_username:
        type: "string"
        description: "Git username for HTTPS authentication. (For production only,\
          \ if using user attributes.)"
        x-looker-nullable: true
      git_password:
        type: "string"
        description: "(Write-Only) Git password for HTTPS authentication. (For production\
          \ only, if using user attributes.)"
        x-looker-write-only: true
        x-looker-nullable: true
      git_username_user_attribute:
        type: "string"
        description: "User attribute name for username in per-user HTTPS authentication."
        x-looker-nullable: true
      git_password_user_attribute:
        type: "string"
        description: "User attribute name for password in per-user HTTPS authentication."
        x-looker-nullable: true
      git_service_name:
        type: "string"
        description: "Name of the git service provider"
        x-looker-nullable: true
      deploy_secret:
        type: "string"
        description: "(Write-Only) Optional secret token with which to authenticate\
          \ requests to the webhook deploy endpoint. If not set, endpoint is unauthenticated."
        x-looker-write-only: true
        x-looker-nullable: true
      unset_deploy_secret:
        type: "boolean"
        description: "(Write-Only) When true, unsets the deploy secret to allow unauthenticated\
          \ access to the webhook deploy endpoint."
        x-looker-write-only: true
        x-looker-nullable: false
      pull_request_mode:
        type: "string"
        description: "The git pull request policy for this project. Valid values are:\
          \ \"off\", \"links\", \"recommended\", \"required\"."
        x-looker-values:
        - "off"
        - "links"
        - "recommended"
        - "required"
        x-looker-nullable: false
      validation_required:
        type: "boolean"
        description: "Validation policy: If true, the project must pass validation\
          \ checks before project changes can be committed to the git repository"
        x-looker-nullable: false
      allow_warnings:
        type: "boolean"
        description: "Validation policy: If true, the project can be committed with\
          \ warnings when `validation_required` is true. (`allow_warnings` does nothing\
          \ if `validation_required` is false)."
        x-looker-nullable: false
      is_example:
        type: "boolean"
        description: "If true the project is an example project and cannot be modified"
        readOnly: true
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  ProjectError:
    properties:
      code:
        type: "string"
        description: "A stable token that uniquely identifies this class of error,\
          \ ignoring parameter values. Error message text may vary due to parameters\
          \ or localization, but error codes do not. For example, a \"File not found\"\
          \ error will have the same error code regardless of the filename in question\
          \ or the user's display language"
        readOnly: true
        x-looker-nullable: true
      severity:
        type: "string"
        description: "Severity: fatal, error, warning, info, success"
        readOnly: true
        x-looker-nullable: true
      kind:
        type: "string"
        description: "Error classification: syntax, deprecation, model_configuration,\
          \ etc"
        readOnly: true
        x-looker-nullable: true
      message:
        type: "string"
        description: "Error message which may contain information such as dashboard\
          \ or model names that may be considered sensitive in some use cases. Avoid\
          \ storing or sending this message outside of Looker"
        readOnly: true
        x-looker-nullable: true
      field_name:
        type: "string"
        description: "The field associated with this error"
        readOnly: true
        x-looker-nullable: true
      file_path:
        type: "string"
        description: "Name of the file containing this error"
        readOnly: true
        x-looker-nullable: true
      line_number:
        type: "integer"
        format: "int64"
        description: "Line number in the file of this error"
        readOnly: true
        x-looker-nullable: true
      model_id:
        type: "string"
        description: "The model associated with this error"
        readOnly: true
        x-looker-nullable: true
      explore:
        type: "string"
        description: "The explore associated with this error"
        readOnly: true
        x-looker-nullable: true
      help_url:
        type: "string"
        description: "A link to Looker documentation about this error"
        readOnly: true
        x-looker-nullable: true
      params:
        type: "object"
        description: "Error parameters"
        additionalProperties:
          type: "string"
        x-looker-nullable: true
      sanitized_message:
        type: "string"
        description: "A version of the error message that does not contain potentially\
          \ sensitive information. Suitable for situations in which messages are stored\
          \ or sent to consumers outside of Looker, such as external logs. Sanitized\
          \ messages will display \"(?)\" where sensitive information would appear\
          \ in the corresponding non-sanitized message"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "beta"
  ModelsNotValidated:
    properties:
      name:
        type: "string"
        description: "Model name"
        readOnly: true
        x-looker-nullable: true
      project_file_id:
        type: "string"
        description: "Project file"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "beta"
  ProjectValidation:
    properties:
      errors:
        type: "array"
        description: "A list of project errors"
        items:
          $ref: "#/definitions/ProjectError"
        x-looker-nullable: true
      project_digest:
        type: "string"
        description: "A hash value computed from the project's current state"
        readOnly: true
        x-looker-nullable: true
      models_not_validated:
        type: "array"
        description: "A list of models which were not fully validated"
        items:
          $ref: "#/definitions/ModelsNotValidated"
        x-looker-nullable: true
      computation_time:
        type: "number"
        format: "float"
        description: "Duration of project validation in seconds"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "beta"
  ProjectValidationCache:
    properties:
      errors:
        type: "array"
        description: "A list of project errors"
        items:
          $ref: "#/definitions/ProjectError"
        x-looker-nullable: true
      project_digest:
        type: "string"
        description: "A hash value computed from the project's current state"
        readOnly: true
        x-looker-nullable: true
      models_not_validated:
        type: "array"
        description: "A list of models which were not fully validated"
        items:
          $ref: "#/definitions/ModelsNotValidated"
        x-looker-nullable: true
      computation_time:
        type: "number"
        format: "float"
        description: "Duration of project validation in seconds"
        readOnly: true
        x-looker-nullable: true
      stale:
        type: "boolean"
        description: "If true, the cached project validation results are no longer\
          \ accurate because the project has changed since the cached results were\
          \ calculated"
        readOnly: true
        x-looker-nullable: false
    x-looker-status: "beta"
  ProjectWorkspace:
    properties:
      project_id:
        type: "string"
        description: "The id of the project"
        readOnly: true
        x-looker-nullable: true
      workspace_id:
        type: "string"
        description: "The id of the local workspace containing the project files"
        readOnly: true
        x-looker-nullable: true
      git_status:
        type: "string"
        description: "The status of the local git directory"
        readOnly: true
        x-looker-nullable: true
      git_head:
        type: "string"
        description: "Git head revision name"
        readOnly: true
        x-looker-nullable: true
      git_branch:
        description: "GitBranch"
        $ref: "#/definitions/GitBranch"
      lookml_type:
        type: "string"
        description: "The lookml syntax used by all files in this project"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  Query:
    required:
    - "model"
    - "view"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      model:
        type: "string"
        description: "Model"
        x-looker-nullable: false
      view:
        type: "string"
        description: "Explore Name"
        x-looker-nullable: false
      fields:
        type: "array"
        description: "Fields"
        items:
          type: "string"
        x-looker-nullable: true
      pivots:
        type: "array"
        description: "Pivots"
        items:
          type: "string"
        x-looker-nullable: true
      fill_fields:
        type: "array"
        description: "Fill Fields"
        items:
          type: "string"
        x-looker-nullable: true
      filters:
        type: "object"
        description: "Filters"
        additionalProperties:
          type: "string"
        x-looker-nullable: true
      filter_expression:
        type: "string"
        description: "Filter Expression"
        x-looker-nullable: true
      sorts:
        type: "array"
        description: "Sorting for the query results. Use the format `[\"view.field\"\
          , ...]` to sort on fields in ascending order. Use the format `[\"view.field\
          \ desc\", ...]` to sort on fields in descending order. Use `[\"__UNSORTED__\"\
          ]` (2 underscores before and after) to disable sorting entirely. Empty sorts\
          \ `[]` will trigger a default sort."
        items:
          type: "string"
        x-looker-nullable: true
      limit:
        type: "string"
        description: "Limit"
        x-looker-nullable: true
      column_limit:
        type: "string"
        description: "Column Limit"
        x-looker-nullable: true
      total:
        type: "boolean"
        description: "Total"
        x-looker-nullable: false
      row_total:
        type: "string"
        description: "Raw Total"
        x-looker-nullable: true
      subtotals:
        type: "array"
        description: "Fields on which to run subtotals"
        items:
          type: "string"
        x-looker-nullable: true
      runtime:
        type: "number"
        format: "double"
        description: "Runtime"
        x-looker-nullable: true
      vis_config:
        type: "object"
        description: "Visualization configuration properties. These properties are\
          \ typically opaque and differ based on the type of visualization used. There\
          \ is no specified set of allowed keys. The values can be any type supported\
          \ by JSON. A \"type\" key with a string value is often present, and is used\
          \ by Looker to determine which visualization to present. Visualizations\
          \ ignore unknown vis_config properties."
        additionalProperties:
          type: "string"
          format: "any"
        x-looker-nullable: true
      filter_config:
        type: "object"
        description: "The filter_config represents the state of the filter UI on the\
          \ explore page for a given query. When running a query via the Looker UI,\
          \ this parameter takes precedence over \"filters\". When creating a query\
          \ or modifying an existing query, \"filter_config\" should be set to null.\
          \ Setting it to any other value could cause unexpected filtering behavior.\
          \ The format should be considered opaque."
        additionalProperties:
          type: "string"
          format: "any"
        x-looker-nullable: true
      visible_ui_sections:
        type: "string"
        description: "Visible UI Sections"
        x-looker-nullable: true
      slug:
        type: "string"
        description: "Slug"
        readOnly: true
        x-looker-nullable: true
      dynamic_fields:
        type: "array"
        description: "Dynamic Fields"
        items:
          type: "string"
          format: "any"
        x-looker-nullable: true
      client_id:
        type: "string"
        description: "Client Id: used to generate shortened explore URLs. If set by\
          \ client, must be a unique 22 character alphanumeric string. Otherwise one\
          \ will be generated."
        x-looker-nullable: true
      share_url:
        type: "string"
        description: "Share Url"
        readOnly: true
        x-looker-nullable: true
      expanded_share_url:
        type: "string"
        description: "Expanded Share Url"
        readOnly: true
        x-looker-nullable: true
      url:
        type: "string"
        description: "Expanded Url"
        readOnly: true
        x-looker-nullable: true
      query_timezone:
        type: "string"
        description: "Query Timezone"
        x-looker-nullable: true
      has_table_calculations:
        type: "boolean"
        description: "Has Table Calculations"
        readOnly: true
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  CreateQueryTask:
    required:
    - "query_id"
    - "result_format"
    properties:
      query_id:
        type: "integer"
        format: "int64"
        description: "Id of query to run"
        x-looker-nullable: true
      result_format:
        type: "string"
        description: "Desired result format"
        x-looker-nullable: true
      source:
        type: "string"
        description: "Source of query task"
        x-looker-nullable: true
      deferred:
        type: "boolean"
        description: "Create the task but defer execution"
        x-looker-nullable: false
      look_id:
        type: "integer"
        format: "int64"
        description: "Id of look associated with query."
        x-looker-nullable: true
      dashboard_id:
        type: "string"
        description: "Id of dashboard associated with query."
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  QueryTask:
    properties:
      id:
        type: "string"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      query_id:
        type: "integer"
        format: "int64"
        description: "Id of query"
        x-looker-nullable: true
      query:
        description: "Query"
        $ref: "#/definitions/Query"
      generate_links:
        type: "boolean"
        description: "whether or not to generate links in the query response."
        x-looker-nullable: false
      force_production:
        type: "boolean"
        description: "Use production models to run query (even is user is in dev mode)."
        x-looker-nullable: false
      path_prefix:
        type: "string"
        description: "Prefix to use for drill links."
        x-looker-nullable: true
      cache:
        type: "boolean"
        description: "Whether or not to use the cache"
        x-looker-nullable: false
      server_table_calcs:
        type: "boolean"
        description: "Whether or not to run table calculations on the server"
        x-looker-nullable: false
      cache_only:
        type: "boolean"
        description: "Retrieve any results from cache even if the results have expired."
        x-looker-nullable: false
      cache_key:
        type: "string"
        description: "cache key used to cache query."
        readOnly: true
        x-looker-nullable: true
      status:
        type: "string"
        description: "Status of query task."
        x-looker-nullable: true
      source:
        type: "string"
        description: "Source of query task."
        x-looker-nullable: true
      runtime:
        type: "number"
        format: "float"
        description: "Runtime of prior queries."
        readOnly: true
        x-looker-nullable: true
      rebuild_pdts:
        type: "boolean"
        description: "Rebuild PDTS used in query."
        x-looker-nullable: false
      result_source:
        type: "string"
        description: "Source of the results of the query."
        readOnly: true
        x-looker-nullable: true
      look_id:
        type: "integer"
        format: "int64"
        description: "Id of look associated with query."
        x-looker-nullable: true
      dashboard_id:
        type: "string"
        description: "Id of dashboard associated with query."
        x-looker-nullable: true
      result_format:
        type: "string"
        description: "The data format of the query results."
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  RenderTask:
    properties:
      created_at:
        type: "string"
        description: "Date/Time render task was created"
        readOnly: true
        x-looker-nullable: true
      dashboard_filters:
        type: "string"
        description: "Filter values to apply to the dashboard queries, in URL query\
          \ format"
        readOnly: true
        x-looker-nullable: true
      dashboard_id:
        type: "integer"
        format: "int64"
        description: "Id of dashboard to render"
        readOnly: true
        x-looker-nullable: true
      dashboard_style:
        type: "string"
        description: "Dashboard layout style: single_column or tiled"
        readOnly: true
        x-looker-nullable: true
      finalized_at:
        type: "string"
        description: "Date/Time render task was completed"
        readOnly: true
        x-looker-nullable: true
      height:
        type: "integer"
        format: "int64"
        description: "Output height in pixels. Flowed layouts may ignore this value."
        readOnly: true
        x-looker-nullable: true
      id:
        type: "string"
        description: "Id of this render task"
        readOnly: true
        x-looker-nullable: false
      look_id:
        type: "integer"
        format: "int64"
        description: "Id of look to render"
        readOnly: true
        x-looker-nullable: true
      lookml_dashboard_id:
        type: "string"
        description: "Id of lookml dashboard to render"
        readOnly: true
        x-looker-nullable: true
      query_id:
        type: "integer"
        format: "int64"
        description: "Id of query to render"
        readOnly: true
        x-looker-nullable: true
      query_runtime:
        type: "number"
        format: "double"
        description: "Number of seconds elapsed running queries"
        readOnly: true
        x-looker-nullable: true
      render_runtime:
        type: "number"
        format: "double"
        description: "Number of seconds elapsed rendering data"
        readOnly: true
        x-looker-nullable: true
      result_format:
        type: "string"
        description: "Output format: pdf, png, or jpg"
        readOnly: true
        x-looker-nullable: true
      runtime:
        type: "number"
        format: "double"
        description: "Total seconds elapsed for render task"
        readOnly: true
        x-looker-nullable: true
      status:
        type: "string"
        description: "Render task status: enqueued_for_query, querying, enqueued_for_render,\
          \ rendering, success, failure"
        readOnly: true
        x-looker-nullable: true
      status_detail:
        type: "string"
        description: "Additional information about the current status"
        readOnly: true
        x-looker-nullable: true
      user_id:
        type: "integer"
        format: "int64"
        description: "The user account permissions in which the render task will execute"
        readOnly: true
        x-looker-nullable: true
      width:
        type: "integer"
        format: "int64"
        description: "Output width in pixels"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  CreateDashboardRenderTask:
    properties:
      dashboard_filters:
        type: "string"
        description: "Filter values to apply to the dashboard queries, in URL query\
          \ format"
        x-looker-nullable: true
      dashboard_style:
        type: "string"
        description: "Dashboard layout style: single_column or tiled"
        x-looker-nullable: true
    x-looker-status: "beta"
  ResultMakerFilterablesListen:
    properties:
      dashboard_filter_name:
        type: "string"
        description: "The name of a dashboard filter to listen to."
        x-looker-nullable: true
      field:
        type: "string"
        description: "The name of the field in the filterable to filter with the value\
          \ of the dashboard filter."
        x-looker-nullable: true
    x-looker-status: "beta"
  ResultMakerFilterables:
    properties:
      model:
        type: "string"
        description: "The model this filterable comes from (used for field suggestions)."
        readOnly: true
        x-looker-nullable: true
      view:
        type: "string"
        description: "The view this filterable comes from (used for field suggestions)."
        readOnly: true
        x-looker-nullable: true
      name:
        type: "string"
        description: "The name of the filterable thing (Query or Merged Results)."
        readOnly: true
        x-looker-nullable: true
      listen:
        type: "array"
        description: "array of dashboard_filter_name: and field: objects."
        items:
          $ref: "#/definitions/ResultMakerFilterablesListen"
        x-looker-nullable: true
    x-looker-status: "beta"
  ResultMakerWithIdVisConfigAndDynamicFields:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id."
        readOnly: true
        x-looker-nullable: false
      dynamic_fields:
        type: "string"
        description: "JSON string of dynamic field information."
        readOnly: true
        x-looker-nullable: true
      filterables:
        type: "array"
        description: "array of items that can be filtered and information about them."
        items:
          $ref: "#/definitions/ResultMakerFilterables"
        x-looker-nullable: true
      sorts:
        type: "string"
        format: "any"
        description: "Sorts of the constituent Look, Query, or Merge Query"
        readOnly: true
        x-looker-nullable: true
      merge_result_id:
        type: "string"
        description: "ID of merge result if this is a merge_result."
        readOnly: true
        x-looker-nullable: true
      total:
        type: "boolean"
        description: "Total of the constituent Look, Query, or Merge Query"
        readOnly: true
        x-looker-nullable: false
      query_id:
        type: "integer"
        format: "int64"
        description: "ID of query if this is a query."
        readOnly: true
        x-looker-nullable: true
      query:
        description: "Query"
        $ref: "#/definitions/Query"
      vis_config:
        type: "string"
        format: "any"
        description: "Vis config of the constituent Query, or Merge Query."
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "beta"
  Role:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      name:
        type: "string"
        description: "Name of Role"
        x-looker-nullable: true
      permission_set:
        description: "(Read only) Permission set"
        $ref: "#/definitions/PermissionSet"
      permission_set_id:
        type: "integer"
        format: "int64"
        description: "(Write-Only) Id of permission set"
        x-looker-write-only: true
        x-looker-nullable: true
      model_set:
        description: "(Read only) Model set"
        $ref: "#/definitions/ModelSet"
      model_set_id:
        type: "integer"
        format: "int64"
        description: "(Write-Only) Id of model set"
        x-looker-write-only: true
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      users_url:
        type: "string"
        format: "uri"
        description: "Link to get list of users with this role"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  RunningQueries:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      user:
        description: "User who initiated the query"
        $ref: "#/definitions/UserPublic"
      query:
        description: "Query that was run"
        $ref: "#/definitions/Query"
      sql_query:
        description: "SQL Query that was run"
        $ref: "#/definitions/SqlQuery"
      look:
        description: "Look of query that was run"
        $ref: "#/definitions/LookBasic"
      created_at:
        type: "string"
        description: "Date/Time Query was initiated"
        readOnly: true
        x-looker-nullable: true
      completed_at:
        type: "string"
        description: "Date/Time Query was completed"
        readOnly: true
        x-looker-nullable: true
      query_id:
        type: "string"
        description: "Query Id"
        readOnly: true
        x-looker-nullable: true
      source:
        type: "string"
        description: "Source (look, dashboard, queryrunner, explore, etc.)"
        readOnly: true
        x-looker-nullable: true
      node_id:
        type: "string"
        description: "Node Id"
        readOnly: true
        x-looker-nullable: true
      slug:
        type: "string"
        description: "Slug"
        readOnly: true
        x-looker-nullable: true
      query_task_id:
        type: "string"
        description: "ID of a Query Task"
        readOnly: true
        x-looker-nullable: true
      cache_key:
        type: "string"
        description: "Cache Key"
        readOnly: true
        x-looker-nullable: true
      connection_name:
        type: "string"
        description: "Connection"
        readOnly: true
        x-looker-nullable: true
      dialect:
        type: "string"
        description: "Dialect"
        readOnly: true
        x-looker-nullable: true
      connection_id:
        type: "string"
        description: "Connection ID"
        readOnly: true
        x-looker-nullable: true
      message:
        type: "string"
        description: "Additional Information(Error message or verbose status)"
        readOnly: true
        x-looker-nullable: true
      status:
        type: "string"
        description: "Status description"
        readOnly: true
        x-looker-nullable: true
      runtime:
        type: "number"
        format: "double"
        description: "Number of seconds elapsed running the Query"
        readOnly: true
        x-looker-nullable: true
      sql:
        type: "string"
        description: "SQL text of the query as run"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  SamlConfig:
    properties:
      enabled:
        type: "boolean"
        description: "Enable/Disable Saml authentication for the server"
        x-looker-nullable: false
      idp_cert:
        type: "string"
        description: "Identity Provider Certificate (provided by IdP)"
        x-looker-nullable: true
      idp_url:
        type: "string"
        description: "Identity Provider Url (provided by IdP)"
        x-looker-nullable: true
      idp_issuer:
        type: "string"
        description: "Identity Provider Issuer (provided by IdP)"
        x-looker-nullable: true
      idp_audience:
        type: "string"
        description: "Identity Provider Audience (set in IdP config). Optional in\
          \ Looker. Set this only if you want Looker to validate the audience value\
          \ returned by the IdP."
        x-looker-nullable: true
      allowed_clock_drift:
        type: "integer"
        format: "int64"
        description: "Count of seconds of clock drift to allow when validating timestamps\
          \ of assertions."
        x-looker-nullable: true
      user_attribute_map_email:
        type: "string"
        description: "Name of user record attributes used to indicate email address\
          \ field"
        x-looker-nullable: true
      user_attribute_map_first_name:
        type: "string"
        description: "Name of user record attributes used to indicate first name"
        x-looker-nullable: true
      user_attribute_map_last_name:
        type: "string"
        description: "Name of user record attributes used to indicate last name"
        x-looker-nullable: true
      new_user_migration_types:
        type: "string"
        description: "Merge first-time saml login to existing user account by email\
          \ addresses. When a user logs in for the first time via saml this option\
          \ will connect this user into their existing account by finding the account\
          \ with a matching email address by testing the given types of credentials\
          \ for existing users. Otherwise a new user account will be created for the\
          \ user. This list (if provided) must be a comma separated list of string\
          \ like 'email,ldap,google'"
        x-looker-nullable: true
      alternate_email_login_allowed:
        type: "boolean"
        description: "Allow alternate email-based login via '/login/email' for admins\
          \ and for specified users with the 'login_special_email' permission. This\
          \ option is useful as a fallback during ldap setup, if ldap config problems\
          \ occur later, or if you need to support some users who are not in your\
          \ ldap directory. Looker email/password logins are always disabled for regular\
          \ users when ldap is enabled."
        x-looker-nullable: false
      test_slug:
        type: "string"
        description: "Slug to identify configurations that are created in order to\
          \ run a Saml config test"
        readOnly: true
        x-looker-nullable: true
      modified_at:
        type: "string"
        description: "When this config was last modified"
        readOnly: true
        x-looker-nullable: true
      modified_by:
        type: "string"
        description: "User id of user who last modified this config"
        readOnly: true
        x-looker-nullable: true
      default_new_user_roles:
        type: "array"
        description: "(Read-only) Roles that will be applied to new users the first\
          \ time they login via Saml"
        items:
          $ref: "#/definitions/Role"
        x-looker-nullable: true
      default_new_user_groups:
        type: "array"
        description: "(Read-only) Groups that will be applied to new users the first\
          \ time they login via Saml"
        items:
          $ref: "#/definitions/Group"
        x-looker-nullable: true
      default_new_user_role_ids:
        type: "array"
        description: "(Write-Only) Array of ids of roles that will be applied to new\
          \ users the first time they login via Saml"
        items:
          type: "integer"
          format: "int64"
        x-looker-write-only: true
        x-looker-nullable: true
      default_new_user_group_ids:
        type: "array"
        description: "(Write-Only) Array of ids of groups that will be applied to\
          \ new users the first time they login via Saml"
        items:
          type: "integer"
          format: "int64"
        x-looker-write-only: true
        x-looker-nullable: true
      set_roles_from_groups:
        type: "boolean"
        description: "Set user roles in Looker based on groups from Saml"
        x-looker-nullable: false
      groups_attribute:
        type: "string"
        description: "Name of user record attributes used to indicate groups. Used\
          \ when 'groups_finder_type' is set to 'grouped_attribute_values'"
        x-looker-nullable: true
      groups:
        type: "array"
        description: "(Read-only) Array of mappings between Saml Groups and Looker\
          \ Roles"
        items:
          $ref: "#/definitions/SamlGroupRead"
        x-looker-nullable: true
      groups_with_role_ids:
        type: "array"
        description: "(Read/Write) Array of mappings between Saml Groups and arrays\
          \ of Looker Role ids"
        items:
          $ref: "#/definitions/SamlGroupWrite"
        x-looker-nullable: true
      auth_requires_role:
        type: "boolean"
        description: "Users will not be allowed to login at all unless a role for\
          \ them is found in Saml if set to true"
        x-looker-nullable: false
      user_attributes:
        type: "array"
        description: "(Read-only) Array of mappings between Saml User Attributes and\
          \ Looker User Attributes"
        items:
          $ref: "#/definitions/SamlUserAttributeRead"
        x-looker-nullable: true
      user_attributes_with_ids:
        type: "array"
        description: "(Read/Write) Array of mappings between Saml User Attributes\
          \ and arrays of Looker User Attribute ids"
        items:
          $ref: "#/definitions/SamlUserAttributeWrite"
        x-looker-nullable: true
      groups_finder_type:
        type: "string"
        description: "Identifier for a strategy for how Looker will find groups in\
          \ the SAML response. One of ['grouped_attribute_values', 'individual_attributes']"
        x-looker-nullable: true
      groups_member_value:
        type: "string"
        description: "Value for group attribute used to indicate membership. Used\
          \ when 'groups_finder_type' is set to 'individual_attributes'"
        x-looker-nullable: true
      bypass_login_page:
        type: "boolean"
        description: "Bypass the login page when user authentication is required.\
          \ Redirect to IdP immediately instead."
        x-looker-nullable: false
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  SamlGroupRead:
    properties:
      name:
        type: "string"
        description: "Name of group in Saml"
        readOnly: true
        x-looker-nullable: true
      roles:
        type: "array"
        description: "Looker Roles"
        items:
          $ref: "#/definitions/Role"
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to saml config"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  SamlGroupWrite:
    properties:
      name:
        type: "string"
        description: "Name of group in Saml"
        x-looker-nullable: true
      role_ids:
        type: "array"
        description: "Looker Role Ids"
        items:
          type: "integer"
          format: "int64"
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to saml config"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  SamlMetadataParseResult:
    properties:
      idp_issuer:
        type: "string"
        description: "Identify Provider Issuer"
        readOnly: true
        x-looker-nullable: true
      idp_url:
        type: "string"
        description: "Identify Provider Url"
        readOnly: true
        x-looker-nullable: true
      idp_cert:
        type: "string"
        description: "Identify Provider Certificate"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  SamlUserAttributeRead:
    properties:
      name:
        type: "string"
        description: "Name of User Attribute in Saml"
        readOnly: true
        x-looker-nullable: true
      required:
        type: "boolean"
        description: "Required to be in Saml assertion for login to be allowed to\
          \ succeed"
        readOnly: true
        x-looker-nullable: false
      user_attributes:
        type: "array"
        description: "Looker User Attributes"
        items:
          $ref: "#/definitions/UserAttribute"
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to saml config"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  SamlUserAttributeWrite:
    properties:
      name:
        type: "string"
        description: "Name of User Attribute in Saml"
        x-looker-nullable: true
      required:
        type: "boolean"
        description: "Required to be in Saml assertion for login to be allowed to\
          \ succeed"
        x-looker-nullable: false
      user_attribute_ids:
        type: "array"
        description: "Looker User Attribute Ids"
        items:
          type: "integer"
          format: "int64"
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to saml config"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  ScheduledPlanDestination:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      scheduled_plan_id:
        type: "integer"
        format: "int64"
        description: "Id of a scheduled plan you own"
        x-looker-nullable: true
      format:
        type: "string"
        description: "The data format to send to the given destination. Supported\
          \ formats vary by destination, but include: \"txt\", \"csv\", \"inline_json\"\
          , \"json\", \"json_detail\", \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\"\
          , \"wysiwyg_png\""
        x-looker-nullable: true
      apply_formatting:
        type: "boolean"
        description: "Are values formatted? (containing currency symbols, digit separators,\
          \ etc."
        x-looker-nullable: false
      apply_vis:
        type: "boolean"
        description: "Whether visualization options are applied to the results."
        x-looker-nullable: false
      address:
        type: "string"
        description: "Address for recipient. For email e.g. 'user@example.com'. For\
          \ webhooks e.g. 'https://domain/path'. For Amazon S3 e.g. 's3://bucket-name/path/'.\
          \ For SFTP e.g. 'sftp://host-name/path/'. "
        x-looker-nullable: true
      looker_recipient:
        type: "boolean"
        description: "Whether the recipient is a Looker user on the current instance\
          \ (only applicable for email recipients)"
        readOnly: true
        x-looker-nullable: false
      type:
        type: "string"
        description: "Type of the address ('email', 'webhook', 's3', or 'sftp')"
        x-looker-nullable: true
      parameters:
        type: "string"
        description: "JSON object containing parameters for external scheduling. For\
          \ Amazon S3, this requires keys and values for access_key_id and region.\
          \ For SFTP, this requires a key and value for username."
        x-looker-nullable: true
      secret_parameters:
        type: "string"
        description: "(Write-Only) JSON object containing secret parameters for external\
          \ scheduling. For Amazon S3, this requires a key and value for secret_access_key.\
          \ For SFTP, this requires a key and value for password."
        x-looker-write-only: true
        x-looker-nullable: true
      message:
        type: "string"
        description: "Optional message to be included in scheduled emails"
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  ScheduledPlan:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      name:
        type: "string"
        description: "Name"
        x-looker-nullable: true
      created_at:
        type: "string"
        format: "date-time"
        description: "Date and time when ScheduledPlan was created"
        readOnly: true
        x-looker-nullable: true
      updated_at:
        type: "string"
        format: "date-time"
        description: "Date and time when ScheduledPlan was last updated"
        readOnly: true
        x-looker-nullable: true
      title:
        type: "string"
        description: "Title"
        readOnly: true
        x-looker-nullable: true
      user_id:
        type: "integer"
        format: "int64"
        description: "User Id which owns this ScheduledPlan"
        x-looker-nullable: true
      user:
        description: "User who owns this ScheduledPlan"
        $ref: "#/definitions/UserPublic"
      run_as_recipient:
        type: "boolean"
        description: "Whether schedule is ran as recipient (only applicable for email\
          \ recipients)"
        x-looker-nullable: false
      enabled:
        type: "boolean"
        description: "Whether the ScheduledPlan is enabled"
        x-looker-nullable: false
      next_run_at:
        type: "string"
        format: "date-time"
        description: "When the ScheduledPlan will next run (null if running once)"
        readOnly: true
        x-looker-nullable: true
      last_run_at:
        type: "string"
        format: "date-time"
        description: "When the ScheduledPlan was last run"
        readOnly: true
        x-looker-nullable: true
      look_id:
        type: "integer"
        format: "int64"
        description: "Id of a look"
        x-looker-nullable: true
      dashboard_id:
        type: "integer"
        format: "int64"
        description: "Id of a dashboard"
        x-looker-nullable: true
      lookml_dashboard_id:
        type: "string"
        description: "Id of a LookML dashboard"
        x-looker-nullable: true
      filters_string:
        type: "string"
        description: "Query string to run look or dashboard with"
        x-looker-nullable: true
      dashboard_filters:
        type: "string"
        description: "(DEPRECATED) Alias for filters_string field"
        x-looker-deprecated: true
        x-looker-nullable: true
      require_results:
        type: "boolean"
        description: "Delivery should occur if running the dashboard or look returns\
          \ results"
        x-looker-nullable: false
      require_no_results:
        type: "boolean"
        description: "Delivery should occur if the dashboard look does not return\
          \ results"
        x-looker-nullable: false
      require_change:
        type: "boolean"
        description: "Delivery should occur if data have changed since the last run"
        x-looker-nullable: false
      send_all_results:
        type: "boolean"
        description: "Will run an unlimited query and send all results."
        x-looker-nullable: false
      crontab:
        type: "string"
        description: "Vixie-Style crontab specification when to run"
        x-looker-nullable: true
      datagroup:
        type: "string"
        description: "Name of a datagroup; if specified will run when datagroup triggered\
          \ (can't be used with cron string)"
        x-looker-nullable: true
      timezone:
        type: "string"
        description: "Timezone for interpreting the specified crontab (default is\
          \ Looker instance timezone)"
        x-looker-nullable: true
      query_id:
        type: "string"
        description: "Query id"
        x-looker-nullable: true
      scheduled_plan_destination:
        type: "array"
        description: "Scheduled plan destinations"
        items:
          $ref: "#/definitions/ScheduledPlanDestination"
        x-looker-nullable: true
      run_once:
        type: "boolean"
        description: "Whether the plan in question should only be run once (usually\
          \ for testing)"
        x-looker-nullable: false
      include_links:
        type: "boolean"
        description: "Whether links back to Looker should be included in this ScheduledPlan"
        x-looker-nullable: false
      pdf_paper_size:
        type: "string"
        description: "The size of paper a PDF should be rendered for"
        x-looker-nullable: true
      pdf_landscape:
        type: "boolean"
        description: "Whether the paper should be landscape"
        x-looker-nullable: false
      embed:
        type: "boolean"
        description: "Whether this schedule is in an embed context or not"
        x-looker-nullable: false
      color_theme:
        type: "string"
        description: "Color scheme of the dashboard if applicable"
        x-looker-nullable: true
      long_tables:
        type: "boolean"
        description: "Whether or not to expand table vis to full length"
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  Session:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      ip_address:
        type: "string"
        description: "IP address of user when this session was initiated"
        readOnly: true
        x-looker-nullable: true
      browser:
        type: "string"
        description: "User's browser type"
        readOnly: true
        x-looker-nullable: true
      operating_system:
        type: "string"
        description: "User's Operating System"
        readOnly: true
        x-looker-nullable: true
      city:
        type: "string"
        description: "City component of user location (derived from IP address)"
        readOnly: true
        x-looker-nullable: true
      state:
        type: "string"
        description: "State component of user location (derived from IP address)"
        readOnly: true
        x-looker-nullable: true
      country:
        type: "string"
        description: "Country component of user location (derived from IP address)"
        readOnly: true
        x-looker-nullable: true
      credentials_type:
        type: "string"
        description: "Type of credentials used for logging in this session"
        readOnly: true
        x-looker-nullable: true
      extended_at:
        type: "string"
        description: "Time when this session was last extended by the user"
        readOnly: true
        x-looker-nullable: true
      extended_count:
        type: "integer"
        format: "int64"
        description: "Number of times this session was extended"
        readOnly: true
        x-looker-nullable: true
      sudo_user_id:
        type: "integer"
        format: "int64"
        description: "Actual user in the case when this session represents one user\
          \ sudo'ing as another"
        readOnly: true
        x-looker-nullable: true
      created_at:
        type: "string"
        description: "Time when this session was initiated"
        readOnly: true
        x-looker-nullable: true
      expires_at:
        type: "string"
        description: "Time when this session will expire"
        readOnly: true
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  Snippet:
    properties:
      name:
        type: "string"
        description: "Name of the snippet"
        readOnly: true
        x-looker-nullable: false
      label:
        type: "string"
        description: "Label of the snippet"
        readOnly: true
        x-looker-nullable: false
      sql:
        type: "string"
        description: "SQL text of the snippet"
        readOnly: true
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  Space:
    required:
    - "parent_id"
    properties:
      child_count:
        type: "integer"
        format: "int64"
        description: "Children Count"
        readOnly: true
        x-looker-nullable: true
      content_metadata_id:
        type: "integer"
        format: "int64"
        description: "Id of content metadata"
        readOnly: true
        x-looker-nullable: true
      creator_id:
        type: "integer"
        format: "int64"
        description: "User Id of Creator"
        readOnly: true
        x-looker-nullable: true
      external_id:
        type: "string"
        description: "Embedder's Id if this space was autogenerated as an embedding\
          \ shared space via 'external_group_id' in an SSO embed login"
        readOnly: true
        x-looker-nullable: true
      id:
        type: "string"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      is_embed:
        type: "boolean"
        description: "Space is an embed space"
        readOnly: true
        x-looker-nullable: false
      is_embed_shared_root:
        type: "boolean"
        description: "Space is the root embed shared space"
        readOnly: true
        x-looker-nullable: false
      is_embed_users_root:
        type: "boolean"
        description: "Space is the root embed users space"
        readOnly: true
        x-looker-nullable: false
      is_personal:
        type: "boolean"
        description: "Space is a user's personal space"
        readOnly: true
        x-looker-nullable: false
      is_personal_descendant:
        type: "boolean"
        description: "Space is descendant of a user's personal space"
        readOnly: true
        x-looker-nullable: false
      is_shared_root:
        type: "boolean"
        description: "Space is the root shared space"
        readOnly: true
        x-looker-nullable: false
      is_users_root:
        type: "boolean"
        description: "Space is the root user space"
        readOnly: true
        x-looker-nullable: false
      name:
        type: "string"
        description: "Unique Name"
        x-looker-nullable: true
      parent_id:
        type: "string"
        description: "Id of Parent"
        x-looker-nullable: true
      is_root:
        type: "boolean"
        description: "(DEPRECATED) Space is the root shared space (alias of is_shared_root)"
        readOnly: true
        x-looker-deprecated: true
        x-looker-nullable: false
      is_user_root:
        type: "boolean"
        description: "(DEPRECATED) Space is the root user space (alias of is_users_root)"
        readOnly: true
        x-looker-deprecated: true
        x-looker-nullable: false
      dashboards:
        type: "array"
        description: "Dashboards"
        items:
          $ref: "#/definitions/DashboardBase"
        x-looker-nullable: true
      looks:
        type: "array"
        description: "Looks"
        items:
          $ref: "#/definitions/LookWithDashboards"
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  SqlQueryCreate:
    properties:
      connection_id:
        type: "string"
        description: "Id of Connection (this or \"model_name\" required)"
        x-looker-nullable: true
      model_name:
        type: "string"
        description: "Name of LookML Model (this or \"connection_id\" required)"
        x-looker-nullable: true
      sql:
        type: "string"
        description: "SQL query"
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  SqlQuery:
    properties:
      slug:
        type: "string"
        description: "The identifier of the SQL query"
        readOnly: true
        x-looker-nullable: false
      last_runtime:
        type: "number"
        format: "float"
        description: "Number of seconds this query took to run the most recent time\
          \ it was run"
        readOnly: true
        x-looker-nullable: true
      run_count:
        type: "integer"
        format: "int64"
        description: "Number of times this query has been run"
        readOnly: true
        x-looker-nullable: false
      browser_limit:
        type: "integer"
        format: "int64"
        description: "Maximum number of rows this query will display on the SQL Runner\
          \ page"
        readOnly: true
        x-looker-nullable: false
      sql:
        type: "string"
        description: "SQL query text"
        readOnly: true
        x-looker-nullable: false
      last_run_at:
        type: "string"
        description: "The most recent time this query was run"
        readOnly: true
        x-looker-nullable: true
      connection:
        description: "Connection this query uses"
        $ref: "#/definitions/DBConnectionBase"
      model_name:
        type: "string"
        description: "Model name this query uses"
        readOnly: true
        x-looker-nullable: true
      creator:
        description: "User who created this SQL query"
        $ref: "#/definitions/UserPublic"
      explore_url:
        type: "string"
        description: "Explore page URL for this SQL query"
        readOnly: true
        x-looker-nullable: true
      plaintext:
        type: "boolean"
        description: "Should this query be rendered as plain text"
        readOnly: true
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  Timezone:
    properties:
      value:
        type: "string"
        description: "Timezone"
        readOnly: true
        x-looker-nullable: true
      label:
        type: "string"
        description: "Description of timezone"
        readOnly: true
        x-looker-nullable: true
      group:
        type: "string"
        description: "Timezone group (e.g Common, Other, etc.)"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  UserAttribute:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      name:
        type: "string"
        description: "Name of user attribute"
        x-looker-nullable: true
      label:
        type: "string"
        description: "Human-friendly label for user attribute"
        x-looker-nullable: true
      type:
        type: "string"
        description: "Type of user attribute (\"string\", \"number\", \"datetime\"\
          , \"yesno\", \"zipcode\")"
        x-looker-nullable: true
      default_value:
        type: "string"
        description: "Default value for when no value is set on the user"
        x-looker-nullable: true
      is_system:
        type: "boolean"
        description: "Attribute is a system default"
        readOnly: true
        x-looker-nullable: false
      value_is_hidden:
        type: "boolean"
        description: "If true, users will not be able to view values of this attribute"
        x-looker-nullable: false
      user_can_view:
        type: "boolean"
        description: "Non-admin users can see the values of their attributes and use\
          \ them in filters"
        x-looker-nullable: false
      user_can_edit:
        type: "boolean"
        description: "Users can change the value of this attribute for themselves"
        x-looker-nullable: false
      hidden_value_domain_whitelist:
        type: "string"
        description: "Destinations to which a hidden attribute may be sent. Once set,\
          \ cannot be edited."
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  UserAttributeGroupValue:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id of this group-attribute relation"
        readOnly: true
        x-looker-nullable: false
      group_id:
        type: "integer"
        format: "int64"
        description: "Id of group"
        readOnly: true
        x-looker-nullable: true
      user_attribute_id:
        type: "integer"
        format: "int64"
        description: "Id of user attribute"
        readOnly: true
        x-looker-nullable: true
      value_is_hidden:
        type: "boolean"
        description: "If true, the \"value\" field will be null, because the attribute\
          \ settings block access to this value"
        readOnly: true
        x-looker-nullable: false
      rank:
        type: "integer"
        format: "int64"
        description: "Precedence for resolving value for user"
        readOnly: true
        x-looker-nullable: true
      value:
        type: "string"
        description: "Value of user attribute for group"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  UserAttributeWithValue:
    properties:
      name:
        type: "string"
        description: "Name of user attribute"
        readOnly: true
        x-looker-nullable: true
      label:
        type: "string"
        description: "Human-friendly label for user attribute"
        readOnly: true
        x-looker-nullable: true
      rank:
        type: "integer"
        format: "int64"
        description: "Precedence for setting value on user (lowest wins)"
        readOnly: true
        x-looker-nullable: true
      value:
        type: "string"
        description: "Value of attribute for user"
        x-looker-nullable: true
      user_id:
        type: "integer"
        format: "int64"
        description: "Id of User"
        readOnly: true
        x-looker-nullable: true
      user_can_edit:
        type: "boolean"
        description: "Can the user set this value"
        readOnly: true
        x-looker-nullable: false
      value_is_hidden:
        type: "boolean"
        description: "If true, the \"value\" field will be null, because the attribute\
          \ settings block access to this value"
        readOnly: true
        x-looker-nullable: false
      user_attribute_id:
        type: "integer"
        format: "int64"
        description: "Id of User Attribute"
        readOnly: true
        x-looker-nullable: true
      source:
        type: "string"
        description: "How user got this value for this attribute"
        readOnly: true
        x-looker-nullable: true
      hidden_value_domain_whitelist:
        type: "string"
        description: "If this user attribute is hidden, whitelist of destinations\
          \ to which it may be sent."
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  UserIdOnly:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
    x-looker-status: "beta"
  User:
    properties:
      avatar_url:
        type: "string"
        format: "uri"
        description: "URL for the avatar image (may be generic)"
        readOnly: true
        x-looker-nullable: true
      credentials_api3:
        type: "array"
        description: "API 3 credentials"
        items:
          $ref: "#/definitions/CredentialsApi3"
        x-looker-nullable: true
      credentials_email:
        description: "Email/Password login credentials"
        $ref: "#/definitions/CredentialsEmail"
      credentials_embed:
        type: "array"
        description: "Embed credentials"
        items:
          $ref: "#/definitions/CredentialsEmbed"
        x-looker-nullable: true
      credentials_google:
        description: "Google auth credentials"
        $ref: "#/definitions/CredentialsGoogle"
      credentials_ldap:
        description: "LDAP credentials"
        $ref: "#/definitions/CredentialsLDAP"
      credentials_looker_openid:
        description: "LookerOpenID credentials. Used for login by Looker Analysts"
        $ref: "#/definitions/CredentialsLookerOpenid"
      credentials_oidc:
        description: "OpenID Connect auth credentials"
        $ref: "#/definitions/CredentialsOIDC"
      credentials_saml:
        description: "Saml auth credentials"
        $ref: "#/definitions/CredentialsSaml"
      credentials_totp:
        description: "Two-factor credentials"
        $ref: "#/definitions/CredentialsTotp"
      display_name:
        type: "string"
        description: "Full name for display (available only if both first_name and\
          \ last_name are set)"
        readOnly: true
        x-looker-nullable: true
      email:
        type: "string"
        description: "EMail address"
        readOnly: true
        x-looker-nullable: true
      embed_group_space_id:
        type: "integer"
        format: "int64"
        description: "(Embed only) ID of user's group space based on the external_group_id\
          \ optionally specified during embed user login"
        readOnly: true
        x-looker-nullable: true
      first_name:
        type: "string"
        description: "First name"
        x-looker-nullable: true
      group_ids:
        type: "array"
        description: "Array of ids of the groups for this user"
        items:
          type: "integer"
          format: "int64"
        x-looker-nullable: true
      home_space_id:
        type: "string"
        description: "ID string for user's home space"
        x-looker-nullable: true
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      is_disabled:
        type: "boolean"
        description: "Account has been disabled"
        x-looker-nullable: false
      last_name:
        type: "string"
        description: "Last name"
        x-looker-nullable: true
      locale:
        type: "string"
        description: "User's preferred locale. User locale takes precedence over Looker's\
          \ system-wide default locale. Locale determines language of display strings\
          \ and date and numeric formatting in API responses. Locale string must be\
          \ a 2 letter language code or a combination of language code and region\
          \ code: 'en' or 'en-US', for example."
        x-looker-nullable: true
      looker_versions:
        type: "array"
        description: "Array of strings representing the Looker versions that this\
          \ user has used (this only goes back as far as '3.54.0')"
        items:
          type: "string"
        x-looker-nullable: true
      models_dir_validated:
        type: "boolean"
        description: "User's dev workspace has been checked for presence of applicable\
          \ production projects"
        x-looker-nullable: false
      personal_space_id:
        type: "integer"
        format: "int64"
        description: "ID of user's personal space"
        readOnly: true
        x-looker-nullable: true
      presumed_looker_employee:
        type: "boolean"
        description: "User is identified as an employee of Looker"
        readOnly: true
        x-looker-nullable: false
      role_ids:
        type: "array"
        description: "Array of ids of the roles for this user"
        items:
          type: "integer"
          format: "int64"
        x-looker-nullable: true
      sessions:
        type: "array"
        description: "Active sessions"
        items:
          $ref: "#/definitions/Session"
        x-looker-nullable: true
      ui_state:
        type: "object"
        description: "Per user dictionary of undocumented state information owned\
          \ by the Looker UI."
        additionalProperties:
          type: "string"
        x-looker-nullable: true
      verified_looker_employee:
        type: "boolean"
        description: "User is identified as an employee of Looker who has been verified\
          \ via Looker corporate authentication"
        readOnly: true
        x-looker-nullable: false
      credentials_api:
        description: "API user credentials. NO LONGER SUPPORTED."
        $ref: "#/definitions/CredentialsApi"
      access_filters:
        type: "array"
        description: "Model access filters. NOTE: this feature is completely end of\
          \ life and has been removed from the product."
        items:
          $ref: "#/definitions/AccessFilter"
        x-looker-nullable: true
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  UserPublic:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      first_name:
        type: "string"
        description: "First Name"
        readOnly: true
        x-looker-nullable: false
      last_name:
        type: "string"
        description: "Last Name"
        readOnly: true
        x-looker-nullable: false
      display_name:
        type: "string"
        description: "Full name for display (available only if both first_name and\
          \ last_name are set)"
        readOnly: true
        x-looker-nullable: true
      avatar_url:
        type: "string"
        format: "uri"
        description: "URL for the avatar image (may be generic)"
        readOnly: true
        x-looker-nullable: false
      url:
        type: "string"
        format: "uri"
        description: "Link to get this item"
        readOnly: true
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "stable"
  ApiVersionElement:
    properties:
      version:
        type: "string"
        description: "Version number as it appears in '/api/xxx/' urls"
        readOnly: true
        x-looker-nullable: true
      full_version:
        type: "string"
        description: "Full version number including minor version"
        readOnly: true
        x-looker-nullable: true
      status:
        type: "string"
        description: "Status of this version"
        readOnly: true
        x-looker-nullable: true
      swagger_url:
        type: "string"
        format: "uri"
        description: "Url for swagger.json for this version"
        readOnly: true
        x-looker-nullable: true
    x-looker-status: "stable"
  ApiVersion:
    properties:
      looker_release_version:
        type: "string"
        description: "Current Looker release version number"
        readOnly: true
        x-looker-nullable: true
      current_version:
        description: "Current version for this Looker instance"
        $ref: "#/definitions/ApiVersionElement"
      supported_versions:
        type: "array"
        description: "Array of versions supported by this Looker instance"
        items:
          $ref: "#/definitions/ApiVersionElement"
        x-looker-nullable: true
    x-looker-status: "stable"
  WhitelabelConfiguration:
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique Id"
        readOnly: true
        x-looker-nullable: false
      logo_file:
        type: "string"
        description: "Customer logo image. Expected base64 encoded data (write-only)"
        x-looker-nullable: true
      logo_url:
        type: "string"
        description: "Logo image url (read-only)"
        readOnly: true
        x-looker-nullable: true
      favicon_file:
        type: "string"
        description: "Custom favicon image. Expected base64 encoded data (write-only)"
        x-looker-nullable: true
      favicon_url:
        type: "string"
        description: "Favicon image url (read-only)"
        readOnly: true
        x-looker-nullable: true
      default_title:
        type: "string"
        description: "Default page title"
        x-looker-nullable: true
      show_help_menu:
        type: "boolean"
        description: "Boolean to toggle showing help menus"
        x-looker-nullable: false
      show_docs:
        type: "boolean"
        description: "Boolean to toggle showing docs"
        x-looker-nullable: false
      show_email_sub_options:
        type: "boolean"
        description: "Boolean to toggle showing email subscription options."
        x-looker-nullable: false
      allow_looker_mentions:
        type: "boolean"
        description: "Boolean to toggle mentions of Looker in emails"
        x-looker-nullable: false
      allow_looker_links:
        type: "boolean"
        description: "Boolean to toggle links to Looker in emails"
        x-looker-nullable: false
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
  Workspace:
    properties:
      id:
        type: "string"
        description: "The unique id of this user workspace. Predefined workspace ids\
          \ include \"production\" and \"dev\""
        readOnly: true
        x-looker-nullable: false
      projects:
        type: "array"
        description: "The local state of each project in the workspace"
        items:
          $ref: "#/definitions/Project"
        x-looker-nullable: true
      can:
        type: "object"
        description: "Operations the current user is able to perform on this object"
        additionalProperties:
          type: "boolean"
        x-looker-nullable: false
    x-looker-status: "beta"
